--- aclocal.m4
+++ aclocal.m4
@@ -42,7 +42,7 @@
 dnl	ac_cv_lbl_gcc_vers
 dnl	LBL_CFLAGS
 dnl
-AC_DEFUN(AC_LBL_C_INIT,
+AC_DEFUN([AC_LBL_C_INIT],
     [AC_PREREQ(2.12)
     AC_BEFORE([$0], [AC_PROG_CC])
     AC_BEFORE([$0], [AC_LBL_FIXINCLUDES])
@@ -167,7 +167,7 @@
 # at least some versions of HP's C compiler can inline that, but can't
 # inline a function that returns a struct pointer.
 #
-AC_DEFUN(AC_LBL_C_INLINE,
+AC_DEFUN([AC_LBL_C_INLINE],
     [AC_MSG_CHECKING(for inline)
     AC_CACHE_VAL(ac_cv_lbl_inline, [
 	ac_cv_lbl_inline=""
@@ -220,7 +220,7 @@
 dnl	LIBS
 dnl	LBL_LIBS
 dnl
-AC_DEFUN(AC_LBL_LIBPCAP,
+AC_DEFUN([AC_LBL_LIBPCAP],
     [AC_REQUIRE([AC_LBL_LIBRARY_NET])
     dnl
     dnl save a copy before locating libpcap.a
@@ -375,7 +375,7 @@
 dnl	RETSIGTYPE (defined)
 dnl	RETSIGVAL (defined)
 dnl
-AC_DEFUN(AC_LBL_TYPE_SIGNAL,
+AC_DEFUN([AC_LBL_TYPE_SIGNAL],
     [AC_BEFORE([$0], [AC_LBL_LIBPCAP])
     AC_TYPE_SIGNAL
     if test "$ac_cv_type_signal" = void ; then
@@ -405,7 +405,7 @@
 dnl
 dnl	AC_LBL_FIXINCLUDES
 dnl
-AC_DEFUN(AC_LBL_FIXINCLUDES,
+AC_DEFUN([AC_LBL_FIXINCLUDES],
     [if test "$GCC" = yes ; then
 	    AC_MSG_CHECKING(for ANSI ioctl definitions)
 	    AC_CACHE_VAL(ac_cv_lbl_gcc_fixincludes,
@@ -451,7 +451,7 @@
 dnl	$2 (yacc appended)
 dnl	$3 (optional flex and bison -P prefix)
 dnl
-AC_DEFUN(AC_LBL_LEX_AND_YACC,
+AC_DEFUN([AC_LBL_LEX_AND_YACC],
     [AC_ARG_WITH(flex, [  --without-flex          don't use flex])
     AC_ARG_WITH(bison, [  --without-bison         don't use bison])
     if test "$with_flex" = no ; then
@@ -504,7 +504,7 @@
 dnl
 dnl	DECLWAITSTATUS (defined)
 dnl
-AC_DEFUN(AC_LBL_UNION_WAIT,
+AC_DEFUN([AC_LBL_UNION_WAIT],
     [AC_MSG_CHECKING(if union wait is used)
     AC_CACHE_VAL(ac_cv_lbl_union_wait,
 	AC_TRY_COMPILE([
@@ -533,7 +533,7 @@
 dnl
 dnl	HAVE_SOCKADDR_SA_LEN (defined)
 dnl
-AC_DEFUN(AC_LBL_SOCKADDR_SA_LEN,
+AC_DEFUN([AC_LBL_SOCKADDR_SA_LEN],
     [AC_MSG_CHECKING(if sockaddr struct has sa_len member)
     AC_CACHE_VAL(ac_cv_lbl_sockaddr_has_sa_len,
 	AC_TRY_COMPILE([
@@ -558,7 +558,7 @@
 dnl
 dnl	ac_cv_lbl_have_run_path (yes or no)
 dnl
-AC_DEFUN(AC_LBL_HAVE_RUN_PATH,
+AC_DEFUN([AC_LBL_HAVE_RUN_PATH],
     [AC_MSG_CHECKING(for ${CC-cc} -R)
     AC_CACHE_VAL(ac_cv_lbl_have_run_path,
 	[echo 'main(){}' > conftest.c
@@ -627,7 +627,7 @@
 dnl
 dnl	LBL_ALIGN (DEFINED)
 dnl
-AC_DEFUN(AC_LBL_UNALIGNED_ACCESS,
+AC_DEFUN([AC_LBL_UNALIGNED_ACCESS],
     [AC_MSG_CHECKING(if unaligned accesses fail)
     AC_CACHE_VAL(ac_cv_lbl_unaligned_fail,
 	[case "$host_cpu" in
@@ -733,7 +733,7 @@
 dnl	HAVE_OS_PROTO_H (defined)
 dnl	os-proto.h (symlinked)
 dnl
-AC_DEFUN(AC_LBL_DEVEL,
+AC_DEFUN([AC_LBL_DEVEL],
     [rm -f os-proto.h
     if test "${LBL_CFLAGS+set}" = set; then
 	    $1="$$1 ${LBL_CFLAGS}"
@@ -790,7 +790,7 @@
 dnl useful in the future.
 dnl
 
-define(AC_LBL_CHECK_LIB,
+define([AC_LBL_CHECK_LIB],
 [AC_MSG_CHECKING([for $2 in -l$1])
 dnl Use a cache variable name containing the library, function
 dnl name, and extra libraries to link with, because the test really is
@@ -802,16 +802,10 @@
 [ac_save_LIBS="$LIBS"
 LIBS="-l$1 $5 $LIBS"
 AC_TRY_LINK(dnl
-ifelse([$2], [main], , dnl Avoid conflicting decl of main.
-[/* Override any gcc2 internal prototype to avoid an error.  */
-]ifelse(AC_LANG, CPLUSPLUS, [#ifdef __cplusplus
-extern "C"
-#endif
-])dnl
 [/* We use char because int might match the return type of a gcc2
     builtin and then its argument prototype would still apply.  */
 char $2();
-]),
+],
 	    [$2()],
 	    eval "ac_cv_lbl_lib_$ac_lib_var=yes",
 	    eval "ac_cv_lbl_lib_$ac_lib_var=no")
@@ -869,7 +863,7 @@
 dnl statically and happen to have a libresolv.a lying around (and no
 dnl libnsl.a).
 dnl
-AC_DEFUN(AC_LBL_LIBRARY_NET, [
+AC_DEFUN([AC_LBL_LIBRARY_NET], [
     # Most operating systems have gethostbyname() in the default searched
     # libraries (i.e. libc):
     # Some OSes (eg. Solaris) place it in libnsl
@@ -916,7 +910,7 @@
 
 dnl
 dnl Checks to see if AF_INET6 is defined
-AC_DEFUN(AC_CHECK_AF_INET6, [
+AC_DEFUN([AC_CHECK_AF_INET6], [
 	AC_MSG_CHECKING(for AF_INET6)
 	AC_CACHE_VAL($1,
 	AC_TRY_COMPILE([
@@ -934,7 +928,7 @@
 dnl
 dnl Checks to see if the sockaddr struct has the 4.4 BSD sa_len member
 dnl borrowed from LBL libpcap
-AC_DEFUN(AC_CHECK_SA_LEN, [
+AC_DEFUN([AC_CHECK_SA_LEN], [
 	AC_MSG_CHECKING(if sockaddr struct has sa_len member)
 	AC_CACHE_VAL($1,
 	AC_TRY_COMPILE([
@@ -951,7 +945,7 @@
 
 dnl
 dnl Checks for portable prototype declaration macro
-AC_DEFUN(AC_CHECK_PORTABLE_PROTO,  [
+AC_DEFUN([AC_CHECK_PORTABLE_PROTO],  [
 	AC_MSG_CHECKING(for __P)
 	AC_CACHE_VAL($1,
 	AC_TRY_COMPILE([
@@ -966,7 +960,7 @@
 ])
 
 dnl checks for u_intXX_t
-AC_DEFUN(AC_CHECK_BITTYPES, [
+AC_DEFUN([AC_CHECK_BITTYPES], [
 	$1=yes
 dnl check for u_int8_t
 	AC_MSG_CHECKING(for u_int8_t)
@@ -1028,7 +1022,7 @@
 
 dnl
 dnl Checks for addrinfo structure
-AC_DEFUN(AC_STRUCT_ADDRINFO, [
+AC_DEFUN([AC_STRUCT_ADDRINFO], [
 	AC_MSG_CHECKING(for addrinfo)
 	AC_CACHE_VAL($1,
 	AC_TRY_COMPILE([
@@ -1046,7 +1040,7 @@
 
 dnl
 dnl Checks for NI_MAXSERV
-AC_DEFUN(AC_NI_MAXSERV, [
+AC_DEFUN([AC_NI_MAXSERV], [
 	AC_MSG_CHECKING(for NI_MAXSERV)
 	AC_CACHE_VAL($1,
 	AC_EGREP_CPP(yes, [#include <netdb.h>
@@ -1063,7 +1057,7 @@
 
 dnl
 dnl Checks for NI_NAMEREQD
-AC_DEFUN(AC_NI_NAMEREQD, [
+AC_DEFUN([AC_NI_NAMEREQD], [
 	AC_MSG_CHECKING(for NI_NAMEREQD)
 	AC_CACHE_VAL($1,
 	AC_EGREP_CPP(yes, [#include <netdb.h>
@@ -1080,7 +1074,7 @@
 
 dnl
 dnl Checks for sockaddr_storage structure
-AC_DEFUN(AC_STRUCT_SA_STORAGE, [
+AC_DEFUN([AC_STRUCT_SA_STORAGE], [
 	AC_MSG_CHECKING(for sockaddr_storage)
 	AC_CACHE_VAL($1,
 	AC_TRY_COMPILE([
@@ -1097,7 +1091,7 @@
 
 dnl
 dnl Checks for macro of IP address size
-AC_DEFUN(AC_CHECK_ADDRSZ, [
+AC_DEFUN([AC_CHECK_ADDRSZ], [
 	$1=yes
 dnl check for INADDRSZ
 	AC_MSG_CHECKING(for INADDRSZ)
@@ -1131,7 +1125,7 @@
 
 dnl
 dnl check for RES_USE_INET6
-AC_DEFUN(AC_CHECK_RES_USE_INET6, [
+AC_DEFUN([AC_CHECK_RES_USE_INET6], [
 	AC_MSG_CHECKING(for RES_USE_INET6)
 	AC_CACHE_VAL($1,
 	AC_TRY_COMPILE([
@@ -1149,7 +1143,7 @@
 
 dnl
 dnl check for AAAA
-AC_DEFUN(AC_CHECK_AAAA, [
+AC_DEFUN([AC_CHECK_AAAA], [
 	AC_MSG_CHECKING(for AAAA)
 	AC_CACHE_VAL($1,
 	AC_TRY_COMPILE([
@@ -1166,7 +1160,7 @@
 
 dnl
 dnl check for struct res_state_ext
-AC_DEFUN(AC_STRUCT_RES_STATE_EXT, [
+AC_DEFUN([AC_STRUCT_RES_STATE_EXT], [
 	AC_MSG_CHECKING(for res_state_ext)
 	AC_CACHE_VAL($1,
 	AC_TRY_COMPILE([
@@ -1185,7 +1179,7 @@
 
 dnl
 dnl check for struct res_state_ext
-AC_DEFUN(AC_STRUCT_RES_STATE, [
+AC_DEFUN([AC_STRUCT_RES_STATE], [
 	AC_MSG_CHECKING(for nsort in res_state)
 	AC_CACHE_VAL($1,
 	AC_TRY_COMPILE([
@@ -1204,7 +1198,7 @@
 
 dnl
 dnl check for h_errno
-AC_DEFUN(AC_VAR_H_ERRNO, [
+AC_DEFUN([AC_VAR_H_ERRNO], [
 	AC_MSG_CHECKING(for h_errno)
 	AC_CACHE_VAL(ac_cv_var_h_errno,
 	AC_TRY_COMPILE([
@@ -1223,7 +1217,7 @@
 dnl Test for __attribute__
 dnl
 
-AC_DEFUN(AC_C___ATTRIBUTE__, [
+AC_DEFUN([AC_C___ATTRIBUTE__], [
 AC_MSG_CHECKING(for __attribute__)
 AC_CACHE_VAL(ac_cv___attribute__, [
 AC_COMPILE_IFELSE(
--- configure.in
+++ configure.in
@@ -185,7 +185,7 @@
 	for i in inria kame linux-glibc linux-libinet6 toshiba v6d zeta; do
 		case $i in
 		inria)
-			dnl http://www.kame.net/
+#			http://www.kame.net/
 			AC_EGREP_CPP(yes,
 [#include <netinet/in.h>
 #ifdef IPV6_INRIA_VERSION
@@ -195,7 +195,7 @@
 				CFLAGS="-DINET6 $CFLAGS"])
 			;;
 		kame)
-			dnl http://www.kame.net/
+#			http://www.kame.net/
 			AC_EGREP_CPP(yes,
 [#include <netinet/in.h>
 #ifdef __KAME__
@@ -208,7 +208,7 @@
 				CFLAGS="-DINET6 $CFLAGS"])
 			;;
 		linux-glibc)
-			dnl http://www.v6.linux.or.jp/
+#			http://www.v6.linux.or.jp/
 			AC_EGREP_CPP(yes,
 [#include <features.h>
 #if defined(__GLIBC__) && __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1
@@ -218,7 +218,7 @@
 				CFLAGS="-DINET6 $CFLAGS"])
 			;;
 		linux-libinet6)
-			dnl http://www.v6.linux.or.jp/
+#			http://www.v6.linux.or.jp/
 			dnl
 			dnl This also matches Solaris 8 and Tru64 UNIX 5.1,
 			dnl and possibly other versions of those OSes
@@ -518,7 +518,7 @@
 AC_CHECK_FUNCS(vsnprintf snprintf,,
 	[needsnprintf=yes])
 if test $needsnprintf = yes; then
-	AC_LIBOBJ(snprintf)
+	AC_LIBOBJ([snprintf])
 fi
 
 AC_LBL_TYPE_SIGNAL
