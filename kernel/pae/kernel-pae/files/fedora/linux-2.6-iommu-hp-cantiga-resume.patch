--- linux-2.6.31.x86_64/drivers/pci/intel-iommu.c.orig	2009-11-25 10:37:05.000000000 +0000
+++ linux-2.6.31.x86_64/drivers/pci/intel-iommu.c	2009-11-26 07:20:04.000000000 +0000
@@ -3073,6 +3073,36 @@ static void __init init_no_remapping_dev
 }
 
 #ifdef CONFIG_SUSPEND
+
+/*
+ * On Cantiga, the dedicated IOMMU for the integrated graphics won't
+ * come back unless the MMIO BAR for the gfx device (00:02.0) is enabled.
+ * And some HP BIOSes don't restore it on resume. Linux will restore it
+ * later, but that's too late -- we need to reinitialise the IOMMU first.
+ */
+void cantiga_gfx_bar_enable(struct dmar_drhd_unit *drhd)
+{
+	int i;
+	uint32_t mmiobar;
+
+	for (i = 0; i < drhd->devices_cnt; i++) {
+		if (!drhd->devices[i] ||
+		    drhd->devices[i]->vendor != 0x8086 ||
+		    drhd->devices[i]->device != 0x2a42)
+			continue;
+
+		pci_read_config_dword(drhd->devices[i], PCI_BASE_ADDRESS_0,
+				      &mmiobar);
+		if (!(mmiobar & PCI_BASE_ADDRESS_MEM_MASK) &&
+		    pci_resource_start(drhd->devices[i], 0)) {
+			WARN(1, "BIOS failed to restore BARs for integrated graphics device; fixing...\n");
+			pci_write_config_dword(drhd->devices[i],
+					       PCI_BASE_ADDRESS_0,
+					       pci_resource_start(drhd->devices[i], 0) | mmiobar);
+		}
+	}
+}
+
 static int init_iommu_hw(void)
 {
 	struct dmar_drhd_unit *drhd;
@@ -3091,6 +3121,9 @@ static int init_iommu_hw(void)
 					   DMA_CCMD_GLOBAL_INVL);
 		iommu->flush.flush_iotlb(iommu, 0, 0, 0,
 					 DMA_TLB_GLOBAL_FLUSH);
+
+		cantiga_gfx_bar_enable(drhd);
+
 		iommu_enable_translation(iommu);
 		iommu_disable_protect_mem_regions(iommu);
 	}
