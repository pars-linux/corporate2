diff -up linux-2.6.31.noarch/drivers/gpu/drm/drm_irq.c.da linux-2.6.31.noarch/drivers/gpu/drm/drm_irq.c
--- linux-2.6.31.noarch/drivers/gpu/drm/drm_irq.c.da	2009-09-10 08:13:59.000000000 +1000
+++ linux-2.6.31.noarch/drivers/gpu/drm/drm_irq.c	2009-10-08 14:21:08.000000000 +1000
@@ -37,6 +37,7 @@
 
 #include <linux/interrupt.h>	/* For task queue support */
 
+#include <linux/vgaarb.h>
 /**
  * Get interrupt from bus id.
  *
@@ -171,6 +172,26 @@ err:
 }
 EXPORT_SYMBOL(drm_vblank_init);
 
+static void drm_irq_vgaarb_nokms(void *cookie, bool state)
+{
+	struct drm_device *dev = cookie;
+
+	if (dev->driver->vgaarb_irq) {
+		dev->driver->vgaarb_irq(dev, state);
+		return;
+	}
+
+	if (!dev->irq_enabled)
+		return;
+
+	if (state)
+		dev->driver->irq_uninstall(dev);
+	else {
+		dev->driver->irq_preinstall(dev);
+		dev->driver->irq_postinstall(dev);
+	}
+}
+
 /**
  * Install IRQ handler.
  *
@@ -231,6 +252,9 @@ int drm_irq_install(struct drm_device *d
 		return ret;
 	}
 
+	if (!drm_core_check_feature(dev, DRIVER_MODESET))
+		vga_client_register(dev->pdev, (void *)dev, drm_irq_vgaarb_nokms, NULL);
+
 	/* After installing handler */
 	ret = dev->driver->irq_postinstall(dev);
 	if (ret < 0) {
@@ -279,6 +303,9 @@ int drm_irq_uninstall(struct drm_device 
 
 	DRM_DEBUG("irq=%d\n", dev->pdev->irq);
 
+	if (!drm_core_check_feature(dev, DRIVER_MODESET))
+		vga_client_register(dev->pdev, NULL, NULL, NULL);
+
 	dev->driver->irq_uninstall(dev);
 
 	free_irq(dev->pdev->irq, dev);
diff -up linux-2.6.31.noarch/drivers/gpu/drm/i915/i915_dma.c.da linux-2.6.31.noarch/drivers/gpu/drm/i915/i915_dma.c
--- linux-2.6.31.noarch/drivers/gpu/drm/i915/i915_dma.c.da	2009-10-08 14:20:49.000000000 +1000
+++ linux-2.6.31.noarch/drivers/gpu/drm/i915/i915_dma.c	2009-10-08 14:21:08.000000000 +1000
@@ -33,6 +33,7 @@
 #include "intel_drv.h"
 #include "i915_drm.h"
 #include "i915_drv.h"
+#include <linux/vgaarb.h>
 
 /* Really want an OS-independent resettable timer.  Would like to have
  * this loop run for (eg) 3 sec, but have the timer reset every time
@@ -1012,6 +1013,19 @@ static int i915_probe_agp(struct drm_dev
 	return 0;
 }
 
+/* true = enable decode, false = disable decoder */
+static unsigned int i915_vga_set_decode(void *cookie, bool state)
+{
+	struct drm_device *dev = cookie;
+
+	intel_modeset_vga_set_state(dev, state);
+	if (state)
+		return VGA_RSRC_LEGACY_IO | VGA_RSRC_LEGACY_MEM |
+		       VGA_RSRC_NORMAL_IO | VGA_RSRC_NORMAL_MEM;
+	else
+		return VGA_RSRC_NORMAL_IO | VGA_RSRC_NORMAL_MEM;
+}
+
 static int i915_load_modeset_init(struct drm_device *dev,
 				  unsigned long prealloc_size,
 				  unsigned long agp_size)
@@ -1057,6 +1071,11 @@ static int i915_load_modeset_init(struct
 	if (ret)
 		DRM_INFO("failed to find VBIOS tables\n");
 
+	/* if we have > 1 VGA cards, then disable the radeon VGA resources */
+	ret = vga_client_register(dev->pdev, dev, NULL, i915_vga_set_decode);
+	if (ret)
+		goto destroy_ringbuffer;
+
 	ret = drm_irq_install(dev);
 	if (ret)
 		goto destroy_ringbuffer;
@@ -1324,6 +1343,7 @@ int i915_driver_unload(struct drm_device
 
 	if (drm_core_check_feature(dev, DRIVER_MODESET)) {
 		drm_irq_uninstall(dev);
+		vga_client_register(dev->pdev, NULL, NULL, NULL);
 	}
 
 	if (dev->pdev->msi_enabled)
diff -up linux-2.6.31.noarch/drivers/gpu/drm/i915/i915_drv.h.da linux-2.6.31.noarch/drivers/gpu/drm/i915/i915_drv.h
--- linux-2.6.31.noarch/drivers/gpu/drm/i915/i915_drv.h.da	2009-10-08 14:20:49.000000000 +1000
+++ linux-2.6.31.noarch/drivers/gpu/drm/i915/i915_drv.h	2009-10-08 14:21:08.000000000 +1000
@@ -766,6 +766,7 @@ static inline void opregion_enable_asle(
 /* modesetting */
 extern void intel_modeset_init(struct drm_device *dev);
 extern void intel_modeset_cleanup(struct drm_device *dev);
+extern int intel_modeset_vga_set_state(struct drm_device *dev, bool state);
 
 /**
  * Lock test for when it's just for synchronization of ring access.
diff -up linux-2.6.31.noarch/drivers/gpu/drm/i915/i915_reg.h.da linux-2.6.31.noarch/drivers/gpu/drm/i915/i915_reg.h
--- linux-2.6.31.noarch/drivers/gpu/drm/i915/i915_reg.h.da	2009-10-08 14:20:49.000000000 +1000
+++ linux-2.6.31.noarch/drivers/gpu/drm/i915/i915_reg.h	2009-10-08 14:21:08.000000000 +1000
@@ -30,6 +30,7 @@
  * fb aperture size and the amount of pre-reserved memory.
  */
 #define INTEL_GMCH_CTRL		0x52
+#define INTEL_GMCH_VGA_DISABLE  (1 << 1)
 #define INTEL_GMCH_ENABLED	0x4
 #define INTEL_GMCH_MEM_MASK	0x1
 #define INTEL_GMCH_MEM_64M	0x1
diff -up linux-2.6.31.noarch/drivers/gpu/drm/i915/intel_display.c.da linux-2.6.31.noarch/drivers/gpu/drm/i915/intel_display.c
--- linux-2.6.31.noarch/drivers/gpu/drm/i915/intel_display.c.da	2009-10-08 14:20:49.000000000 +1000
+++ linux-2.6.31.noarch/drivers/gpu/drm/i915/intel_display.c	2009-10-08 14:21:08.000000000 +1000
@@ -3928,3 +3928,20 @@ struct drm_encoder *intel_best_encoder(s
 
 	return &intel_output->enc;
 }
+
+/*
+ * set vga decode state - true == enable VGA decode
+ */
+int intel_modeset_vga_set_state(struct drm_device *dev, bool state)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	u16 gmch_ctrl;
+
+	pci_read_config_word(dev_priv->bridge_dev, INTEL_GMCH_CTRL, &gmch_ctrl);
+	if (state)
+		gmch_ctrl &= ~INTEL_GMCH_VGA_DISABLE;
+	else
+		gmch_ctrl |= INTEL_GMCH_VGA_DISABLE;
+	pci_write_config_word(dev_priv->bridge_dev, INTEL_GMCH_CTRL, gmch_ctrl);
+	return 0;
+}
diff -up linux-2.6.31.noarch/drivers/gpu/drm/i915/intel_drv.h.da linux-2.6.31.noarch/drivers/gpu/drm/i915/intel_drv.h
--- linux-2.6.31.noarch/drivers/gpu/drm/i915/intel_drv.h.da	2009-10-08 14:20:49.000000000 +1000
+++ linux-2.6.31.noarch/drivers/gpu/drm/i915/intel_drv.h	2009-10-08 14:21:08.000000000 +1000
@@ -181,4 +181,5 @@ extern int intel_framebuffer_create(stru
 				    struct drm_mode_fb_cmd *mode_cmd,
 				    struct drm_framebuffer **fb,
 				    struct drm_gem_object *obj);
+
 #endif /* __INTEL_DRV_H__ */
diff -up linux-2.6.31.noarch/drivers/gpu/drm/radeon/r100.c.da linux-2.6.31.noarch/drivers/gpu/drm/radeon/r100.c
--- linux-2.6.31.noarch/drivers/gpu/drm/radeon/r100.c.da	2009-10-08 14:20:49.000000000 +1000
+++ linux-2.6.31.noarch/drivers/gpu/drm/radeon/r100.c	2009-10-08 14:21:08.000000000 +1000
@@ -1763,6 +1763,20 @@ void r100_vram_init_sizes(struct radeon_
 		rdev->mc.real_vram_size = rdev->mc.aper_size;
 }
 
+void r100_vga_set_state(struct radeon_device *rdev, bool state)
+{
+	uint32_t temp;
+
+	temp = RREG32(RADEON_CONFIG_CNTL);
+	if (state == false) {
+		temp &= ~(1<<8);
+		temp |= (1<<9);
+	} else {
+		temp &= ~(1<<9);
+	}
+	WREG32(RADEON_CONFIG_CNTL, temp);
+}
+
 void r100_vram_info(struct radeon_device *rdev)
 {
 	r100_vram_get_type(rdev);
diff -up linux-2.6.31.noarch/drivers/gpu/drm/radeon/r600.c.da linux-2.6.31.noarch/drivers/gpu/drm/radeon/r600.c
--- linux-2.6.31.noarch/drivers/gpu/drm/radeon/r600.c.da	2009-10-08 14:20:49.000000000 +1000
+++ linux-2.6.31.noarch/drivers/gpu/drm/radeon/r600.c	2009-10-08 14:21:08.000000000 +1000
@@ -1534,6 +1534,20 @@ int r600_startup(struct radeon_device *r
 	return 0;
 }
 
+void r600_vga_set_state(struct radeon_device *rdev, bool state)
+{
+	uint32_t temp;
+
+	temp = RREG32(CONFIG_CNTL);
+	if (state == false) {
+		temp &= ~(1<<0);
+		temp |= (1<<1);
+	} else {
+		temp &= ~(1<<1);
+	}
+	WREG32(CONFIG_CNTL, temp);
+}
+
 int r600_resume(struct radeon_device *rdev)
 {
 	int r;
diff -up linux-2.6.31.noarch/drivers/gpu/drm/radeon/r600d.h.da linux-2.6.31.noarch/drivers/gpu/drm/radeon/r600d.h
--- linux-2.6.31.noarch/drivers/gpu/drm/radeon/r600d.h.da	2009-10-08 14:20:49.000000000 +1000
+++ linux-2.6.31.noarch/drivers/gpu/drm/radeon/r600d.h	2009-10-08 14:21:08.000000000 +1000
@@ -78,6 +78,7 @@
 #define CB_COLOR0_MASK                                  0x28100
 
 #define	CONFIG_MEMSIZE					0x5428
+#define CONFIG_CNTL					0x5424
 #define	CP_STAT						0x8680
 #define	CP_COHER_BASE					0x85F8
 #define	CP_DEBUG					0xC1FC
diff -up linux-2.6.31.noarch/drivers/gpu/drm/radeon/radeon_asic.h.da linux-2.6.31.noarch/drivers/gpu/drm/radeon/radeon_asic.h
--- linux-2.6.31.noarch/drivers/gpu/drm/radeon/radeon_asic.h.da	2009-10-08 14:20:49.000000000 +1000
+++ linux-2.6.31.noarch/drivers/gpu/drm/radeon/radeon_asic.h	2009-10-08 14:24:29.000000000 +1000
@@ -47,6 +47,7 @@ extern int r100_suspend(struct radeon_de
 extern int r100_resume(struct radeon_device *rdev);
 uint32_t r100_mm_rreg(struct radeon_device *rdev, uint32_t reg);
 void r100_mm_wreg(struct radeon_device *rdev, uint32_t reg, uint32_t v);
+void r100_vga_set_state(struct radeon_device *rdev, bool state);
 int r100_gpu_reset(struct radeon_device *rdev);
 u32 r100_get_vblank_counter(struct radeon_device *rdev, int crtc);
 void r100_pci_gart_tlb_flush(struct radeon_device *rdev);
@@ -78,6 +79,7 @@ static struct radeon_asic r100_asic = {
 	.fini = &r100_fini,
 	.suspend = &r100_suspend,
 	.resume = &r100_resume,
+	.vga_set_state = &r100_vga_set_state,
 	.gpu_reset = &r100_gpu_reset,
 	.gart_tlb_flush = &r100_pci_gart_tlb_flush,
 	.gart_set_page = &r100_pci_gart_set_page,
@@ -130,6 +132,7 @@ static struct radeon_asic r300_asic = {
 	.fini = &r300_fini,
 	.suspend = &r300_suspend,
 	.resume = &r300_resume,
+	.vga_set_state = &r100_vga_set_state,
 	.gpu_reset = &r300_gpu_reset,
 	.gart_tlb_flush = &r100_pci_gart_tlb_flush,
 	.gart_set_page = &r100_pci_gart_set_page,
@@ -166,6 +169,7 @@ static struct radeon_asic r420_asic = {
 	.fini = &r420_fini,
 	.suspend = &r420_suspend,
 	.resume = &r420_resume,
+	.vga_set_state = &r100_vga_set_state,
 	.gpu_reset = &r300_gpu_reset,
 	.gart_tlb_flush = &rv370_pcie_gart_tlb_flush,
 	.gart_set_page = &rv370_pcie_gart_set_page,
@@ -207,6 +211,7 @@ static struct radeon_asic rs400_asic = {
 	.fini = &rs400_fini,
 	.suspend = &rs400_suspend,
 	.resume = &rs400_resume,
+	.vga_set_state = &r100_vga_set_state,
 	.gpu_reset = &r300_gpu_reset,
 	.gart_tlb_flush = &rs400_gart_tlb_flush,
 	.gart_set_page = &rs400_gart_set_page,
@@ -252,6 +257,7 @@ static struct radeon_asic rs600_asic = {
 	.fini = &rs600_fini,
 	.suspend = &rs600_suspend,
 	.resume = &rs600_resume,
+	.vga_set_state = &r100_vga_set_state,
 	.gpu_reset = &r300_gpu_reset,
 	.gart_tlb_flush = &rs600_gart_tlb_flush,
 	.gart_set_page = &rs600_gart_set_page,
@@ -290,6 +296,7 @@ static struct radeon_asic rs690_asic = {
 	.fini = &rs690_fini,
 	.suspend = &rs690_suspend,
 	.resume = &rs690_resume,
+	.vga_set_state = &r100_vga_set_state,
 	.gpu_reset = &r300_gpu_reset,
 	.gart_tlb_flush = &rs400_gart_tlb_flush,
 	.gart_set_page = &rs400_gart_set_page,
@@ -334,6 +341,7 @@ static struct radeon_asic rv515_asic = {
 	.fini = &rv515_fini,
 	.suspend = &rv515_suspend,
 	.resume = &rv515_resume,
+	.vga_set_state = &r100_vga_set_state,
 	.gpu_reset = &rv515_gpu_reset,
 	.gart_tlb_flush = &rv370_pcie_gart_tlb_flush,
 	.gart_set_page = &rv370_pcie_gart_set_page,
@@ -369,6 +377,7 @@ static struct radeon_asic r520_asic = {
 	.fini = &rv515_fini,
 	.suspend = &rv515_suspend,
 	.resume = &r520_resume,
+	.vga_set_state = &r100_vga_set_state,
 	.gpu_reset = &rv515_gpu_reset,
 	.gart_tlb_flush = &rv370_pcie_gart_tlb_flush,
 	.gart_set_page = &rv370_pcie_gart_set_page,
@@ -400,6 +409,7 @@ int r600_init(struct radeon_device *rdev
 void r600_fini(struct radeon_device *rdev);
 int r600_suspend(struct radeon_device *rdev);
 int r600_resume(struct radeon_device *rdev);
+void r600_vga_set_state(struct radeon_device *rdev, bool state);
 int r600_wb_init(struct radeon_device *rdev);
 void r600_wb_fini(struct radeon_device *rdev);
 void r600_cp_commit(struct radeon_device *rdev);
@@ -432,6 +442,7 @@ static struct radeon_asic r600_asic = {
 	.fini = &r600_fini,
 	.suspend = &r600_suspend,
 	.resume = &r600_resume,
+	.vga_set_state = &r600_vga_set_state,
 	.cp_commit = &r600_cp_commit,
 	.gpu_reset = &r600_gpu_reset,
 	.gart_tlb_flush = &r600_pcie_gart_tlb_flush,
@@ -468,6 +479,7 @@ static struct radeon_asic rv770_asic = {
 	.fini = &rv770_fini,
 	.suspend = &rv770_suspend,
 	.resume = &rv770_resume,
+	.vga_set_state = &r600_vga_set_state,
 	.cp_commit = &r600_cp_commit,
 	.gpu_reset = &rv770_gpu_reset,
 	.gart_tlb_flush = &r600_pcie_gart_tlb_flush,
diff -up linux-2.6.31.noarch/drivers/gpu/drm/radeon/radeon_device.c.da linux-2.6.31.noarch/drivers/gpu/drm/radeon/radeon_device.c
--- linux-2.6.31.noarch/drivers/gpu/drm/radeon/radeon_device.c.da	2009-10-08 14:20:49.000000000 +1000
+++ linux-2.6.31.noarch/drivers/gpu/drm/radeon/radeon_device.c	2009-10-08 14:25:26.000000000 +1000
@@ -29,6 +29,7 @@
 #include <drm/drmP.h>
 #include <drm/drm_crtc_helper.h>
 #include <drm/radeon_drm.h>
+#include <linux/vgaarb.h>
 #include "radeon_reg.h"
 #include "radeon.h"
 #include "radeon_asic.h"
@@ -374,7 +375,18 @@ int radeon_asic_init(struct radeon_devic
 	return 0;
 }
 
+/* if we get transitioned to only one device, tak VGA back */
+static unsigned int radeon_vga_set_decode(void *cookie, bool state)
+{
+	struct radeon_device *rdev = cookie;
 
+	radeon_vga_set_state(rdev, state);
+	if (state)
+		return VGA_RSRC_LEGACY_IO | VGA_RSRC_LEGACY_MEM |
+		       VGA_RSRC_NORMAL_IO | VGA_RSRC_NORMAL_MEM;
+	else
+		return VGA_RSRC_NORMAL_IO | VGA_RSRC_NORMAL_MEM;
+}
 /*
  * Wrapper around modesetting bits.
  */
@@ -568,6 +580,12 @@ int radeon_device_init(struct radeon_dev
 	DRM_INFO("register mmio base: 0x%08X\n", (uint32_t)rdev->rmmio_base);
 	DRM_INFO("register mmio size: %u\n", (unsigned)rdev->rmmio_size);
 
+	/* if we have > 1 VGA cards, then disable the radeon VGA resources */
+	r = vga_client_register(rdev->pdev, rdev, NULL, radeon_vga_set_decode);
+	if (r) {
+		return -EINVAL;
+	}
+
 	r = radeon_init(rdev);
 	if (r)
 		return r;
@@ -597,6 +615,7 @@ void radeon_device_fini(struct radeon_de
 	rdev->shutdown = true;
 	/* Order matter so becarefull if you rearrange anythings */
 	radeon_fini(rdev);
+	vga_client_register(rdev->pdev, NULL, NULL, NULL);
 	iounmap(rdev->rmmio);
 	rdev->rmmio = NULL;
 }
diff -up linux-2.6.31.noarch/drivers/gpu/drm/radeon/radeon.h.da linux-2.6.31.noarch/drivers/gpu/drm/radeon/radeon.h
--- linux-2.6.31.noarch/drivers/gpu/drm/radeon/radeon.h.da	2009-10-08 14:20:49.000000000 +1000
+++ linux-2.6.31.noarch/drivers/gpu/drm/radeon/radeon.h	2009-10-08 14:22:15.000000000 +1000
@@ -590,6 +590,7 @@ struct radeon_asic {
 	void (*fini)(struct radeon_device *rdev);
 	int (*resume)(struct radeon_device *rdev);
 	int (*suspend)(struct radeon_device *rdev);
+	void (*vga_set_state)(struct radeon_device *rdev, bool state);
 	int (*gpu_reset)(struct radeon_device *rdev);
 	void (*gart_tlb_flush)(struct radeon_device *rdev);
 	int (*gart_set_page)(struct radeon_device *rdev, int i, uint64_t addr);
@@ -935,6 +936,7 @@ static inline void radeon_ring_write(str
 #define radeon_fini(rdev) (rdev)->asic->fini((rdev))
 #define radeon_resume(rdev) (rdev)->asic->resume((rdev))
 #define radeon_suspend(rdev) (rdev)->asic->suspend((rdev))
+#define radeon_vga_set_state(rdev, state) (rdev)->asic->vga_set_state((rdev), (state))
 #define radeon_cs_parse(p) rdev->asic->cs_parse((p))
 #define radeon_gpu_reset(rdev) (rdev)->asic->gpu_reset((rdev))
 #define radeon_gart_tlb_flush(rdev) (rdev)->asic->gart_tlb_flush((rdev))
diff -up linux-2.6.31.noarch/include/drm/drmP.h.da linux-2.6.31.noarch/include/drm/drmP.h
--- linux-2.6.31.noarch/include/drm/drmP.h.da	2009-10-08 14:20:49.000000000 +1000
+++ linux-2.6.31.noarch/include/drm/drmP.h	2009-10-08 14:21:08.000000000 +1000
@@ -810,6 +810,9 @@ struct drm_driver {
 	int (*gem_init_object) (struct drm_gem_object *obj);
 	void (*gem_free_object) (struct drm_gem_object *obj);
 
+	/* vga arb irq handler */
+	void (*vgaarb_irq)(struct drm_device *dev, bool state);
+
 	/* Driver private ops for this object */
 	struct vm_operations_struct *gem_vm_ops;
 
