diff -Nur secure_delete-3.1-old//smem.1 secure_delete-3.1/smem.1
--- secure_delete-3.1-old//smem.1	2011-07-07 20:38:39.097001163 +0300
+++ secure_delete-3.1/smem.1	2011-07-07 20:38:50.517001179 +0300
@@ -9,7 +9,7 @@
 sdmem \- secure memory wiper (secure_deletion toolkit)
 
 .SH SYNOPSIS
-.B sdmem [-f] [-l] [-l] [-v]
+.B sdmem [-f] [-l] [-l] [-m] [-v]
 
 .SH DESCRIPTION
 .I sdmem
@@ -54,6 +54,9 @@
 -l for a second time lessons the security even more: only one pass with
 0x00 is written.
 .TP
+.B \-m
+moderate security. Five passes are written.
+.TP
 .B \-v
 verbose mode
 .PP
diff -Nur secure_delete-3.1-old//smem.c secure_delete-3.1/smem.c
--- secure_delete-3.1-old//smem.c	2011-07-07 20:38:39.096001164 +0300
+++ secure_delete-3.1/smem.c	2011-07-07 20:38:50.518001174 +0300
@@ -46,6 +46,7 @@
     printf("Options:\n");
     printf("\t-f  fast (and insecure mode): no /dev/urandom.\n");
     printf("\t-l  lessens the security (use twice for total insecure mode).\n");
+    printf("\t-m  moderate security (5 writes).\n");
     printf("\t-v  is verbose mode.\n");
     printf("\nsmem does a secure overwrite of the memory (RAM), because memory contents can\n");
     printf("be recovered even after a shutdown! Default is secure mode (38 writes).\n");
@@ -117,17 +118,29 @@
         fprintf(stderr, "Warning: Not compiled with support for resetting ulimits for memory\n");
 #endif
 
-    if (mode > 1) {
+    if ((mode > 1) && (mode< 3)) {
         for (turn=0; turn<27; turn++) {
             __sdel_fill_buf(write_modes[turn], BLOCKSIZE + 2, buf);
             memcpy(buffers[turn], buf, BLOCKSIZE);
         }
     }
+    else if (mode == 3) {
+        write_modes[0][0] = 0x55;
+        write_modes[0][1] = 0xaa;
+        fread(&write_modes[0][2], 1, 1, devrandom);
+    }
 
     alarm(600); /* needed to prevent mem caching */
 
     while ( (ptr = calloc(4096, 16)) != NULL) {
-        if (mode > 0) {
+        if (mode == 3) {
+            memset(ptr, (int)write_modes[0][0], BLOCKSIZE);
+            memset(ptr, (int)write_modes[0][1], BLOCKSIZE);
+            memset(ptr, (int)write_modes[0][2], BLOCKSIZE);
+            memset(ptr, (int)write_modes[0][0], BLOCKSIZE);
+            memset(ptr, (int)write_modes[0][1], BLOCKSIZE);
+        }
+        else if (mode > 0) {
             for (turn=0; turn<=36; turn++) {
                 if ((mode == 1) && (turn > 0)) break;
                 if ((turn>=5) && (turn<=31)) {
@@ -170,7 +183,7 @@
             help();
 
     while (1) {
-        result = getopt(argc, argv, "FfLlSsVvZz");
+        result = getopt(argc, argv, "FfLlmSsVvZz");
         if (result<0) break;
         switch (result) {
             case 'F' :
@@ -179,6 +192,8 @@
             case 'L' :
             case 'l' : if (secure) secure--;
             	       break;
+            case 'm' : secure = 3;
+            	       break;
             case 'S' :
             case 's' : secure++;
                        break;
