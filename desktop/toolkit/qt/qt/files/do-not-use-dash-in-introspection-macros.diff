Index: qt-everywhere-opensource-src-4.7.0/tools/qdbus/qdbusxml2cpp/qdbusxml2cpp.cpp
===================================================================
--- qt-everywhere-opensource-src-4.7.0.orig/tools/qdbus/qdbusxml2cpp/qdbusxml2cpp.cpp
+++ qt-everywhere-opensource-src-4.7.0/tools/qdbus/qdbusxml2cpp/qdbusxml2cpp.cpp
@@ -513,16 +513,16 @@ static void writeProxy(const QString &fi
     // include guards:
     QString includeGuard;
     if (!headerName.isEmpty() && headerName != QLatin1String("-")) {
-        includeGuard = headerName.toUpper().replace(QLatin1Char('.'), QLatin1Char('_'));
+        includeGuard = headerName.toUpper().replace(QLatin1Char('.'), QLatin1Char('_')).replace(QLatin1Char('-'), QLatin1Char('_'));
         int pos = includeGuard.lastIndexOf(QLatin1Char('/'));
         if (pos != -1)
             includeGuard = includeGuard.mid(pos + 1);
     } else {
         includeGuard = QLatin1String("QDBUSXML2CPP_PROXY");
-    }
     includeGuard = QString(QLatin1String("%1_%2"))
                    .arg(includeGuard)
                    .arg(QDateTime::currentDateTime().toTime_t());
+    }
     hs << "#ifndef " << includeGuard << endl
        << "#define " << includeGuard << endl
        << endl;
@@ -819,16 +819,16 @@ static void writeAdaptor(const QString &
     // include guards:
     QString includeGuard;
     if (!headerName.isEmpty() && headerName != QLatin1String("-")) {
-        includeGuard = headerName.toUpper().replace(QLatin1Char('.'), QLatin1Char('_'));
+        includeGuard = headerName.toUpper().replace(QLatin1Char('.'), QLatin1Char('_')).replace(QLatin1Char('-'), QLatin1Char('_'));
         int pos = includeGuard.lastIndexOf(QLatin1Char('/'));
         if (pos != -1)
             includeGuard = includeGuard.mid(pos + 1);
     } else {
         includeGuard = QLatin1String("QDBUSXML2CPP_ADAPTOR");
-    }
     includeGuard = QString(QLatin1String("%1_%2"))
                    .arg(includeGuard)
                    .arg(QDateTime::currentDateTime().toTime_t());
+    }
     hs << "#ifndef " << includeGuard << endl
        << "#define " << includeGuard << endl
        << endl;
