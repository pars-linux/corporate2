diff -ur kdelibs-3.5.5.orig/kio/kio/job.cpp kdelibs-3.5.5/kio/kio/job.cpp
--- kdelibs-3.5.5.orig/kio/kio/job.cpp	2006-11-08 09:49:46.000000000 +0200
+++ kdelibs-3.5.5/kio/kio/job.cpp	2006-11-08 09:50:07.000000000 +0200
@@ -910,17 +910,21 @@
 // Slave got a redirection request
 void TransferJob::slotRedirection( const KURL &url)
 {
-     kdDebug(7007) << "TransferJob::slotRedirection(" << url << ")" << endl;
-     if (!kapp->authorizeURLAction("redirect", m_url, url))
+     // Copy url and encode in a locale-specific format
+     KURL newUrl=url;
+     newUrl.setPath(QString::fromLocal8Bit(url.path().latin1()));
+
+     kdDebug(7007) << "TransferJob::slotRedirection(" << newUrl << ")" << endl;
+     if (!kapp->authorizeURLAction("redirect", m_url, newUrl))
      {
-       kdWarning(7007) << "TransferJob: Redirection from " << m_url << " to " << url << " REJECTED!" << endl;
+       kdWarning(7007) << "TransferJob: Redirection from " << m_url << " to " << newUrl << " REJECTED!" << endl;
        return;
      }
 
     // Some websites keep redirecting to themselves where each redirection
     // acts as the stage in a state-machine. We define "endless redirections"
     // as 5 redirections to the same URL.
-    if (m_redirectionList.contains(url) > 5)
+    if (m_redirectionList.contains(newUrl) > 5)
     {
        kdDebug(7007) << "TransferJob::slotRedirection: CYCLIC REDIRECTION!" << endl;
        m_error = ERR_CYCLIC_LINK;
@@ -928,10 +932,10 @@
     }
     else
     {
-       m_redirectionURL = url; // We'll remember that when the job finishes
-       if (m_url.hasUser() && !url.hasUser() && (m_url.host().lower() == url.host().lower()))
+       m_redirectionURL = newUrl; // We'll remember that when the job finishes
+       if (m_url.hasUser() && !newUrl.hasUser() && (m_url.host().lower() == newUrl.host().lower()))
           m_redirectionURL.setUser(m_url.user()); // Preserve user
-       m_redirectionList.append(url);
+       m_redirectionList.append(newUrl);
        m_outgoingMetaData["ssl_was_in_use"] = m_incomingMetaData["ssl_in_use"];
        // Tell the user that we haven't finished yet
        emit redirection(this, m_redirectionURL);
