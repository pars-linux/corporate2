Index: openldap-2.4.23/include/ac/string.h
===================================================================
--- openldap-2.4.23.orig/include/ac/string.h
+++ openldap-2.4.23/include/ac/string.h
@@ -115,4 +115,57 @@ void *(lutil_memrchr)(const void *b, int
 #	define AC_STRERROR_R(e,b,l)		("Unknown error")
 #endif
 
+static inline int ascii_tolower (int c) {
+    if (c >= 'A' && c <= 'Z')
+        c |= 0x20;
+    return c;
+}
+
+static inline int ascii_strcasecmp(const char *s, const char *t)
+{
+    while (*s != '\0' && *t != '\0')
+    {
+        if (ascii_tolower(*s & 255) < ascii_tolower(*t & 255))
+            return (-1);
+        else if (ascii_tolower(*s & 255) > ascii_tolower(*t & 255))
+            return (1);
+
+        s++;
+        t++;
+    }
+
+    if (*s == '\0' && *t == '\0')
+        return (0);
+    else if (*s != '\0') {
+        return (1);
+    }
+    else {
+        return (-1);
+    }
+}
+
+static inline int ascii_strncasecmp(const char *s, const char *t, size_t n)
+{
+    while (*s != '\0' && *t != '\0' && n > 0)
+    {
+        if (ascii_tolower(*s & 255) < ascii_tolower(*t & 255))
+            return (-1);
+        else if (ascii_tolower(*s & 255) > ascii_tolower(*t & 255))
+            return (1);
+
+        s++;
+        t++;
+        n--;
+    }
+
+    if (n == 0)
+        return (0);
+    else if (*s == '\0' && *t == '\0')
+        return (0);
+    else if (*s != '\0')
+        return (1);
+    else
+        return (-1);
+}
+
 #endif /* _AC_STRING_H */
Index: openldap-2.4.23/servers/slapd/at.c
===================================================================
--- openldap-2.4.23.orig/servers/slapd/at.c
+++ openldap-2.4.23/servers/slapd/at.c
@@ -91,7 +91,7 @@ attr_index_cmp(
 	const struct aindexrec	*air2 = v_air2;
 	int i = air1->air_name.bv_len - air2->air_name.bv_len;
 	if (i) return i;
-	return (strcasecmp( air1->air_name.bv_val, air2->air_name.bv_val ));
+	return (ascii_strcasecmp( air1->air_name.bv_val, air2->air_name.bv_val ));
 }
 
 static int
@@ -103,7 +103,7 @@ attr_index_name_cmp(
     const struct aindexrec *air  = v_air;
 	int i = type->bv_len - air->air_name.bv_len;
 	if (i) return i;
-	return (strncasecmp( type->bv_val, air->air_name.bv_val, type->bv_len ));
+	return (ascii_strncasecmp( type->bv_val, air->air_name.bv_val, type->bv_len));
 }
 
 AttributeType *
