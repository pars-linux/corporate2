.\"     Title: polkit-auth
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: August 2007
.\"    Manual: polkit-auth
.\"    Source: PolicyKit
.\"
.TH "POLKIT\-AUTH" "1" "August 2007" "PolicyKit" "polkit-auth"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
polkit-auth - Manage authorizations
.SH "SYNOPSIS"
.HP 12
\fBpolkit\-auth\fR [\fB\-\-obtain\ \fR\fB\fIaction\fR\fR] [\fB\-\-show\-obtainable\fR] [\fB[\fB\-\-user\ \fR\fB\fIuser\fR\fR]\fR\fB\ \-\-explicit\fR] [\fB[\fB\-\-user\ \fR\fB\fIuser\fR\fR]\fR\fB\ \-\-explicit\-detail\fR] [\fB[\fB\-\-user\ \fR\fB\fIuser\fR\fR]\fR\fB\ \-\-grant\ \fR\fB\fIaction\fR\fR\ [\fB\-\-constraint\ \fR\fB\fIconstraint\fR\fR]*] [\fB[\fB\-\-user\ \fR\fB\fIuser\fR\fR]\fR\fB\ \-\-block\ \fR\fB\fIaction\fR\fR\ [\fB\-\-constraint\ \fR\fB\fIconstraint\fR\fR]*] [\fB[\fB\-\-user\ \fR\fB\fIuser\fR\fR]\fR\fB\ \-\-revoke\ \fR\fB\fIaction\fR\fR] [\fB\-\-version\fR] [\fB\-\-help\fR]
.SH "DESCRIPTION"
.PP
polkit\-auth is used to inspect, obtain, grant and revoke PolicyKit authorizations\. If invoked without any options, the authorizations of the calling process will be printed\.
.SH "OPTIONS"
.PP
\fB\-\-obtain \fR\fB\fIaction\fR\fR
.RS 4
Attempt to obtain an authorization through authentication for the given action\. This is only useful for implicit authorizations requiring authentication; e\.g\. when an appropriate stanza in the defaults section of the \.policy file for the action specifies
auth_*\.
.sp
The gained authorization will be constrained as much as possible using the constraints specified in
the section called \(lqCONSTRAINTS\(rq\. For example, on a system running SELinux, if the caller runs uses this tool to obtain an authorization from a shell in a desktop in an active session, then constraints for
\fIlocal\fR,
\fIactive\fR,
\fIexe\fR
and
\fIselinux_context\fR
will all be added\.
.sp
If an Authentication Agent (such as the one from PolicyKit\-gnome) is available in the session, it will used for authentication unless the environment variable POLKIT_AUTH_FORCE_TEXT is set\. If the environment variable POLKIT_AUTH_GRANT_TO_PID is set, the authorization will be granted to that process id instead of the invoking process (e\.g\. the shell from which polkit\-auth is launched)\.
.RE
.PP
\fB\-\-show\-obtainable\fR
.RS 4
Prints all actions that can be obtained via authentication and for which an authorization does not exist\.
.RE
.PP
\fB[\fB\-\-user\ \fR\fB\fIuser\fR\fR]\fR\fB \-\-explicit\fR
.RS 4
Show explicit authorizations\. Duplicates are not printed\. If used with the
\fB\-\-user\fR
option, the authorization
org\.freedesktop\.policykit\.read
is required\.
.RE
.PP
\fB[\fB\-\-user\ \fR\fB\fIuser\fR\fR]\fR\fB \-\-explicit\-detail\fR
.RS 4
Show detailed information about explicit authorizations\. In contrast to the
\-\-explicit, duplicates are printed as several authorizations with different scope and constraints may exist\.
.RE
.PP
\fB[\fB\-\-user\ \fR\fB\fIuser\fR\fR]\fR\fB \-\-grant \fR\fB\fIaction\fR\fR [\fB\-\-constraint\ \fR\fB\fIconstraint\fR\fR]*
.RS 4
Grant an authorization for an action\. This is different than
\-\-obtain
insofar that the
defaults
stanza of the \.policy file is not consulted\. Optionally, one or more constraints on the granted authorization can be specified, see
the section called \(lqCONSTRAINTS\(rq
for details\. The authorization needed to grant authorizations is
org\.freedesktop\.policykit\.grant\.
.RE
.PP
\fB[\fB\-\-user\ \fR\fB\fIuser\fR\fR]\fR\fB \-\-block \fR\fB\fIaction\fR\fR [\fB\-\-constraint\ \fR\fB\fIconstraint\fR\fR]*
.RS 4
Grant an negative authorization for an action\. Negative authorizations are normally used to block users that would normally be authorized due to implicit authorizations\. Optionally, one or more constraints on the granted authorization can be specified, see
the section called \(lqCONSTRAINTS\(rq
for details\. The authorization needed to grant negative authorizations is
org\.freedesktop\.policykit\.grant
if the "beneficiary" is another user\.
.RE
.PP
\fB[\fB\-\-user\ \fR\fB\fIuser\fR\fR]\fR\fB \-\-revoke \fR\fB\fIaction\fR\fR
.RS 4
Revoke all authorizations for an action\. If the user is not specified the calling user is used\. The authorization
org\.freedesktop\.policykit\.revoke
is needed to revoke authorizations from other users\.
.RE
.PP
\fB\-\-version\fR
.RS 4
Show version and exit\.
.RE
.PP
\fB\-\-help\fR
.RS 4
Show this information\.
.RE
.SH "CONSTRAINTS"
.PP
One can put one or more
\fIconstraints\fR
on an authorization\. They are used to limit where the authrorization applies\. Presently the following constraints are supported
.PP
\fB\-\-constraint local\fR
.RS 4
The caller must be in a session on a local console attached to the system\. For example processes that belong to remote XDMCP or ssh connections will fail to meet this constraint and as such the authorization with such a constraint won\'t apply\.
.RE
.PP
\fB\-\-constraint active\fR
.RS 4
The caller must be in an active session\. This is typically used with a
\fIlocal\fR
constraint to ensure that the caller is only authorized if his session is in the foreground\. This is typically used for fast user switching (multiple sessions on the same console) to prevent inactive sessions from doing privileged operations like spying (using a webcam or a sound card) on the current active session\.
.RE
.PP
\fB\-\-constraint exe:\fR\fB\fI/path/to/program\fR\fR
.RS 4
The authorization is constrained to processes for where executable path (/proc/pid/exe
on Linux) matches the given path\. See
the section called \(lqNOTES\(rq
for limitations on why this may not be secure\.
.RE
.PP
\fB\-\-constraint selinux_context:\fR\fB\fIsystem_u:object_r:some_context_t\fR\fR
.RS 4
The authorization is constrained to processes for where their SELinux security context matches the given context\.
.RE
.SH "NOTES"
.PP
Note that the executable path for a process is not necessary reliable information and as such shouldn\'t be relied on 100% to make a security decision\. In fact, this information is only trustworthy in situations where the given binary is securely locked down meaning that 1) it can\'t be
ptrace(2)\'d; 2) libc secure mode kicks in (e\.g
LD_PRELOAD
won\'t work); 3) there are no other attack vectors (e\.g\. GTK_MODULES, X11, CORBA, D\-Bus) to patch running code into the process\.
.PP
In other words: the risk of relying on constraining an authorization to a path of an executable is high\. Suppose that the program
/usr/bin/gullible
obtains an authorization via authentication for the action
org\.example\.foo\. We add a constraint to say that the gained authorization only applies to processes for whom
/proc/pid/exe
points to
/usr/bin/gullible\.
.PP
Now enter
/usr/bin/evil\. It knows that the program
/usr/bin/gullible
is not "securely locked down" (per the definition in the above paragraph)\. So
/usr/bin/evil
simply sets
LD_PRELOAD
and execs
/usr/bin/gullible
and it can now run code in a process where
/proc/pid/exe
points to
/usr/bin/gullible\. Thus, the recently gained authorization for
org\.example\.foo
applies\. Also,
/usr/bin/evil
could use a host of other attack vectors to run it\'s own code under the disguise of pretending to be
/usr/bin/gullible\.
.PP
Specifically for interpreted languages like Python and Mono it is the case that
/proc/pid/exe
always points to
/usr/bin/python
resp\.
/usr/bin/mono\. Thus, it\'s not very useful to rely on that the result for this function if you want to constrain an authorization to e\.g\.
/usr/bin/tomboy
or
/usr/bin/banshee\.
.PP
It is however possible to write programs that are "securely locked down" (per the definition in the above paragraph); for example all properly written
setuid
and
setgid
programs are written in this way\.
.SH "COMPLETION"
.PP
PolicyKit ships with a collection of shell functions such that completion on users, actions and constraints work when using the
\fBbash\fR(1)
shell\. For completion to properly work for polkit\-auth, arguments should be entered in the order specified in this manual page; for example\.
\fB\-\-user\fR
should be specified before
\fB\-\-revoke\fR
to complete only on the authorizations the given user has\. Note that if the calling user lacks the
org\.freedesktop\.policykit\.read
authorization, the completion function will fall back to completing on all registered actions\.
.SH "BUGS"
.PP
Please send bug reports to either the distribution or the hal mailing list, see
\fI\%http://lists.freedesktop.org/mailman/listinfo/hal\fR\. to subscribe\.
.SH "SEE ALSO"
.PP

\fBPolicyKit\fR(8),
\fBPolicyKit.conf\fR(5),
\fBpolkit-action\fR(1)
