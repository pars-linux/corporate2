#!/bin/sh
#
# Simple init script that should handle both
# livecd/livedisk, thinclient and hdd boot
#

PATH=/usr/sbin:/usr/bin:/sbin:/bin
INITRAMFSCONF="/etc/initramfs.conf"

ROOT_LINKS="bin sbin lib boot usr opt"
ROOT_TREES="etc root home var"
TMPFS_DIRS="dev mnt mnt/cdrom mnt/livecd mnt/thin tmp sys proc media"
LOOPBACKFILE="pardus.img"

NORESUME=0
LIVE=0
NFSROOT=0
QUIET=0
RAID=0
VIRTIO=0
COPYTORAM=0

FS_TYPE=""
ROOT_FLAGS=""
ROOT_DEVICE=""
ROOT_TARGET=""
RESUME_DEVICE=""
MNTDIR=""

info() {
    echo "<6>initramfs: $1" > /dev/kmsg
}

fall2sh() {
    echo "--> $*"
    /bin/sh
}

probe_devices() {
    info "Calling coolplug to probe devices"
    /bin/coolplug 1> /dev/null 2>&1
}

probe_raid() {
    info "Probing RAID devices"
    modprobe -qa dm-mod raid0 raid1 raid10 raid456
    if [ -x /sbin/mdadm ]
    then
        /sbin/mdadm --examine --scan > /etc/mdadm.conf
        /sbin/mdadm -As
    fi
}

probe_virtio() {
    info "Probing Virtio devices"
    modprobe -qa virtio_pci virtio_balloon virtio_blk virtio_net
}

mount_rootfs() {
    FS_TYPE=`disktype $ROOT_DEVICE | grep KERNELMODULE | awk '{print $2}'`
    mount -r -t $FS_TYPE -n ${ROOT_FLAGS} ${ROOT_DEVICE} /newroot
}

resume_from_hibernate() {
    if [ -f "/sys/power/resume" ]
    then
        if [ -f "/bin/resume" ]
        then
            info "Resuming from hibernation"
            # char device needed by static resume binary
            /bin/mknod /dev/snapshot c 10 231
            /bin/resume
        fi
    fi
}

parse_cmdline() {
    for x in `cat /proc/cmdline`; do
        case "${x}" in
            [0123456Ss])
                LEVEL=${x}
            ;;
            mudur=*)
                for m in `echo ${x}|cut -f2 -d=|sed 's/,/ /g'`; do
                    case "${m}" in
                        livecd)
                            LIVE=1
                        ;;
                        livedisk)
                            LIVE=1
                        ;;
                        raid)
                            RAID=1
                        ;;
                        thin)
                            NFSROOT=1
                        ;;
                        virtio)
                            VIRTIO=1
                        ;;
                    esac
                done
            ;;
            root=*)
                ROOT_TARGET=`echo ${x}|cut -f2- -d=`
            ;;
            rootflags=*)
                ROOT_FLAGS="-o ${x#rootflags=}"
            ;;
            liveroot=*)
                LIVE=1
                LIVEROOT=$(echo $inputline|cut -f2- -d=)
            ;;
            resume=*)
                RESUME_DEVICE="${x#resume=}"
            ;;
            noresume)
                NORESUME=1
            ;;
            init=*)
                INIT="${x#init=}"
            ;;
            copytoram)
                COPYTORAM=1
            ;;
            quiet)
                QUIET=1
            ;;
        esac
    done
}

find_live_mount() {
    if [ "$#" -gt "0" ]
    then
        for x in $*
        do
            mount -r ${x} /newroot/mnt/cdrom > /dev/null 2>&1

            if [ "$?" = "0" ]
            then
                # Check for cdroot image
                if [ -e /newroot/mnt/cdrom/${LOOPBACKFILE} ]
                then
                    ROOT_DEVICE="${x}"
                    if [ "$COPYTORAM" == "1" ]
                    then
                        info "Copying Live Media files to RAM"
                        mkdir /newroot/mnt/cdromtemp
                        cp -af /newroot/mnt/cdrom/* /newroot/mnt/cdromtemp/
                        umount /newroot/mnt/cdrom
                        rmdir /newroot/mnt/cdrom
                        mv /newroot/mnt/cdromtemp /newroot/mnt/cdrom
                    fi
                    break
                else
                    umount /newroot/mnt/cdrom
                fi
            fi
        done
    fi
}

manage_tmpfs() {
    mount -t tmpfs tmpfs /newroot

    for d in ${TMPFS_DIRS}
    do
        mkdir -p "/newroot/${d}"
    done

    mv /dev/* /newroot/dev/

    # coolplug may continue making nodes
    mount -o bind /newroot/dev /dev

    # just to make sure, may not be necessary
    [ ! -e /newroot/dev/console ] && mknod /newroot/dev/console c 5 1
}

run_dhcpc() {
    udhcpc -C -i eth0 -s /etc/udhcpc.script
}

mount_nfs() {
    cd /newroot

    # FIXME: busybox mount does not load automatically
    modprobe nfs

    # mount nfs
    if [ -z "/etc/udhcpc.info" ]
    then
        fall2sh "/etc/udhcpc.info not found"
    fi

    . /etc/udhcpc.info

    if [ -z "${ROOTPATH}" ]
    then
        fall2sh "NFS rootpath not found"
    fi

    echo "Mounting NFS from $ROOTPATH"
    mount -o tcp,nolock,ro $ROOTPATH /newroot/mnt/thin

    if [ "$?" != '0' ]
    then
        fall2sh "Could not nfs root"
    fi

    FS_LOCATION='mnt/thin'

    for x in ${ROOT_LINKS}
    do
        ln -s "${FS_LOCATION}/${x}" "${x}"
    done

    chmod 1777 tmp
    (cd /newroot/${FS_LOCATION}; cp -a ${ROOT_TREES} /newroot)

    # Needed for ltspfs mechanism
    echo "$IP    $HOSTNAME" >> /newroot/etc/hosts
}

mount_cdroot() {

    # These are not loaded automatically
    modprobe squashfs

    cd /newroot
    # Loop type squashfs
    mount -t squashfs -o loop,ro /newroot/mnt/cdrom/${LOOPBACKFILE} /newroot/mnt/livecd

    if [ "$?" != "0" ]
    then
        fall2sh "Could not mount root image"
    fi
    FS_LOCATION="mnt/livecd"
    umount /dev

    for x in ${ROOT_LINKS}
    do
        ln -s "${FS_LOCATION}/${x}" "${x}"
    done

    chmod 1777 tmp
    (cd /newroot/${FS_LOCATION}; cp -a ${ROOT_TREES} /newroot)

    # FIXME: the device list is taken from udev, we can't rely on sys entries since pluggable means different
    #        in kernel world. Suggestions that do not include this kind of regexp mania are welcome

    # for userspace applications
    REAL_ROOT_TYPE=`echo "${ROOT_DEVICE}" | sed -e 's/^\/newroot\/dev\///' | grep -qE '^sr[0-9]*|^hd[a-z]|^pcd[0-9]|^xvd*' && echo "optical" || echo "harddisk"`
    echo "${REAL_ROOT_TYPE}" > /newroot/var/run/pardus/livemedia

    # this is needed for yali
    MNTDIR=`grep \/mnt\/cdrom\  /proc/mounts|sed 's/\/newroot//g'`
    echo "$MNTDIR" >> /newroot/etc/fstab
}

# ----- main -------

info "Starting init on initramfs"

mount -n -t proc proc /proc > /dev/null 2>&1
mount -n -t sysfs sys /sys > /dev/null 2>&1

# FIXME: maybe we should just source the file instead of parsing
#        also consider merging conf parser and cmdline parser
parse_config() {
    while read inputline;
    do
        case "${inputline}" in
            raid=*)
                RAID=$(echo $inputline|cut -f2- -d=)
            ;;
            thin=*)
                NFSROOT=$(echo $inputline|cut -f2- -d=)
            ;;
            virtio=*)
                VIRTIO=$(echo $inputline|cut -f2- -d=)
            ;;
            root=*)
                ROOT_TARGET=$(echo $inputline|cut -f2- -d=)
            ;;
            rootflags=*)
                ROOT_FLAGS=$(echo $inputline|cut -f2- -d=)
            ;;
            liveroot=*)
                LIVE=1
                LIVEROOT=$(echo $inputline|cut -f2- -d=)
            ;;
            resume=*)
                RESUME_DEVICE="${x#resume=}"
            ;;
            noresume=*)
                NORESUME=$(echo $inputline|cut -f2- -d=)
            ;;
            copytoram)
                COPYTORAM=1
            ;;
            init=*)
                INIT="${x#INIT=}"
            ;;
        esac
    done < $INITRAMFSCONF
}

# First parse config file, then cmdline to allow overwriting internal config
if [ -f "$INITRAMFSCONF" ]
then
    #. $INITRAMFSCONF
    parse_config
fi

# Parse command line parameters
parse_cmdline

# Handle root= parameters
if [ "${ROOT_TARGET}" == "shellnoprobe" ]
then
    fall2sh "Starting up a shell without probing, as commanded"
elif [ "${ROOT_TARGET}" == "shell" ]
then
    probe_devices
    fall2sh "Starting up a shell, as commanded"
fi

# Minimizing kernel noise
if [ "$QUIET" -eq "1" ]
then
    echo "1" > /proc/sys/kernel/printk
fi

# Probe devices
probe_devices

if [ "${RAID}" -eq "1" ]
then
    probe_raid
fi

if [ "${VIRTIO}" -eq "1" ]
then
    probe_virtio
fi

if [ "${RESUME_DEVICE}" != "" ]
then
    # Write resume device to /sys/power/resume for SATA disks
    /bin/stat -c%t:%T $RESUME_DEVICE > /sys/power/resume

    # If we suspend2disk resume it from here
    resume_from_hibernate
fi

echo 0x0100 > /proc/sys/kernel/real-root-dev

if [ "${LIVE}" -eq "1" ]
then
    ROOT_DEVICE=""
    manage_tmpfs

    # modprobe filesystems that are not in kernel, for live disks
    modprobe -qa nls_cp857 nls_utf8 vfat

    for i in `seq 50`
    do
        t=`findfs ${LIVEROOT} --no-floppy 2>/dev/null`
        find_live_mount "/newroot$t"

        if [ "${ROOT_DEVICE}" != "" ]
        then
            break
        else
            probe_devices
            usleep 200000
        fi
    done

    if [ "${ROOT_DEVICE}" == "" ]
    then
        fall2sh "Could not find mount media"
    fi

    mount_cdroot
elif [ "${NFSROOT}" -eq "1" ]
then
    run_dhcpc
    manage_tmpfs
    mount_nfs

    # set hostname for mudur
    hostname $HOSTNAME
else
    # mount real root
    info "Mounting real root"
    for i in `seq 50`
    do
        # let findfs handle all conversion
        ROOT_DEVICE=`findfs ${ROOT_TARGET} --no-floppy 2>/dev/null`

        if [ ! -b "${ROOT_DEVICE}" ]
        then
            probe_devices
            usleep 200000
        else
            break
        fi
    done
    if [ ! -b "${ROOT_DEVICE}" ]
    then
        fall2sh "Could not find boot device"
    else
        mount_rootfs
    fi
fi

[ "${INIT}" == "" ] && INIT="/sbin/init";

# Move mounts instead of umount/mount
mount --move /proc /newroot/proc
mount --move /sys /newroot/sys

# And we start
info "Switching to the real root"
exec /bin/switch_root -c /dev/console /newroot ${INIT} ${LEVEL}
