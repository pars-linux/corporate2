Index: busybox-1.16.0/modutils/modutils.c
===================================================================
--- busybox-1.16.0.orig/modutils/modutils.c
+++ busybox-1.16.0/modutils/modutils.c
@@ -111,6 +111,48 @@ void* FAST_FUNC try_to_mmap_module(const
 }
 #endif
 
+char * FAST_FUNC parse_kcmdline_module_options(char *modulename)
+{
+	char *kcmdline_buf;
+	char *options;
+	char *token, *sep, *modname, *modoption;
+	int len;
+
+	/* defined in arch/<architecture>/include/asm/setup.h
+	 * maximum is 2048 for IA64 and SPARC */
+	kcmdline_buf = xmalloc(2048);
+
+	len = open_read_close("/proc/cmdline", kcmdline_buf, 2047);
+	if (len < 0)
+		return NULL;
+
+	/* Read was succesful */
+	kcmdline_buf[len] = '\0';
+
+	/* Initial allocation */
+	options = xzalloc(1);
+	len = 0;
+
+	while ((token = strsep(&kcmdline_buf, "\n\t ")) != NULL) {
+		if ((sep = strchr(token, '.')) && strchr(sep, '=')) {
+			modname = token;
+			*sep = '\0';
+			modoption = ++sep;
+			if (!strcmp(modulename, modname)) {
+				/* Found parameters for the relevant module */
+				options = xrealloc(options, len + strlen(modoption) + 2);
+				len += sprintf(options + len, "%s ", modoption);
+			}
+		}
+	}
+	free(kcmdline_buf);
+
+	/* Strip last space */
+	if (len > 0)
+	    options[len-1] = '\0';
+	return options;
+}
+
 /* Return:
  * 0 on success,
  * -errno on open/read error,
Index: busybox-1.16.0/modutils/modutils.h
===================================================================
--- busybox-1.16.0.orig/modutils/modutils.h
+++ busybox-1.16.0/modutils/modutils.h
@@ -22,6 +22,7 @@ char *replace_underscores(char *s) FAST_
 int string_to_llist(char *string, llist_t **llist, const char *delim) FAST_FUNC;
 char *filename2modname(const char *filename, char *modname) FAST_FUNC;
 char *parse_cmdline_module_options(char **argv) FAST_FUNC;
+char *parse_kcmdline_module_options(char *modulename) FAST_FUNC;
 
 #define INSMOD_OPTS \
 	"vq" \
Index: busybox-1.16.0/modutils/modprobe.c
===================================================================
--- busybox-1.16.0.orig/modutils/modprobe.c
+++ busybox-1.16.0/modutils/modprobe.c
@@ -288,6 +288,7 @@ static int do_modprobe(struct module_ent
 
 		options = m2->options;
 		m2->options = NULL;
+		options = gather_options_str(options, parse_kcmdline_module_options(m2->modname));
 		if (m == m2)
 			options = gather_options_str(options, G.cmdline_mopts);
 		rc = bb_init_module(fn, options);
