
 (oe) backported from:
 https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2010-3492
 http://bugs.python.org/issue6706
 http://svn.python.org/view?view=rev&revision=85220

 See http://bugs.pardus.org.tr/show_bug.cgi?id=14993
 Taken from Mandriva python package and adopted to Pardus 2009
 and corporate2 python2.6 packages.
 
Index: Python-2.6.5/Lib/asyncore.py
===================================================================
--- Python-2.6.5.orig/Lib/asyncore.py
+++ Python-2.6.5/Lib/asyncore.py
@@ -340,12 +340,15 @@ class dispatcher:
         # XXX can return either an address pair or None
         try:
             conn, addr = self.socket.accept()
-            return conn, addr
+        except TypeError:
+            return None
         except socket.error, why:
-            if why.args[0] == EWOULDBLOCK:
-                pass
+            if why.args[0] in (EWOULDBLOCK, ECONNABORTED):
+                return None
             else:
                 raise
+        else:
+            return conn, addr
 
     def send(self, data):
         try:
@@ -482,7 +485,13 @@ class dispatcher:
         self.log_info('unhandled connect event', 'warning')
 
     def handle_accept(self):
-        self.log_info('unhandled accept event', 'warning')
+        pair = self.accept()
+        if pair is not None:
+            self.handle_accepted(*pair)
+
+    def handle_accepted(self, sock, addr):
+        sock.close()
+        self.log_info('unhandled accepted event', 'warning')
 
     def handle_close(self):
         self.log_info('unhandled close event', 'warning')
Index: Python-2.6.5/Lib/smtpd.py
===================================================================
--- Python-2.6.5.orig/Lib/smtpd.py
+++ Python-2.6.5/Lib/smtpd.py
@@ -292,21 +292,7 @@ class SMTPServer(asyncore.dispatcher):
             self.__class__.__name__, time.ctime(time.time()),
             localaddr, remoteaddr)
 
-    def handle_accept(self):
-        try:
-            conn, addr = self.accept()
-        except TypeError:
-            # sometimes accept() might return None
-            return
-        except socket.error as err:
-            # ECONNABORTED might be thrown
-            if err.args[0] != errno.ECONNABORTED:
-                raise
-            return
-        else:
-            # sometimes addr == None instead of (ip, port)
-            if addr == None:
-                return
+    def handle_accepted(self, conn, addr):
         print >> DEBUGSTREAM, 'Incoming connection from %s' % repr(addr)
         channel = SMTPChannel(self, conn, addr)
 
Index: Python-2.6.5/Lib/test/test_asyncore.py
===================================================================
--- Python-2.6.5.orig/Lib/test/test_asyncore.py
+++ Python-2.6.5/Lib/test/test_asyncore.py
@@ -289,7 +289,6 @@ class DispatcherTests(unittest.TestCase)
             d.handle_read()
             d.handle_write()
             d.handle_connect()
-            d.handle_accept()
         finally:
             sys.stdout = stdout
 
@@ -297,8 +296,7 @@ class DispatcherTests(unittest.TestCase)
         expected = ['warning: unhandled incoming priority event',
                     'warning: unhandled read event',
                     'warning: unhandled write event',
-                    'warning: unhandled connect event',
-                    'warning: unhandled accept event']
+                    'warning: unhandled connect event']
         self.assertEquals(lines, expected)
 
 
@@ -307,6 +305,9 @@ class dispatcherwithsend_noread(asyncore
     def readable(self):
         return False
 
+    def handle_accepted(self):
+        raise Exception("handle_accepted not supposed to be called")
+
     def handle_connect(self):
         pass
 
Index: Python-2.6.5/Lib/test/test_ftplib.py
===================================================================
--- Python-2.6.5.orig/Lib/test/test_ftplib.py
+++ Python-2.6.5/Lib/test/test_ftplib.py
@@ -209,8 +209,7 @@ class DummyFTPServer(asyncore.dispatcher
         self.active = False
         self.join()
 
-    def handle_accept(self):
-        conn, addr = self.accept()
+    def handle_accepted(self, conn, addr):
         self.handler = self.handler(conn)
         self.close()
 
Index: Python-2.6.5/Lib/test/test_smtplib.py
===================================================================
--- Python-2.6.5.orig/Lib/test/test_smtplib.py
+++ Python-2.6.5/Lib/test/test_smtplib.py
@@ -352,8 +352,7 @@ class SimSMTPServer(smtpd.SMTPServer):
         self._extra_features = []
         smtpd.SMTPServer.__init__(self, *args, **kw)
 
-    def handle_accept(self):
-        conn, addr = self.accept()
+    def handle_accepted(self, conn, addr):
         self._SMTPchannel = SimSMTPChannel(self._extra_features,
                                            self, conn, addr)
 
Index: Python-2.6.5/Lib/test/test_ssl.py
===================================================================
--- Python-2.6.5.orig/Lib/test/test_ssl.py
+++ Python-2.6.5/Lib/test/test_ssl.py
@@ -422,8 +422,7 @@ else:
                 self.port = test_support.bind_port(self.socket)
                 self.listen(5)
 
-            def handle_accept(self):
-                sock_obj, addr = self.accept()
+            def handle_accepted(self, sock_obj, addr):
                 if test_support.verbose:
                     sys.stdout.write(" server:  new connection from %s:%s\n" %addr)
                 self.ConnectionHandler(sock_obj, self.certfile)
