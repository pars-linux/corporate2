Index: bin/mudur.py
===================================================================
--- bin/mudur.py	(revision 31812)
+++ bin/mudur.py	(revision 31810)
@@ -1332,7 +1332,10 @@
         # time of the relevant files
         if mdirtime("/etc/env.d") > mtime("/etc/profile.env"):
             ui.info(_("Updating environment variables"))
-            run("/sbin/update-environment")
+            if config.get("live"):
+                run("/sbin/update-environment", "--live")
+            else:
+                run("/sbin/update-environment")
 
         # Cleanup /tmp
         cleanup_tmp()
Index: bin/update-environment.py
===================================================================
--- bin/update-environment.py	(revision 31812)
+++ bin/update-environment.py	(revision 31810)
@@ -2,7 +2,7 @@
 # -*- coding: utf-8 -*-
 #
 # A script to update the environment
-# Copyright (C) 2006-2010 TUBITAK/UEKAE
+# Copyright (C) 2006-2009 TUBITAK/UEKAE
 #
 # This program is free software; you can redistribute it and/or modify it
 # under the terms of the GNU General Public License as published by the
@@ -10,8 +10,9 @@
 # option) any later version. Please read the COPYING file.
 #
 
+import sys
 import os
-import sys
+import subprocess
 import getopt
 
 header = "### This file is automatically generated by update-environment"
@@ -33,6 +34,7 @@
     "KDEDIRS",
     "PATH",
     "CLASSPATH",
+    "LDPATH",
     "MANPATH",
     "INFOPATH",
     "ROOTPATH",
@@ -94,33 +96,44 @@
     keys = envdict.keys()
     keys.sort()
     for key in keys:
-        tmp = envdict[key]
-        if isinstance(tmp, list):
-            tmp = ":".join(tmp)
-        profile += format % (key, tmp)
+        if key != "LDPATH":
+            tmp = envdict[key]
+            if isinstance(tmp, list):
+                tmp = ":".join(tmp)
+            profile += format % (key, tmp)
     return header + header_note + profile
 
+def generate_ld_so_conf(envdict):
+    ldpaths = envdict["LDPATH"]
+    tmp = "\n".join(ldpaths)
+    return tmp + "\n"
+
 def update_file(path, content):
     f = file(path, "w")
     f.write(content)
     f.close()
 
-def update_environment(prefix):
+def update_environment(prefix, live=False):
     join = os.path.join
 
     env = read_env_d(join(prefix, "etc/env.d"))
     update_file(join(prefix, "etc/profile.env"), generate_profile_env(env))
     update_file(join(prefix, "etc/csh.env"), generate_profile_env(env, 'setenv %s %s\n'))
+    if not live:
+        if env.has_key("LDPATH"):
+            update_file(join(prefix, "etc/ld.so.conf"), generate_ld_so_conf(env))
+            subprocess.call(["/sbin/ldconfig","-X","-r", prefix])
 
 #
 # Command line driver
 #
 
 def usage():
-    print "update-environment [--destdir <prefix>]"
+    print "update-environment [--destdir <prefix>] [--live]"
 
 def main(argv):
     prefix = "/"
+    live = False
 
     try:
         opts, args = getopt.gnu_getopt(argv, "h", [ "help", "destdir=", "live" ])
@@ -133,8 +146,10 @@
             sys.exit(0)
         if o in ("--destdir"):
             prefix = a
+        if o in ("--live"):
+            live = True
 
-    update_environment(prefix)
+    update_environment(prefix, live)
 
 if __name__ == "__main__":
     main(sys.argv[1:])
