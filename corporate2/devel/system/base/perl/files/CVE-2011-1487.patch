Index: perl-5.10.1/pp.c
===================================================================
--- perl-5.10.1.orig/pp.c
+++ perl-5.10.1/pp.c
@@ -3616,6 +3616,8 @@ PP(pp_ucfirst)
 	    SvCUR_set(dest, need - 1);
 	}
     }
+    if (dest != source && SvTAINTED(source))
+        SvTAINT(dest);
     SvSETMAGIC(dest);
     RETURN;
 }
@@ -3666,7 +3668,8 @@ PP(pp_uc)
 	SvUPGRADE(dest, SVt_PV);
 	d = (U8*)SvGROW(dest, min);
 	(void)SvPOK_only(dest);
-
+	if (dest != source && SvTAINTED(source))
+	    SvTAINT(dest);
 	SETs(dest);
     }
 
@@ -3835,6 +3838,8 @@ PP(pp_lc)
 	    SvCUR_set(dest, d - (U8*)SvPVX_const(dest));
 	}
     }
+    if (dest != source && SvTAINTED(source))
+        SvTAINT(dest);
     SvSETMAGIC(dest);
     RETURN;
 }
Index: perl-5.10.1/t/op/taint.t
===================================================================
--- perl-5.10.1.orig/t/op/taint.t
+++ perl-5.10.1/t/op/taint.t
@@ -17,7 +17,7 @@ use Config;
 use File::Spec::Functions;
 
 BEGIN { require './test.pl'; }
-plan tests => 301;
+plan tests => 306;
 
 $| = 1;
 
@@ -909,6 +909,18 @@ SKIP: {
     test @untainted == 0, "untainted:\n @untainted";
 }
 
+{
+    # [perl #87336] lc/uc(first) failing to taint the returned string
+    my $source = "foo$TAINT";
+    my $dest = lc $source;
+    test $dest, "lc(tainted) taints its return value";
+    $dest = lcfirst $source;
+    test $dest, "lcfirst(tainted) taints its return value";
+    $dest = uc $source;
+    test $dest, "uc(tainted) taints its return value";
+    $dest = ucfirst $source;
+    test $dest, "ucfirst(tainted) taints its return value";
+}
 
 ok( ${^TAINT} == 1, '$^TAINT is on' );
 
