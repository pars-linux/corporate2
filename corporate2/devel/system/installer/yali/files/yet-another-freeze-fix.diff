diff --git a/yali/gui/ScrInstall.py b/yali/gui/ScrInstall.py
index 6df4666..95b1a70 100644
--- a/yali/gui/ScrInstall.py
+++ b/yali/gui/ScrInstall.py
@@ -10,10 +10,12 @@
 # Please read the COPYING file.
 #
 import os
+from multiprocessing import Process, Queue
+from Queue import Empty
 import gettext
 _ = gettext.translation('yali', fallback=True).ugettext
 
-from PyQt4.Qt import QWidget, SIGNAL, QPixmap, QCoreApplication, QEvent, QThread, QObject, QTimer, QApplication, QMutex, QWaitCondition
+from PyQt4.Qt import QWidget, SIGNAL, QPixmap, QObject, QTimer, QMutex, QWaitCondition
 
 import pisi.ui
 
@@ -26,11 +28,9 @@ from yali.gui.Ui.installwidget import Ui_InstallWidget
 from yali.gui.YaliDialog import EjectAndRetryDialog
 
 from yali.gui.Ui.installprogress import Ui_InstallProgress
-from pds.gui import *
+from pds.gui import PAbstractBox, BOTCENTER
 
-EventPisi, EventSetProgress, EventError, EventAllFinished, EventPackageInstallFinished, EventRetry = range(1001, 1007)
-
-current_object = None
+EventConfigure, EventInstall, EventSetProgress, EventError, EventAllFinished, EventPackageInstallFinished, EventRetry = range(1001, 1008)
 
 class InstallProgressWidget(PAbstractBox):
 
@@ -81,10 +81,6 @@ def iter_slideshows():
         for slideshow in slideshows:
             yield slideshow
 
-def object_sender(pack):
-    global current_object
-    QCoreApplication.postEvent(current_object, pack)
-
 class Widget(QWidget, ScreenWidget):
     name = "packageInstallation"
 
@@ -98,6 +94,9 @@ class Widget(QWidget, ScreenWidget):
         self.timer = QTimer(self)
         QObject.connect(self.timer, SIGNAL("timeout()"), self.changeSlideshows)
 
+        self.poll_timer = QTimer(self)
+        QObject.connect(self.poll_timer, SIGNAL("timeout()"), self.checkQueueEvent)
+
         if ctx.consts.lang == "tr":
             self.installProgress.ui.progress.setFormat("%%p")
 
@@ -111,8 +110,10 @@ class Widget(QWidget, ScreenWidget):
         self.has_errors = False
 
         # mutual exclusion
-        self.mutex = QMutex()
-        self.wait_condition = QWaitCondition()
+        self.mutex = None
+        self.wait_condition = None
+        self.queue = None
+
         self.retry_answer = False
         self.pkg_configurator = None
         self.pkg_installer = None
@@ -122,16 +123,18 @@ class Widget(QWidget, ScreenWidget):
         ctx.mainScreen.dontAskCmbAgain = True
         ctx.mainScreen.theme_shortcut.setEnabled(False)
 
-        # Thread object
-        global current_object
-        current_object = self
-
         # start installer thread
         ctx.logger.debug("PkgInstaller is creating...")
-        self.pkg_installer = PkgInstaller()
+        self.mutex = QMutex()
+        self.wait_condition = QWaitCondition()
+        self.queue = Queue()
+        self.pkg_installer = PkgInstaller(self.queue, self.mutex, self.wait_condition, self.retry_answer)
+
+        self.poll_timer.start(500)
+
+        # start installer polling
         ctx.logger.debug("Calling PkgInstaller.start...")
         self.pkg_installer.start()
-        #ctx.interface.informationWindow.update(_("Installing packages..."))
 
         ctx.mainScreen.disableNext()
         ctx.mainScreen.disableBack()
@@ -141,53 +144,66 @@ class Widget(QWidget, ScreenWidget):
 
         self.installProgress.showInstallProgress()
 
-    def customEvent(self, qevent):
+    def checkQueueEvent(self):
 
-        # EventPisi
-        if qevent.eventType() == EventPisi:
-            package, event = qevent.data()
+        while True:
+            try:
+                data = self.queue.get_nowait()
+                event = data[0]
+            except Empty, msg:
+                return
 
-            if event == pisi.ui.installing:
-                self.installProgress.ui.info.setText(_("Installing <b>%(name)s</b><br>%(summary)s") % {"name":package.name,
+            ctx.logger.debug("checkQueueEvent: Processing %s event..." % event)
+            # EventInstall
+            if event == EventInstall:
+                package = data[1]
+                self.installProgress.ui.info.setText(_("Installing <b>%(name)s</b> -- %(summary)s") % {"name":package.name,
                                                                                        "summary":package.summary})
                 ctx.logger.debug("Pisi: %s installing" % package.name)
                 self.cur += 1
                 self.installProgress.ui.progress.setValue(self.cur)
-            elif event == pisi.ui.configuring:
-                self.installProgres.ui.info.setText(_("Configuring <b>%s</b>") % package.name)
+
+            # EventConfigure
+            elif event == EventConfigure:
+                package = data[1]
+                self.installProgress.ui.info.setText(_("Configuring <b>%s</b>") % package.name)
                 ctx.logger.debug("Pisi: %s configuring" % package.name)
                 self.cur += 1
                 self.installProgress.ui.progress.setValue(self.cur)
 
-        # EventSetProgress
-        elif qevent.eventType() == EventSetProgress:
-            total = qevent.data()
-            self.installProgress.ui.progress.setMaximum(total)
-
-        # EventPackageInstallFinished
-        elif qevent.eventType() == EventPackageInstallFinished:
-            self.packageInstallFinished()
-
-        # EventError
-        elif qevent.eventType() == EventError:
-            err = qevent.data()
-            self.installError(err)
-
-        # EventRetry
-        elif qevent.eventType() == EventRetry:
-            msg = qevent.data()
-            self.timer.stop()
-            self.retry_answer = EjectAndRetryDialog(_("Warning"),
-                    _("Following error occured while installing packages:\n"
-                      "<b>%s</b>") % msg, _("Do you want to retry?"))
-
-            self.timer.start(1000 * 30)
-            self.wait_condition.wakeAll()
-
-        # EventAllFinished
-        elif qevent.eventType() == EventAllFinished:
-            ctx.logger.debug("EventAllFinished catched")
-            self.finished()
+            # EventSetProgress
+            elif event == EventSetProgress:
+                total = data[1]
+                self.installProgress.ui.progress.setMaximum(total)
+
+            # EventPackageInstallFinished
+            elif event == EventPackageInstallFinished:
+                print "***EventPackageInstallFinished called...."
+                self.packageInstallFinished()
+
+            # EventError
+            elif event == EventError:
+                err = data[1]
+                self.installError(err)
+
+            # EventRetry
+            elif event == EventRetry:
+                msg = data[1]
+                self.timer.stop()
+                self.poll_timer.stop()
+                self.retry_answer = EjectAndRetryDialog(_("Warning"),
+                                                        _("Following error occured while "
+                                                          "installing packages:\n"
+                                                          "<b>%s</b>") % msg,
+                                                        _("Do you want to retry?"))
+
+                self.timer.start(1000 * 30)
+                self.poll_timer.start(500)
+                self.wait_condition.wakeAll()
+
+            # EventAllFinished
+            elif event == EventAllFinished:
+                self.finished()
 
     def changeSlideshows(self):
         slide = self.iter_slideshows.next()
@@ -203,8 +219,6 @@ class Widget(QWidget, ScreenWidget):
 
         # Configure Pending...
         # run baselayout's postinstall first
-
-        #ctx.interface.informationWindow.update(_("Creating base layout..."))
         yali.postinstall.initbaselayout()
 
         # postscripts depend on 03locale...
@@ -216,44 +230,45 @@ class Widget(QWidget, ScreenWidget):
         # run dbus in chroot
         yali.util.start_dbus()
 
-        #ctx.interface.informationWindow.update(_("Configuring packages..."))
-
         # start configurator thread
-        self.pkg_configurator = PkgConfigurator()
+        self.pkg_configurator = PkgConfigurator(self.queue, self.mutex)
         self.pkg_configurator.start()
 
     def execute(self):
         # stop slide show
         self.timer.stop()
+        self.poll_timer.stop()
         return True
 
     def finished(self):
+        self.poll_timer.stop()
+
         if self.has_errors:
             return
-        #ctx.interface.informationWindow.hide()
-        # trigger next screen. will activate execute()
+
         ctx.mainScreen.slotNext()
 
     def installError(self, error):
         self.has_errors = True
         errorstr = _("""An error occured during the installation of packages.
-
-This may be caused by a corrupted installation medium.
-
-Error:
+This may be caused by a corrupted installation medium error:
 %s
 """) % str(error)
-        ctx.interface.exceptionWindow(1, errorstr)
+        ctx.interface.exceptionWindow(error, errorstr)
 
-class PkgInstaller(QThread):
+class PkgInstaller(Process):
 
-    def __init__(self):
+    def __init__(self, queue, mutex, wait_condition, retry_answer):
+        Process.__init__(self)
+        self.queue = queue
+        self.mutex = mutex
+        self.wait_condition = wait_condition
+        self.retry_answer = retry_answer
         ctx.logger.debug("PkgInstaller started.")
-        QThread.__init__(self)
 
     def run(self):
         ctx.logger.debug("PkgInstaller is running.")
-        ui = PisiUI()
+        ui = PisiUI(self.queue)
         ctx.logger.debug("PisiUI is creating..")
         yali.pisiiface.initialize(ui)
         ctx.logger.debug("Pisi initialize is calling..")
@@ -283,29 +298,22 @@ class PkgInstaller(QThread):
 
         # show progress
         total = len(order)
-        ctx.logger.debug("Creating PisiEvent..")
-        qevent = PisiEvent(QEvent.User, EventSetProgress)
-        ctx.logger.debug("Setting data on just created PisiEvent (EventSetProgress)..")
-        qevent.setData(total * 2)
-        ctx.logger.debug("Posting PisiEvent to the widget..")
-        object_sender(qevent)
+        ctx.logger.debug("Sending EventSetProgress")
+        data = [EventSetProgress, total*2]
+        self.queue.put_nowait(data)
         ctx.logger.debug("Found %d packages in repo.." % total)
         try:
             while True:
                 try:
                     yali.pisiiface.install(order)
                     break # while
-
                 except Exception, msg:
                     # Lock the mutex
                     self.mutex.lock()
 
-                    # Send event for asking retry
-                    qevent = PisiEvent(QEvent.User, EventRetry)
-
                     # Send error message
-                    qevent.setData(str(msg))
-                    object_sender(qevent)
+                    data = [EventRetry, str(msg)]
+                    self.queue.put_nowait(data)
 
                     # wait for the result
                     self.wait_condition.wait(self.mutex)
@@ -315,28 +323,27 @@ class PkgInstaller(QThread):
                         raise msg
 
         except Exception, msg:
-            # User+10: error
-            qevent = PisiEvent(QEvent.User, EventError)
-            qevent.setData(msg)
-            object_sender(qevent)
-
+            data = [EventError, msg]
+            self.queue.put_nowait(data)
             # wait for the result
             self.wait_condition.wait(self.mutex)
 
         ctx.logger.debug("Package install finished ...")
         # Package Install finished lets configure them
-        qevent = PisiEvent(QEvent.User, EventPackageInstallFinished)
-        object_sender(qevent)
+        data = [EventPackageInstallFinished]
+        self.queue.put_nowait(data)
 
-class PkgConfigurator(QThread):
+class PkgConfigurator(Process):
 
-    def __init__(self):
+    def __init__(self, queue, mutex):
+        Process.__init__(self)
+        self.queue = queue
+        self.mutex = mutex
         ctx.logger.debug("PkgConfigurator started.")
-        QThread.__init__(self)
 
     def run(self):
         ctx.logger.debug("PkgConfigurator is running.")
-        ui = PisiUI()
+        ui = PisiUI(self.queue)
         yali.pisiiface.initialize(ui=ui, with_comar=True)
 
         try:
@@ -344,52 +351,39 @@ class PkgConfigurator(QThread):
             ctx.logger.debug("exec : yali.pisiiface.configurePending() called")
             yali.pisiiface.configurePending()
         except Exception, msg:
-            # User+10: error
-            qevent = PisiEvent(QEvent.User, EventError)
-            qevent.setData(msg)
-            object_sender(qevent)
+            data = [EventError, msg]
+            self.queue.put_nowait(data)
 
-        # Remove cd repository and install add real
+       # Remove cd repository and install add real
         if ctx.flags.collection:
             yali.pisiiface.switchToPardusRepo(ctx.consts.dvd_repo_name)
         else:
             yali.pisiiface.switchToPardusRepo(ctx.consts.cd_repo_name)
 
-        qevent = PisiEvent(QEvent.User, EventAllFinished)
-        object_sender(qevent)
+        data = [EventAllFinished]
+        self.queue.put_nowait(data)
 
-class PisiUI(QObject, pisi.ui.UI):
+class PisiUI(pisi.ui.UI):
 
-    def __init__(self, *args):
+    def __init__(self, queue):
         pisi.ui.UI.__init__(self)
-        apply(QObject.__init__, (self,) + args)
+        self.queue = queue
         self.last_package = ''
 
     def notify(self, event, **keywords):
-        if event == pisi.ui.installing or event == pisi.ui.configuring:
-            qevent = PisiEvent(QEvent.User, EventPisi)
-            data = [keywords['package'], event]
+        if event == pisi.ui.installing:
+            ctx.logger.debug("PisiUI.notify event: Install")
+            data = [EventInstall, keywords['package']]
             self.last_package = keywords['package'].name
-            qevent.setData(data)
-            object_sender(qevent)
-        QApplication.processEvents()
-
-    def display_progress(self, operation, percent, info, **keywords):
-        pass
-
-class PisiEvent(QEvent):
-
-    def __init__(self, event_type, event):
-        QEvent.__init__(self, event_type)
-        self.event = event
-
-    def eventType(self):
-        return self.event
-
-    def setData(self, data):
-        self._data = data
-
-    def data(self):
-        return self._data
+            self.queue.put_nowait(data)
+        elif event == pisi.ui.configuring:
+            ctx.logger.debug("PisiUI.notify event: Configure")
+            data = [EventConfigure, keywords['package']]
+            self.last_package = keywords['package'].name
+            self.queue.put_nowait(data)
 
+    def error(self, msg):
+        ctx.logger.debug("PisiUI.error: %s" % unicode(msg))
 
+    def warning(self, msg):
+        ctx.logger.debug("PisiUI.warning: %s" % unicode(msg))
