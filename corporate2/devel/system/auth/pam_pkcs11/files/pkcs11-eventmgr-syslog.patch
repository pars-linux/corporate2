Index: pam_pkcs11-0.6.6/src/tools/pkcs11_eventmgr.c
===================================================================
--- pam_pkcs11-0.6.6.orig/src/tools/pkcs11_eventmgr.c
+++ pam_pkcs11-0.6.6/src/tools/pkcs11_eventmgr.c
@@ -24,6 +24,7 @@
 #include <errno.h>
 #include <signal.h>
 #include <sys/wait.h>
+#include <syslog.h>
 
 #include "config.h"
 #include "../scconf/scconf.h"
@@ -46,9 +47,9 @@ int daemon(int nochdir, int noclose);
 #define DEF_PKCS11_MODULE "/usr/lib/opensc-pkcs11.so"
 #define DEF_CONFIG_FILE CONFDIR "/pkcs11_eventmgr.conf"
 
-#define ONERROR_IGNORE	0
-#define ONERROR_RETURN	1
-#define ONERROR_QUIT	2
+#define ONERROR_IGNORE  0
+#define ONERROR_RETURN  1
+#define ONERROR_QUIT    2
 
 #define CARD_PRESENT 1
 #define CARD_NOT_PRESENT 0
@@ -77,15 +78,15 @@ typedef struct slot_st slot_t;
 
 /* The direct calls should be abstracted, for now "expose" the pkcs11_handle_t */
 struct pkcs11_handle_str {
-  void *module_handle;
-  CK_FUNCTION_LIST_PTR fl;
-  int should_finalize;
-  slot_t *slots;
-  CK_ULONG slot_count;
-  CK_SESSION_HANDLE session;
-  cert_object_t *keys;
-  int key_count;
-  int current_slot;
+    void *module_handle;
+    CK_FUNCTION_LIST_PTR fl;
+    int should_finalize;
+    slot_t *slots;
+    CK_ULONG slot_count;
+    CK_SESSION_HANDLE session;
+    cert_object_t *keys;
+    int key_count;
+    int current_slot;
 };
 
 #endif
@@ -95,7 +96,7 @@ static void thats_all_folks(void) {
     DBG("Exitting");
 #ifdef HAVE_NSS
     if (module) {
-	SECMOD_DestroyModule(module);
+    SECMOD_DestroyModule(module);
     }
     rv = NSS_Shutdown();
     if (rv != SECSuccess) {
@@ -120,8 +121,8 @@ static void thats_all_folks(void) {
 
 extern char **environ;
 static int my_system(char *command) {
-	int pid, status;
-	   if (!command) return 1;
+    int pid, status;
+       if (!command) return 1;
            pid = fork();
            if (pid == -1) return -1;
            if (pid == 0) {
@@ -141,60 +142,60 @@ static int my_system(char *command) {
 }
 
 static int execute_event (const char *action) {
-	int onerr;
-	const char *onerrorstr;
-	const scconf_list *actionlist;
-	scconf_block **blocklist, *myblock;
-	blocklist = scconf_find_blocks(ctx,root,"event",action);
+    int onerr;
+    const char *onerrorstr;
+    const scconf_list *actionlist;
+    scconf_block **blocklist, *myblock;
+    blocklist = scconf_find_blocks(ctx,root,"event",action);
         if (!blocklist) {
                 DBG("Event block list not found");
-	        return -1;
-	}
-	myblock=blocklist[0];
-	free(blocklist);
-	if (!myblock) {
-		DBG1("Event item not found: '%s'",action);
-		return -1;
-	}
-	onerrorstr = scconf_get_str(myblock,"on_error","ignore");
-	if(!strcmp(onerrorstr,"ignore")) onerr = ONERROR_IGNORE;
-	else if(!strcmp(onerrorstr,"return")) onerr = ONERROR_RETURN;
-	else if(!strcmp(onerrorstr,"quit")) onerr = ONERROR_QUIT;
-	else {
-	    onerr = ONERROR_IGNORE;
-	    DBG1("Invalid onerror value: '%s'. Assumed 'ignore'",onerrorstr);
-	}
-	/* search actions */
-	actionlist = scconf_find_list(myblock,"action");
-	if (!actionlist) {
-	        DBG1("No action list for event '%s'",action);
-		return 0;
-	}
-	DBG1("Onerror is set to: '%s'",onerrorstr);
-	while (actionlist) {
-		int res;
-		char *action_cmd= actionlist->data;
-		DBG1("Executing action: '%s'",action_cmd);
-		/*
-		there are some security issues on using system() in
-		setuid/setgid programs. so we will use an alternate function
+            return -1;
+    }
+    myblock=blocklist[0];
+    free(blocklist);
+    if (!myblock) {
+        DBG1("Event item not found: '%s'",action);
+        return -1;
+    }
+    onerrorstr = scconf_get_str(myblock,"on_error","ignore");
+    if(!strcmp(onerrorstr,"ignore")) onerr = ONERROR_IGNORE;
+    else if(!strcmp(onerrorstr,"return")) onerr = ONERROR_RETURN;
+    else if(!strcmp(onerrorstr,"quit")) onerr = ONERROR_QUIT;
+    else {
+        onerr = ONERROR_IGNORE;
+        DBG1("Invalid onerror value: '%s'. Assumed 'ignore'",onerrorstr);
+    }
+    /* search actions */
+    actionlist = scconf_find_list(myblock,"action");
+    if (!actionlist) {
+            DBG1("No action list for event '%s'",action);
+        return 0;
+    }
+    DBG1("Onerror is set to: '%s'",onerrorstr);
+    while (actionlist) {
+        int res;
+        char *action_cmd= actionlist->data;
+        syslog(LOG_INFO, "Executing action: '%s'", action_cmd);
+        /*
+        there are some security issues on using system() in
+        setuid/setgid programs. so we will use an alternate function
                 */
-		/* res=system(action_cmd); */
-		res = my_system(action_cmd);
-		actionlist=actionlist->next;
-		/* evaluate return and take care on "onerror" value */
-		DBG2("Action '%s' returns %d",action_cmd, res);
-		if (!res) continue;
-		switch(onerr) {
-		    case ONERROR_IGNORE: continue;
-		    case ONERROR_RETURN: return 0;
-		    case ONERROR_QUIT: 	thats_all_folks();
-					exit(0);
-		    default: 		DBG("Invalid onerror value");
-			     		return -1;
-		}
-	}
-	return 0;
+        /* res=system(action_cmd); */
+        res = my_system(action_cmd);
+        actionlist=actionlist->next;
+        /* evaluate return and take care on "onerror" value */
+        syslog(LOG_INFO, "Action '%s' returns %d", action_cmd, res);
+        if (!res) continue;
+        switch(onerr) {
+            case ONERROR_IGNORE: continue;
+            case ONERROR_RETURN: return 0;
+            case ONERROR_QUIT:  thats_all_folks();
+                    exit(0);
+            default:        DBG("Invalid onerror value");
+                        return -1;
+        }
+    }
+    return 0;
 }
 
 static int parse_config_file(void) {
@@ -213,26 +214,26 @@ static int parse_config_file(void) {
            DBG1("pkcs11_eventmgr block not found in config: '%s'",cfgfile);
            return -1;
         }
-	debug = scconf_get_bool(root,"debug",debug);
-	daemonize = scconf_get_bool(root,"daemon",daemonize);
-	polling_time = scconf_get_int(root,"polling_time",polling_time);
-	expire_time = scconf_get_int(root,"expire_time",expire_time);
-	pkcs11_module = (char *) scconf_get_str(root,"pkcs11_module",pkcs11_module);
+    debug = scconf_get_bool(root,"debug",debug);
+    daemonize = scconf_get_bool(root,"daemon",daemonize);
+    polling_time = scconf_get_int(root,"polling_time",polling_time);
+    expire_time = scconf_get_int(root,"expire_time",expire_time);
+    pkcs11_module = (char *) scconf_get_str(root,"pkcs11_module",pkcs11_module);
 #ifdef HAVE_NSS
-	nss_dir = (char *) scconf_get_str(root,"nss_dir",nss_dir);
+    nss_dir = (char *) scconf_get_str(root,"nss_dir",nss_dir);
 #endif
-	if (debug) set_debug_level(1);
-	return 0;
+    if (debug) set_debug_level(1);
+    return 0;
 }
 
 static int parse_args(int argc, char *argv[]) {
-	int i;
-	int res;
-	polling_time = DEF_POLLING;
-	expire_time = DEF_EXPIRE;
-	debug   = 0;
-	daemonize  = 0;
-	cfgfile = DEF_CONFIG_FILE;
+    int i;
+    int res;
+    polling_time = DEF_POLLING;
+    expire_time = DEF_EXPIRE;
+    debug   = 0;
+    daemonize  = 0;
+    cfgfile = DEF_CONFIG_FILE;
         /* first of all check whether debugging should be enabled */
         for (i = 0; i < argc; i++) {
           if (! strcmp("debug", argv[i])) set_debug_level(1);
@@ -244,22 +245,22 @@ static int parse_args(int argc, char *ar
                 break;
             }
         }
-	/* parse configuration file */
-	if ( parse_config_file()<0) {
-		fprintf(stderr,"Error parsing configuration file %s\n",cfgfile);
-		exit(-1);
-	}
+    /* parse configuration file */
+    if ( parse_config_file()<0) {
+        fprintf(stderr,"Error parsing configuration file %s\n",cfgfile);
+        exit(-1);
+    }
 
-	/* and now re-parse command line to take precedence over cfgfile */
+    /* and now re-parse command line to take precedence over cfgfile */
         for (i = 1; i < argc; i++) {
             if (strcmp("daemon", argv[i]) == 0) {
-		daemonize=1;
-	  	continue;
-	    }
+        daemonize=1;
+        continue;
+        }
             if (strcmp("nodaemon", argv[i]) == 0) {
-		daemonize=0;
-	  	continue;
-	    }
+        daemonize=0;
+        continue;
+        }
             if (strstr(argv[i],"polling_time=") ) {
                 res=sscanf(argv[i],"polling_time=%d",&polling_time);
                 continue;
@@ -279,31 +280,31 @@ static int parse_args(int argc, char *ar
             }
 #endif
             if (strstr(argv[i],"debug") ) {
-		continue;  /* already parsed: skip */
-	    }
+        continue;  /* already parsed: skip */
+        }
             if (strstr(argv[i],"nodebug") ) {
-		set_debug_level(0);
-		continue;  /* already parsed: skip */
-	    }
+        set_debug_level(0);
+        continue;  /* already parsed: skip */
+        }
             if (strstr(argv[i],"config_file=") ) {
-		continue; /* already parsed: skip */
-	    }
-	    fprintf(stderr,"unknown option %s\n",argv[i]);
-	    /* arriving here means syntax error */
-	    fprintf(stderr,"PKCS#11 Event Manager\n\n");
-	    fprintf(stderr,"Usage %s [[no]debug] [[no]daemon] [polling_time=<time>] [expire_time=<limit>] [config_file=<file>] [pkcs11_module=<module>]\n",argv[0]);
-	    fprintf(stderr,"\n\nDefaults: debug=0 daemon=0 polltime=%d (ms) expiretime=0 (none) config_file=%s pkcs11_module=%s\n",DEF_POLLING,DEF_CONFIG_FILE,DEF_PKCS11_MODULE );
-	    exit(1);
+        continue; /* already parsed: skip */
+        }
+        fprintf(stderr,"unknown option %s\n",argv[i]);
+        /* arriving here means syntax error */
+        fprintf(stderr,"PKCS#11 Event Manager\n\n");
+        fprintf(stderr,"Usage %s [[no]debug] [[no]daemon] [polling_time=<time>] [expire_time=<limit>] [config_file=<file>] [pkcs11_module=<module>]\n",argv[0]);
+        fprintf(stderr,"\n\nDefaults: debug=0 daemon=0 polltime=%d (ms) expiretime=0 (none) config_file=%s pkcs11_module=%s\n",DEF_POLLING,DEF_CONFIG_FILE,DEF_PKCS11_MODULE );
+        exit(1);
         } /* for */
-	/* end of config: return */
-	return 0;
+    /* end of config: return */
+    return 0;
 }
 
 #ifdef HAVE_NSS
 struct SlotStatusStr {
     CK_SLOT_ID slotID;
     PRUint32 series;
-    int	 present;
+    int  present;
 };
 
 struct SlotStatusStr *slotStatus = NULL;
@@ -316,10 +317,10 @@ do_expand_slot_status(void)
 #define ENTRY_STEP 10
     struct SlotStatusStr *tmp;
     tmp = (struct SlotStatusStr *)
-	    realloc(slotStatus,
-		(maxEntries+ENTRY_STEP)*sizeof(struct SlotStatusStr));
+        realloc(slotStatus,
+        (maxEntries+ENTRY_STEP)*sizeof(struct SlotStatusStr));
     if (!tmp) {
-	return 0;
+    return 0;
     }
     slotStatus = tmp;
     maxEntries += ENTRY_STEP;
@@ -334,14 +335,14 @@ get_token_status(CK_SLOT_ID slotID)
     int i;
 
     for (i=0; i < slotCount; i++) {
-	if (slotStatus[i].slotID == slotID) {
-		return &slotStatus[i];
-	}
+    if (slotStatus[i].slotID == slotID) {
+        return &slotStatus[i];
+    }
     }
     if (slotCount >=  maxEntries) {
-	if (!do_expand_slot_status()) {
-	    return NULL;
-	}
+    if (!do_expand_slot_status()) {
+        return NULL;
+    }
     }
 
 
@@ -380,72 +381,74 @@ int main(int argc, char *argv[]) {
     /* parse args and configuration file */
     parse_args(argc,argv);
 
-    DBG("Initializing NSS ...");
+    /* Init syslog */
+    openlog("pkcs11_eventmgr", LOG_PID, LOG_DAEMON);
+
+    syslog(LOG_INFO, "Initializing NSS...");
     if (nss_dir) {
-	/* initialize with read only databases */
-	rv = NSS_Init(nss_dir);
+    /* initialize with read only databases */
+    rv = NSS_Init(nss_dir);
     } else {
-	/* not database secified */
-	rv = NSS_NoDB_Init(NULL);
+    /* not database secified */
+    rv = NSS_NoDB_Init(NULL);
     }
 
     if (rv != SECSuccess) {
         DBG("NSS_Initialize failed.");
-	return 1;
+    return 1;
     }
 
     /* acquire the module before we daemonize so we can return an error
      * to the user if it fails */
-    DBG("loading the module ...");
+    syslog(LOG_INFO, "Loading the module...");
     if (pkcs11_module) {
 #define SPEC_TEMPLATE "library=\"%s\" name=\"SmartCard\""
-	char *moduleSpec = malloc(sizeof(SPEC_TEMPLATE) + strlen(pkcs11_module));
-	if (!moduleSpec) {
-	    DBG1("Malloc failed when allocating module spec", strerror(errno));
-	    return 1;
-	}
-	sprintf(moduleSpec,SPEC_TEMPLATE, pkcs11_module);
-	DBG2("loading Module explicitly, moduleSpec=<%s> module=%s\n",
-						moduleSpec, pkcs11_module);
-	module = SECMOD_LoadUserModule(moduleSpec, NULL, 0);
-	free(moduleSpec);
-	if (!module || module->loaded == 0) {
+    char *moduleSpec = malloc(sizeof(SPEC_TEMPLATE) + strlen(pkcs11_module));
+    if (!moduleSpec) {
+        DBG1("Malloc failed when allocating module spec", strerror(errno));
+        return 1;
+    }
+    sprintf(moduleSpec,SPEC_TEMPLATE, pkcs11_module);
+    syslog(LOG_INFO, "Loading module explicitly, module=%s\n", pkcs11_module);
+    module = SECMOD_LoadUserModule(moduleSpec, NULL, 0);
+    free(moduleSpec);
+    if (!module || module->loaded == 0) {
             if (module) {
                SECMOD_DestroyModule(module);
             }
-	    DBG("Failed to load SmartCard software");
-	    return 1;
-	}
+        DBG("Failed to load SmartCard software");
+        return 1;
+    }
     } else {
-    	/* no module specified? look for one in the our of NSS's
+        /* no module specified? look for one in the our of NSS's
          * secmod.db */
-	SECMODModuleList *modList = SECMOD_GetDefaultModuleList();
+    SECMODModuleList *modList = SECMOD_GetDefaultModuleList();
 
-	/* threaded applications should also acquire the
-	 * DefaultModuleListLock */
-	DBG("Looking up new module\n");
-	for ( ; modList; modList->next) {
-	    if (SECMOD_HasRemovableSlots(modList->module)) {
-		module = SECMOD_ReferenceModule(modList->module);
-		break;
-	    }
-	}
-	if (!module) {
-	    DBG("Failed to find any SmartCard software");
-	    return 1;
-	}
+    /* threaded applications should also acquire the
+     * DefaultModuleListLock */
+    DBG("Looking up new module\n");
+    for ( ; modList; modList->next) {
+        if (SECMOD_HasRemovableSlots(modList->module)) {
+        module = SECMOD_ReferenceModule(modList->module);
+        break;
+        }
+    }
+    if (!module) {
+        DBG("Failed to find any SmartCard software");
+        return 1;
+    }
     }
 
 #ifdef HAVE_DAEMON
     if (daemonize) {
-	DBG("Going to be daemon...");
-	if ( daemon(0,debug)<0 ) {
-		DBG1("Error in daemon() call", strerror(errno));
-		SECMOD_DestroyModule(module);
-        	rv = NSS_Shutdown();
-		if (ctx) scconf_free(ctx);
-		return 1;
-	}
+    DBG("Going to be daemon...");
+    if ( daemon(0,debug)<0 ) {
+        DBG1("Error in daemon() call", strerror(errno));
+        SECMOD_DestroyModule(module);
+            rv = NSS_Shutdown();
+        if (ctx) scconf_free(ctx);
+        return 1;
+    }
     }
 #endif
 
@@ -454,51 +457,51 @@ int main(int argc, char *argv[]) {
      * We only stop in case of an error
      *
      */
-    DBG("Waiting for Events");
+    syslog(LOG_INFO, "Waiting for Events");
     do {
-	/* wait for any token uses C_WaitForSlotEvent if the token supports it.
-	 * otherwise it polls by hand*/
-	struct SlotStatusStr *slotStatus;
-	PK11SlotInfo *slot = SECMOD_WaitForAnyTokenEvent(module, 0,
-			PR_SecondsToInterval(polling_time));
-
-	/* exit on an error */
-	if (slot == NULL) {
-	    break;
-	}
-
-	/* examine why we got the event */
-	slotStatus = get_token_status(PK11_GetSlotID(slot));
-
-	/* if the slot is present, see if it was just removed */
-	if (PK11_IsPresent(slot)) {
-	   PRUint32 series = PK11_GetSlotSeries(slot);
+    /* wait for any token uses C_WaitForSlotEvent if the token supports it.
+     * otherwise it polls by hand*/
+    struct SlotStatusStr *slotStatus;
+    PK11SlotInfo *slot = SECMOD_WaitForAnyTokenEvent(module, 0,
+            PR_SecondsToInterval(polling_time));
+
+    /* exit on an error */
+    if (slot == NULL) {
+        break;
+    }
+
+    /* examine why we got the event */
+    slotStatus = get_token_status(PK11_GetSlotID(slot));
+
+    /* if the slot is present, see if it was just removed */
+    if (PK11_IsPresent(slot)) {
+       PRUint32 series = PK11_GetSlotSeries(slot);
 
-	   /* skip spurious insert events */
-	   if (series != slotStatus->series) {
+       /* skip spurious insert events */
+       if (series != slotStatus->series) {
 #ifdef notdef
-		/* if one was already present, remove it
-		 * This can happen if you pull the token and insert it
-		 * before the PK11_IsPresent call above */
-		if (slotStatus->present) {
-                    DBG("Card removed, ");
-		    execute_event("card_remove");
-		}
-#endif
-		DBG("Card inserted, ");
-		execute_event("card_insert");
-	   }
-	   slotStatus->series = series;
-	   slotStatus->present = 1;
-	} else {
-	   if (slotStatus->present) {
-		DBG("Card removed, ");
-		execute_event("card_remove");
-	   }
-	   slotStatus->series = 0;
-	   slotStatus->present = 0;
-	}
-	PK11_FreeSlot(slot);
+        /* if one was already present, remove it
+         * This can happen if you pull the token and insert it
+         * before the PK11_IsPresent call above */
+        if (slotStatus->present) {
+                    syslog(LOG_INFO, "Card removed");
+            execute_event("card_remove");
+        }
+#endif
+        syslog(LOG_INFO, "Card inserted");
+        execute_event("card_insert");
+       }
+       slotStatus->series = series;
+       slotStatus->present = 1;
+    } else {
+       if (slotStatus->present) {
+        syslog(LOG_INFO, "Card removed");
+        execute_event("card_remove");
+       }
+       slotStatus->series = 0;
+       slotStatus->present = 0;
+    }
+    PK11_FreeSlot(slot);
     } while(1);
 
 #else
@@ -512,7 +515,7 @@ int main(int argc, char *argv[]) {
     /* parse args and configuration file */
     parse_args(argc,argv);
     /* load pkcs11 module */
-    DBG("loading pkcs #11 module...");
+    syslog(LOG_INFO, "Loading pkcs #11 module...");
     rv = load_pkcs11_module(pkcs11_module, &ph);
     if (rv != 0) {
         DBG1("load_pkcs11_module() failed: %s", get_error());
@@ -522,23 +525,23 @@ int main(int argc, char *argv[]) {
 #ifdef HAVE_DAEMON
     /* put my self into background if flag is set */
     if (daemonize) {
-	DBG("Going to be daemon...");
-	if ( daemon(0,debug)<0 ) {
-		DBG1("Error in daemon() call: %s", strerror(errno));
-        	release_pkcs11_module(ph);
-		if (ctx) scconf_free(ctx);
-		return 1;
-	}
+    DBG("Going to be daemon...");
+    if ( daemon(0,debug)<0 ) {
+        DBG1("Error in daemon() call: %s", strerror(errno));
+            release_pkcs11_module(ph);
+        if (ctx) scconf_free(ctx);
+        return 1;
+    }
     }
 #endif
 
     /* open pkcs11 sesion */
-    DBG("initialising pkcs #11 module...");
+    syslog(LOG_INFO, "Initialising pkcs #11 module...");
     rv = ph->fl->C_Initialize(NULL);
     if (rv != 0) {
         release_pkcs11_module(ph);
-	if (ctx)
-	  scconf_free(ctx);
+    if (ctx)
+      scconf_free(ctx);
         DBG1("C_Initialize() failed: %d", rv);
         return 1;
     }
@@ -560,43 +563,43 @@ int main(int argc, char *argv[]) {
      * environments....
      */
     do {
-	   sleep(polling_time);
-	   /* try to find an slot with available token(s) */
-	   new_state = get_a_token();
-	   if (new_state == CARD_ERROR) {
-    		DBG("Error trying to get a token");
-		rv = ph->fl->C_Finalize(NULL);
-		rv = ph->fl->C_Initialize(NULL);
-    		break;
-	   }
-	   if (old_state == new_state ) { /* state unchanged */
-		/* on card not present, increase and check expire time */
-		if ( expire_time == 0 ) continue;
-		if ( new_state == CARD_PRESENT ) continue;
-		expire_count += polling_time;
-		if (expire_count >=expire_time) {
+       sleep(polling_time);
+       /* try to find an slot with available token(s) */
+       new_state = get_a_token();
+       if (new_state == CARD_ERROR) {
+            DBG("Error trying to get a token");
+        rv = ph->fl->C_Finalize(NULL);
+        rv = ph->fl->C_Initialize(NULL);
+            break;
+       }
+       if (old_state == new_state ) { /* state unchanged */
+        /* on card not present, increase and check expire time */
+        if ( expire_time == 0 ) continue;
+        if ( new_state == CARD_PRESENT ) continue;
+        expire_count += polling_time;
+        if (expire_count >=expire_time) {
                     DBG("Timeout on Card Removed ");
-		    execute_event("expire_time");
-		    expire_count=0; /*restart timer */
-		}
+            execute_event("expire_time");
+            expire_count=0; /*restart timer */
+        }
            } else { /* state changed; parse event */
-	       old_state = new_state;
-	       expire_count=0;
-	       if (!first_loop++) continue; /*skip first pass */
+           old_state = new_state;
+           expire_count=0;
+           if (!first_loop++) continue; /*skip first pass */
                if (new_state == CARD_NOT_PRESENT) {
-                    DBG("Card removed, ");
-		    execute_event("card_remove");
-		/*
-		some pkcs11's fails on reinsert card. To avoid this
-		re-initialize library on card removal
-		*/    
-    		DBG("Re-initialising pkcs #11 module...");
-    		rv = ph->fl->C_Finalize(NULL);
-    		rv = ph->fl->C_Initialize(NULL);
+                    syslog(LOG_INFO, "Card removed");
+            execute_event("card_remove");
+        /*
+        some pkcs11's fails on reinsert card. To avoid this
+        re-initialize library on card removal
+        */    
+            syslog(LOG_INFO, "Re-initialising pkcs #11 module...");
+            rv = ph->fl->C_Finalize(NULL);
+            rv = ph->fl->C_Initialize(NULL);
                }
                if (new_state == CARD_PRESENT) {
-                    DBG("Card inserted, ");
-		    execute_event("card_insert");
+                    syslog(LOG_INFO, "Card inserted");
+            execute_event("card_insert");
                }
            }
     } while (1);
@@ -604,6 +607,7 @@ int main(int argc, char *argv[]) {
     /* If we get here means that an error or exit status occurred */
     DBG("Exited from main loop");
     thats_all_folks();
+    closelog();
     exit(0);
 } /* main */
 
