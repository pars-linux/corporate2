Index: bm_mainview.py
===================================================================
--- src/bm_mainview.py	(revision 19903)
+++ src/bm_mainview.py	(working copy)
@@ -121,12 +121,12 @@
             self.spinTimeout.setValue(int(self.parent.options["timeout"]))
             self.setTimeoutSlot(True)
             handler()
-        self.spinTimeout.setEnabled(False)
         ch = self.parent.callMethod("setOption", "tr.org.pardus.comar.boot.loader.set")
         ch.registerAuthError(error)
         ch.registerDBusError(error)
         ch.registerCancel(cancel)
         ch.registerDone(handler)
+        self.spinTimeout.setEnabled(False)
         ch.call("timeout", str(value))
 
     def slotAddEntry(self):
@@ -261,6 +261,13 @@
         self.parent.showScreen("EditEntry")
 
     def deleteEntry(self, index, title):
+        def handler():
+            self.parent.widgetEntries.listEntries.setEnabled(True)
+        def cancel():
+            handler()
+        def error(exception):
+            handler()
+
         entries = self.parent.entries
         pardus_root = getRoot()
         pardus_entries = []
@@ -284,9 +291,13 @@
                     confirm_uninstall = KMessageBox.questionYesNo(self, i18n("This is a Pardus kernel entry.\nDo you want to uninstall it from the system?"), i18n("Uninstall Kernel"))
                     if confirm_uninstall == KMessageBox.Yes:
                         uninstall = "yes"
-            self.parent.widgetEntries.listEntries.setEnabled(False)
 
             ch = self.parent.callMethod("removeEntry", "tr.org.pardus.comar.boot.loader.removeentry")
+            ch.registerAuthError(error)
+            ch.registerDBusError(error)
+            ch.registerCancel(cancel)
+            ch.registerDone(handler)
+            self.parent.widgetEntries.listEntries.setEnabled(False)
             ch.call(index, title, uninstall)
 
     def resetEntry(self):
@@ -476,9 +487,19 @@
                     if isLast:
                         self.listBusy = False
                         self.listUnused()
+                    self.setEnabled(True)
+                    self.buttonAdd.setEnabled(True)
+                    self.buttonRemove.setEnabled(True)
+                def cancel():
+                    self.setEnabled(True)
+                    self.buttonAdd.setEnabled(True)
+                    self.buttonRemove.setEnabled(True)
+
                 for version in versions:
                     ch = self.parent.callMethod("removeUnused", "tr.org.pardus.comar.boot.loader.removeunused")
                     ch.registerDone(handler, version == versions[-1])
+                    ch.registerCancel(cancel)
+                    self.setEnabled(False)
                     ch.call(version)
 
     def slotExit(self):
