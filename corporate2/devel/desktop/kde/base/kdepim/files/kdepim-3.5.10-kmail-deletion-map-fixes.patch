Index: kmail/cachedimapjob.cpp
===================================================================
--- kmail/cachedimapjob.cpp	(revision 1022979)
+++ kmail/cachedimapjob.cpp	(revision 1031516)
@@ -508,7 +508,7 @@
         bool b = kmkernel->iCalIface().isResourceQuiet();
         kmkernel->iCalIface().setResourceQuiet( true );
 
-        mFolder->take( i );
+        mFolder->takeTemporarily( i );
         mFolder->addMsgKeepUID( mMsg );
         mMsg->setTransferInProgress( false );
 
Index: kmail/kmfoldercachedimap.cpp
===================================================================
--- kmail/kmfoldercachedimap.cpp	(revision 1022979)
+++ kmail/kmfoldercachedimap.cpp	(revision 1031516)
@@ -471,7 +471,6 @@
   uidMapDirty = false;
 }
 
-/* Reimplemented from KMFolderMaildir */
 KMMessage* KMFolderCachedImap::take(int idx)
 {
   uidMapDirty = true;
@@ -479,6 +478,11 @@
   return KMFolderMaildir::take(idx);
 }
 
+void KMFolderCachedImap::takeTemporarily( int idx )
+{
+  KMFolderMaildir::take( idx );
+}
+
 // Add a message without clearing it's X-UID field.
 int KMFolderCachedImap::addMsgInternal( KMMessage* msg, bool newMail,
                                         int* index_return )
@@ -1565,6 +1569,11 @@
     job->start();
     return true;
   } else {
+
+    // Nothing to delete on the server, make sure the map is clear again.
+    // Normally this wouldn't be necessary, but there can be stale maps because of
+    // https://issues.kolab.org/issue3833.
+    mDeletedUIDsSinceLastSync.clear();
     return false;
   }
 }
Index: kmail/kmfoldercachedimap.h
===================================================================
--- kmail/kmfoldercachedimap.h	(revision 1022979)
+++ kmail/kmfoldercachedimap.h	(revision 1031516)
@@ -182,8 +182,20 @@
   /* Reimplemented from KMFolder. Moving is not supported, so aParent must be 0 */
   virtual int rename(const QString& aName, KMFolderDir *aParent=0);
 
-  /* Reimplemented from KMFolderMaildir */
+  /**
+   * Reimplemented from KMFolderMaildir
+   * This deletes the message permanently, also from the server. For this, rememberDeletion() is
+   * called, so that the message can be deleted from the server on the next sync.
+   */
   virtual KMMessage* take(int idx);
+
+  /**
+   * Like take(), only that the deletion is not remembered, i.e. the message will not be deleted
+   * from the server.
+   * Calling this can cause inconsistencies, so make sure you re-add the message later!
+   */
+  void takeTemporarily( int idx );
+
   /* Reimplemented from KMFolderMaildir */
   virtual int addMsg(KMMessage* msg, int* index_return = 0);
   /* internal version that doesn't remove the X-UID header */
