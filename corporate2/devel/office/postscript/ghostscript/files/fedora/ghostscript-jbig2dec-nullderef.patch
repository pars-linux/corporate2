Index: ghostscript-8.70/jbig2dec/jbig2_generic.c
===================================================================
--- ghostscript-8.70.orig/jbig2dec/jbig2_generic.c
+++ ghostscript-8.70/jbig2dec/jbig2_generic.c
@@ -596,6 +596,10 @@ jbig2_immediate_generic_region(Jbig2Ctx 
   memcpy (params.gbat, gbat, gbat_bytes);
 
   image = jbig2_image_new(ctx, rsi.width, rsi.height);
+  if (image == NULL)
+    return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number,
+		       "failed to allocate buffer for image");
+
   jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, segment->number,
     "allocated %d x %d image buffer for region decode results",
         rsi.width, rsi.height);
Index: ghostscript-8.70/jbig2dec/jbig2_symbol_dict.c
===================================================================
--- ghostscript-8.70.orig/jbig2dec/jbig2_symbol_dict.c
+++ ghostscript-8.70/jbig2dec/jbig2_symbol_dict.c
@@ -367,6 +367,11 @@ jbig2_decode_symbol_dict(Jbig2Ctx *ctx,
 		  memcpy(region_params.gbat, params->sdat, sdat_bytes);
 
 		  image = jbig2_image_new(ctx, SYMWIDTH, HCHEIGHT);
+		  if (image == NULL) {
+		      jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number,
+				  "failed to allocate image storage");
+		      return NULL;
+		  }
 
 		  code = jbig2_decode_generic_region(ctx, segment, &region_params,
 						     as, image, GB_stats);
@@ -517,6 +522,11 @@ jbig2_decode_symbol_dict(Jbig2Ctx *ctx,
 			ID, RDX, RDY);
 
 		      image = jbig2_image_new(ctx, SYMWIDTH, HCHEIGHT);
+		      if (image == NULL) {
+			  jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number,
+				      "failed to allocate image storage");
+			  return NULL;
+		      }
 
 		      /* Table 18 */
 		      rparams.GRTEMPLATE = params->SDRTEMPLATE;
@@ -635,6 +645,16 @@ jbig2_decode_symbol_dict(Jbig2Ctx *ctx,
 	for (j = HCFIRSTSYM; j < NSYMSDECODED; j++) {
 	  Jbig2Image *glyph;
 	  glyph = jbig2_image_new(ctx, SDNEWSYMWIDTHS[j], HCHEIGHT);
+	  if (glyph == NULL) {
+	      jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number,
+			  "error allocating image storage for glyph");
+	      while (--j >= HCFIRSTSYM) {
+		  jbig2_image_release(ctx, SDNEWSYMS->glyphs[j]);
+		  SDNEWSYMS->glyphs[j] = NULL;
+	      }
+	      jbig2_image_release(ctx, image);
+	      return NULL;
+	  }
 	  jbig2_image_compose(ctx, glyph, image,
 		-x, 0, JBIG2_COMPOSE_REPLACE);
 	  x += SDNEWSYMWIDTHS[j];
Index: ghostscript-8.70/jbig2dec/jbig2_text.c
===================================================================
--- ghostscript-8.70.orig/jbig2dec/jbig2_text.c
+++ ghostscript-8.70/jbig2dec/jbig2_text.c
@@ -313,7 +313,11 @@ jbig2_decode_text_region(Jbig2Ctx *ctx, 
 		refimage = jbig2_image_new(ctx, IBO->width + RDW,
 						IBO->height + RDH);
 
+		if (image == NULL)
+		    return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number,
+				       "could not allocate image storage");
 		/* Table 12 */
+
 		rparams.GRTEMPLATE = params->SBRTEMPLATE;
 		rparams.reference = IBO;
 		rparams.DX = (RDW >> 1) + RDX;
@@ -676,6 +680,9 @@ jbig2_parse_text_region(Jbig2Ctx *ctx, J
     }
 
     image = jbig2_image_new(ctx, region_info.width, region_info.height);
+    if (image == NULL)
+	return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number,
+			   "unable to allocate image storage");
 
     ws = jbig2_word_stream_buf_new(ctx, segment_data + offset, segment->data_length - offset);
     if (!params.SBHUFF) {
