diff -urNad cups-1.3.11~/scheduler/conf.c cups-1.3.11/scheduler/conf.c
--- cups-1.3.11~/scheduler/conf.c	2009-06-30 00:23:49.000000000 +0200
+++ cups-1.3.11/scheduler/conf.c	2009-07-11 17:06:37.330026851 +0200
@@ -366,6 +366,7 @@
   cups_file_t	*fp;			/* Configuration file */
   int		status;			/* Return status */
   char		temp[1024],		/* Temporary buffer */
+		mimedir[1024],		/* MIME directory */
 		*slash;			/* Directory separator */
   cups_lang_t	*language;		/* Language */
   struct passwd	*user;			/* Default user */
@@ -1185,20 +1186,25 @@
     */
 
     snprintf(temp, sizeof(temp), "%s/filter", ServerBin);
+    snprintf(mimedir, sizeof(mimedir), "%s/mime", DataDir);
 
-    MimeDatabase = mimeLoad(ServerRoot, temp);
+    MimeDatabase = mimeLoadTypes(NULL, mimedir);
+    MimeDatabase = mimeLoadTypes(MimeDatabase, ServerRoot);
+    MimeDatabase = mimeLoadFilters(MimeDatabase, mimedir, temp);
+    MimeDatabase = mimeLoadFilters(MimeDatabase, ServerRoot, temp);
 
     if (!MimeDatabase)
     {
       cupsdLogMessage(CUPSD_LOG_EMERG,
-                      "Unable to load MIME database from \'%s\'!", ServerRoot);
+                      "Unable to load MIME database from \"%s\" or \"%s\"!",
+		      mimedir, ServerRoot);
       exit(errno);
     }
 
     cupsdLogMessage(CUPSD_LOG_INFO,
-                    "Loaded MIME database from \'%s\': %d types, %d filters...",
-                    ServerRoot, mimeNumTypes(MimeDatabase),
-		    mimeNumFilters(MimeDatabase));
+                    "Loaded MIME database from \"%s\" and \"%s\": %d types, "
+		    "%d filters...", mimedir, ServerRoot,
+		    mimeNumTypes(MimeDatabase), mimeNumFilters(MimeDatabase));
 
    /*
     * Create a list of MIME types for the document-format-supported
diff -urNad cups-1.3.11~/scheduler/cupsfilter.c cups-1.3.11/scheduler/cupsfilter.c
--- cups-1.3.11~/scheduler/cupsfilter.c	2008-08-26 05:43:28.000000000 +0200
+++ cups-1.3.11/scheduler/cupsfilter.c	2009-07-11 17:06:37.334027080 +0200
@@ -103,6 +103,7 @@
   int		compression;		/* Compression of file */
   int		cost;			/* Cost of filters */
   mime_t	*mime;			/* MIME database */
+  char		mimedir[1024];		/* MIME directory */
   char		*infile,		/* File to filter */
 		*outfile;		/* File to create */
   char		cupsdconf[1024];	/* cupsd.conf file */
@@ -331,11 +332,19 @@
   if (read_cupsd_conf(cupsdconf))
     return (1);
 
-  if ((mime = mimeLoad(ServerRoot, Path)) == NULL)
+  snprintf(mimedir, sizeof(mimedir), "%s/mime", DataDir);
+
+  mime = mimeLoadTypes(NULL, mimedir);
+  mime = mimeLoadTypes(mime, ServerRoot);
+  mime = mimeLoadFilters(mime, mimedir, Path);
+  mime = mimeLoadFilters(mime, ServerRoot, Path);
+
+  if (!mime)
   {
     _cupsLangPrintf(stderr,
-                    _("%s: Unable to read MIME database from \"%s\"!\n"),
-		    command, ServerRoot);
+                    _("%s: Unable to read MIME database from \"%s\" or "
+		      "\"%s\"!\n"),
+		    command, mimedir, ServerRoot);
     return (1);
   }
 
diff -urNad cups-1.3.11~/scheduler/mime.c cups-1.3.11/scheduler/mime.c
--- cups-1.3.11~/scheduler/mime.c	2008-01-17 00:42:35.000000000 +0100
+++ cups-1.3.11/scheduler/mime.c	2009-07-11 17:06:37.334027080 +0200
@@ -72,6 +72,7 @@
 		           const char *filterpath,
 			   cups_array_t *filtercache);
 static void	load_types(mime_t *mime, const char *filename);
+static mime_t	*mime_new(void);
 
 
 /*
@@ -192,73 +193,50 @@
 
 /*
  * 'mimeLoad()' - Create a new MIME database from disk.
+ *
+ * This function uses @link mimeLoadFilters@ and @link mimeLoadTypes@ to
+ * create a MIME database from a single directory.
  */
 
 mime_t *				/* O - New MIME database */
 mimeLoad(const char *pathname,		/* I - Directory to load */
          const char *filterpath)	/* I - Directory to load */
 {
-  return (mimeMerge(NULL, pathname, filterpath));
+  return (mimeLoadFilters(mimeLoadTypes(NULL, pathname), pathname, filterpath));
 }
 
 
 /*
- * 'mimeMerge()' - Merge a MIME database from disk with the current one.
+ * 'mimeLoadFilters()' - Load filter definitions from disk.
+ *
+ * This function loads all of the .convs files from the specified directory.
+ * Use @link mimeLoadTypes@ to load all types before you load the filters.
  */
 
-mime_t *				/* O - Updated MIME database */
-mimeMerge(mime_t     *mime,		/* I - MIME database to add to */
-          const char *pathname,		/* I - Directory to load */
-          const char *filterpath)	/* I - Directory to load */
+mime_t *				/* O - MIME database */
+mimeLoadFilters(mime_t     *mime,	/* I - MIME database */
+                const char *pathname,	/* I - Directory to load from */
+                const char *filterpath)	/* I - Default filter program directory */
 {
   cups_dir_t	*dir;			/* Directory */
   cups_dentry_t	*dent;			/* Directory entry */
-  char		filename[1024];		/* Full filename of types/converts file */
+  char		filename[1024];		/* Full filename of .convs file */
   cups_array_t	*filtercache;		/* Filter cache */
 
 
  /*
-  * First open the directory specified by pathname...  Return NULL if nothing
-  * was read or if the pathname is NULL...
-  */
-
-  if (!pathname)
-    return (NULL);
-
-  if ((dir = cupsDirOpen(pathname)) == NULL)
-    return (NULL);
-
- /*
-  * If "mime" is NULL, make a new, blank database...
+  * Range check input...
   */
 
-  if (!mime)
-    mime = mimeNew();
-  if (!mime)
-  {
-    cupsDirClose(dir);
-    return (NULL);
-  }
+  if (!mime || !pathname || !filterpath)
+    return (mime);
 
  /*
-  * Read all the .types files...
+  * Then open the directory specified by pathname...
   */
 
-  while ((dent = cupsDirRead(dir)) != NULL)
-  {
-    if (strlen(dent->filename) > 6 &&
-        !strcmp(dent->filename + strlen(dent->filename) - 6, ".types"))
-    {
-     /*
-      * Load a mime.types file...
-      */
-
-      snprintf(filename, sizeof(filename), "%s/%s", pathname, dent->filename);
-      load_types(mime, filename);
-    }
-  }
-
-  cupsDirRewind(dir);
+  if ((dir = cupsDirOpen(pathname)) == NULL)
+    return (mime);
 
  /*
   * Read all the .convs files...
@@ -289,13 +267,62 @@
 
 
 /*
- * 'mimeNew()' - Create a new, empty MIME database.
+ * 'mimeLoadTypes()' - Load type definitions from disk.
+ *
+ * This function loads all of the .types files from the specified directory.
+ * Use @link mimeLoadFilters@ to load all filters after you load the types.
  */
 
 mime_t *				/* O - MIME database */
-mimeNew(void)
+mimeLoadTypes(mime_t     *mime,		/* I - MIME database or @code NULL@ to create a new one */
+              const char *pathname)	/* I - Directory to load from */
 {
-  return ((mime_t *)calloc(1, sizeof(mime_t)));
+  cups_dir_t	*dir;			/* Directory */
+  cups_dentry_t	*dent;			/* Directory entry */
+  char		filename[1024];		/* Full filename of .types file */
+
+
+ /*
+  * First open the directory specified by pathname...
+  */
+
+  if ((dir = cupsDirOpen(pathname)) == NULL)
+    return (mime);
+
+ /*
+  * If "mime" is NULL, make a new, empty database...
+  */
+
+  if (!mime)
+    mime = mime_new();
+
+  if (!mime)
+  {
+    cupsDirClose(dir);
+    return (NULL);
+  }
+
+ /*
+  * Read all the .types files...
+  */
+
+  while ((dent = cupsDirRead(dir)) != NULL)
+  {
+    if (strlen(dent->filename) > 6 &&
+        !strcmp(dent->filename + strlen(dent->filename) - 6, ".types"))
+    {
+     /*
+      * Load a mime.types file...
+      */
+
+      snprintf(filename, sizeof(filename), "%s/%s", pathname, dent->filename);
+      load_types(mime, filename);
+    }
+  }
+
+  cupsDirClose(dir);
+
+  return (mime);
 }
 
 
@@ -474,6 +501,10 @@
   int		cost;			/* Cost of filter */
 
 
+  DEBUG_printf(("load_convs(mime=%p, filename=\"%s\", filterpath=\"%s\", "
+                "filtercache=%p)\n", mime, filename, filterpath, filtercache));
+
+
  /*
   * First try to open the file...
   */
@@ -481,8 +512,6 @@
   if ((fp = cupsFileOpen(filename, "r")) == NULL)
     return;
 
-  DEBUG_printf(("\"%s\":\n", filename));
-
  /*
   * Then read each line from the file, skipping any comments in the file...
   */
@@ -493,8 +522,6 @@
     * Skip blank lines and lines starting with a #...
     */
 
-    DEBUG_puts(line);
-
     if (!line[0] || line[0] == '#')
       continue;
 
@@ -544,7 +571,8 @@
 
     if ((dsttype = mimeType(mime, super, type)) == NULL)
     {
-      DEBUG_printf(("    Destination type %s/%s not found!\n", super, type));
+      DEBUG_printf(("load_convs: Destination type %s/%s not found!\n",
+                    super, type));
       continue;
     }
 
@@ -578,7 +606,8 @@
 
       if (!add_fcache(filtercache, filter, filterpath))
       {
-        DEBUG_printf(("    Filter %s not found in %s!\n", filter, filterpath)); 
+        DEBUG_printf(("load_convs: Filter %s not found in %s!\n", filter,
+	              filterpath)); 
         continue;
       }
     }
@@ -653,6 +682,8 @@
   mime_type_t	*typeptr;		/* New MIME type */
 
 
+  DEBUG_printf(("load_types(mime=%p, filename=\"%s\")\n", mime, filename));
+
  /*
   * First try to open the file...
   */
@@ -660,8 +691,6 @@
   if ((fp = cupsFileOpen(filename, "r")) == NULL)
     return;
 
-  DEBUG_printf(("\"%s\":\n", filename));
-
  /*
   * Then read each line from the file, skipping any comments in the file...
   */
@@ -672,8 +701,6 @@
     * Skip blank lines and lines starting with a #...
     */
 
-    DEBUG_puts(line);
-
     if (!line[0] || line[0] == '#')
       continue;
 
@@ -732,5 +759,16 @@
 
 
 /*
+ * 'mime_new()' - Create a new, empty MIME database.
+ */
+
+static mime_t *				/* O - MIME database */
+mime_new(void)
+{
+  return ((mime_t *)calloc(1, sizeof(mime_t)));
+}
+
+
+/*
  * End of "$Id: mime.c 7224 2008-01-16 23:42:35Z mike $".
  */
diff -urNad cups-1.3.11~/scheduler/mime.h cups-1.3.11/scheduler/mime.h
--- cups-1.3.11~/scheduler/mime.h	2007-07-11 23:46:42.000000000 +0200
+++ cups-1.3.11/scheduler/mime.h	2009-07-11 17:06:37.334027080 +0200
@@ -3,7 +3,7 @@
  *
  *   MIME type/conversion database definitions for the Common UNIX Printing System (CUPS).
  *
- *   Copyright 2007 by Apple Inc.
+ *   Copyright 2007-2008 by Apple Inc.
  *   Copyright 1997-2007 by Easy Software Products, all rights reserved.
  *
  *   These coded instructions, statements, and computer programs are the
@@ -86,6 +86,7 @@
 typedef struct _mime_type_s		/**** MIME Type Data ****/
 {
   mime_magic_t	*rules;			/* Rules used to detect this type */
+  int		priority;		/* Priority of this type */
   char		super[MIME_MAX_SUPER],	/* Super-type name ("image", "application", etc.) */
 		type[MIME_MAX_TYPE];	/* Type name ("png", "postscript", etc.) */
 } mime_type_t;
@@ -112,9 +113,9 @@
 
 extern void		mimeDelete(mime_t *mime);
 extern mime_t		*mimeLoad(const char *pathname, const char *filterpath);
-extern mime_t		*mimeMerge(mime_t *mime, const char *pathname,
-			           const char *filterpath);
-extern mime_t		*mimeNew(void);
+extern mime_t		*mimeLoadFilters(mime_t *mime, const char *pathname,
+			                 const char *filterpath);
+extern mime_t		*mimeLoadTypes(mime_t *mime, const char *pathname);
 
 extern mime_type_t	*mimeAddType(mime_t *mime, const char *super,
 			             const char *type);
diff -urNad cups-1.3.11~/scheduler/type.c cups-1.3.11/scheduler/type.c
--- cups-1.3.11~/scheduler/type.c	2009-05-08 07:17:47.000000000 +0200
+++ cups-1.3.11/scheduler/type.c	2009-07-11 17:06:37.334027080 +0200
@@ -102,6 +102,7 @@
 
   strlcpy(temp->super, super, sizeof(temp->super));
   strcpy(temp->type, type);		/* Safe: temp->type is allocated */
+  temp->priority = 100;
 
   cupsArrayAdd(mime->types, temp);
 
@@ -156,7 +157,7 @@
   logic  = MIME_MAGIC_NOP;
   invert = 0;
 
-  DEBUG_printf(("%s/%s: %s\n", mt->super, mt->type, rule));
+  DEBUG_printf(("mimeAddTypeRule: %s/%s: %s\n", mt->super, mt->type, rule));
 
   while (*rule != '\0')
   {
@@ -165,13 +166,13 @@
 
     if (*rule == '(')
     {
-      DEBUG_puts("new parenthesis group");
+      DEBUG_puts("mimeAddTypeRule: New parenthesis group");
       logic = MIME_MAGIC_NOP;
       rule ++;
     }
     else if (*rule == ')')
     {
-      DEBUG_puts("close paren...");
+      DEBUG_puts("mimeAddTypeRule: Close paren...");
       if (current == NULL || current->parent == NULL)
         return (-1);
 
@@ -206,11 +207,12 @@
         current->prev   = NULL;
 	current->parent = temp;
 
-        DEBUG_printf(("creating new AND group %p...\n", temp));
+        DEBUG_printf(("mimeAddTypeRule: Creating new AND group %p...\n", temp));
       }
       else
       {
-        DEBUG_printf(("setting group %p op to AND...\n", current->parent));
+        DEBUG_printf(("mimeAddTypeRule: Setting group %p op to AND...\n",
+	              current->parent));
         current->parent->op = MIME_MAGIC_AND;
       }
 
@@ -236,7 +238,8 @@
 	  if ((temp = calloc(1, sizeof(mime_magic_t))) == NULL)
 	    return (-1);
 
-          DEBUG_printf(("creating new AND group %p inside OR group\n", temp));
+          DEBUG_printf(("mimeAddTypeRule: Creating new AND group %p inside OR "
+	                "group\n", temp));
 
           while (current->prev != NULL)
 	  {
@@ -256,7 +259,7 @@
 	  * This isn't the top rule, so go up one level...
 	  */
 
-          DEBUG_puts("going up one level");
+          DEBUG_puts("mimeAddTypeRule: Going up one level");
 	  current = current->parent;
 	}
       }
@@ -266,7 +269,7 @@
     }
     else if (*rule == '!')
     {
-      DEBUG_puts("NOT");
+      DEBUG_puts("mimeAddTypeRule: NOT");
       invert = 1;
       rule ++;
     }
@@ -394,6 +397,11 @@
 	  op = MIME_MAGIC_LOCALE;
 	else if (!strcmp(name, "contains"))
 	  op = MIME_MAGIC_CONTAINS;
+	else if (!strcmp(name, "priority") && num_values == 1)
+	{
+	  mt->priority = atoi(value[0]);
+	  continue;
+	}
 	else
 	  return (-1);
       }
@@ -432,7 +440,8 @@
         * Add parenthetical grouping...
 	*/
 
-        DEBUG_printf(("making new OR group %p for parenthesis...\n", temp));
+        DEBUG_printf(("mimeAddTypeRule: Making new OR group %p for "
+	              "parenthesis...\n", temp));
 
         temp->op = MIME_MAGIC_OR;
 
@@ -447,8 +456,8 @@
         logic = MIME_MAGIC_OR;
       }
 
-      DEBUG_printf(("adding %p: %s, op = %d, logic = %d, invert = %d\n",
-                    temp, name, op, logic, invert));
+      DEBUG_printf(("mimeAddTypeRule: adding %p: %s, op=%d, logic=%d, "
+                    "invert=%d\n", temp, name, op, logic, invert));
 
      /*
       * Fill in data for the rule...
@@ -531,14 +540,12 @@
 {
   _mime_filebuf_t	fb;		/* File buffer */
   const char		*base;		/* Base filename of file */
-  mime_type_t		*type;		/* File type */
+  mime_type_t		*type,		/* File type */
+			*best;		/* Best match */
 
 
   DEBUG_printf(("mimeFileType(mime=%p, pathname=\"%s\", filename=\"%s\", "
-                "compression=%p)\n",
-                mime, pathname ? pathname : "(nil)",
-		filename ? filename : "(nil)",
-		compression));
+                "compression=%p)\n", mime, pathname, filename, compression));
 
  /*
   * Range check input parameters...
@@ -577,11 +584,14 @@
   * Then check it against all known types...
   */
 
-  for (type = (mime_type_t *)cupsArrayFirst(mime->types);
+  for (type = (mime_type_t *)cupsArrayFirst(mime->types), best = NULL;
        type;
        type = (mime_type_t *)cupsArrayNext(mime->types))
     if (checkrules(base, &fb, type->rules))
-      break;
+    {
+      if (!best || type->priority > best->priority)
+        best = type;
+    }
 
  /*
   * Finally, close the file and return a match (if any)...
@@ -592,7 +602,7 @@
 
   cupsFileClose(fb.fp);
 
-  return (type);
+  return (best);
 }
 
 
@@ -792,7 +802,7 @@
 	  break;
 
       case MIME_MAGIC_STRING :
-          DEBUG_printf(("    string(%d, \"%s\")\n", rules->offset,
+          DEBUG_printf(("checkrules: string(%d, \"%s\")\n", rules->offset,
 	                rules->value.stringv));
 
          /*
@@ -811,7 +821,7 @@
 	                              sizeof(fb->buffer));
 	    fb->offset = rules->offset;
 
-            DEBUG_printf(("        loaded %d byte fb->buffer at %d, starts "
+            DEBUG_printf(("checkrules: loaded %d byte fb->buffer at %d, starts "
 	                  "with \"%c%c%c%c\"...\n",
 	                  fb->length, fb->offset, fb->buffer[0], fb->buffer[1],
 			  fb->buffer[2], fb->buffer[3]));
@@ -827,7 +837,7 @@
 	  else
             result = (memcmp(fb->buffer + rules->offset - fb->offset,
 	                     rules->value.stringv, rules->length) == 0);
-          DEBUG_printf(("    result=%d\n", result));
+          DEBUG_printf(("checkrules: result=%d\n", result));
 	  break;
 
       case MIME_MAGIC_ISTRING :
@@ -1028,8 +1038,8 @@
     * the the rule set is false...
     */
 
-    DEBUG_printf(("    result of test %p (MIME_MAGIC_%s) is %d\n", rules,
-                  debug_tests[rules->op], result));
+    DEBUG_printf(("checkrules: result of test %p (MIME_MAGIC_%s) is %d\n",
+                  rules, debug_tests[rules->op], result));
 
     if ((result && logic == MIME_MAGIC_OR) ||
         (!result && logic == MIME_MAGIC_AND))
