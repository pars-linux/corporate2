To: vim-dev@vim.org
Subject: Patch 7.2.180
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 7.2.180
Problem:    Some more compiler warnings when using gcc -Wextra.
Solution:   Add UNUSED and type casts.
Files:	    src/buffer.c, src/ex_cmds.c, src/macros.h, src/main.c,
	    src/menu.c, src/message.c, src/misc1.c, src/mbyte.c,
	    src/normal.c, src/option.c, src/os_unix.c, src/quickfix.c,
	    src/screen.c, src/search.c, src/spell.c, src/syntax.c, src/tag.c,
	    src/term.c, src/ui.c


*** ../vim-7.2.179/src/buffer.c	2009-05-14 22:19:19.000000000 +0200
--- src/buffer.c	2009-05-16 22:21:41.000000000 +0200
***************
*** 2025,2037 ****
   * Return fnum of the found buffer.
   * Return < 0 for error.
   */
- /*ARGSUSED*/
      int
  buflist_findpat(pattern, pattern_end, unlisted, diffmode)
      char_u	*pattern;
      char_u	*pattern_end;	/* pointer to first char after pattern */
      int		unlisted;	/* find unlisted buffers */
!     int		diffmode;	/* find diff-mode buffers only */
  {
      buf_T	*buf;
      regprog_T	*prog;
--- 2025,2036 ----
   * Return fnum of the found buffer.
   * Return < 0 for error.
   */
      int
  buflist_findpat(pattern, pattern_end, unlisted, diffmode)
      char_u	*pattern;
      char_u	*pattern_end;	/* pointer to first char after pattern */
      int		unlisted;	/* find unlisted buffers */
!     int		diffmode UNUSED; /* find diff-mode buffers only */
  {
      buf_T	*buf;
      regprog_T	*prog;
***************
*** 2539,2545 ****
  /*
   * List all know file names (for :files and :buffers command).
   */
- /*ARGSUSED*/
      void
  buflist_list(eap)
      exarg_T	*eap;
--- 2538,2543 ----
***************
*** 3346,3359 ****
   * If maxwidth is not zero, the string will be filled at any middle marker
   * or truncated if too long, fillchar is used for all whitespace.
   */
- /*ARGSUSED*/
      int
  build_stl_str_hl(wp, out, outlen, fmt, use_sandbox, fillchar, maxwidth, hltab, tabtab)
      win_T	*wp;
      char_u	*out;		/* buffer to write into != NameBuff */
      size_t	outlen;		/* length of out[] */
      char_u	*fmt;
!     int		use_sandbox;	/* "fmt" was set insecurely, use sandbox */
      int		fillchar;
      int		maxwidth;
      struct stl_hlrec *hltab;	/* return: HL attributes (can be NULL) */
--- 3344,3356 ----
   * If maxwidth is not zero, the string will be filled at any middle marker
   * or truncated if too long, fillchar is used for all whitespace.
   */
      int
  build_stl_str_hl(wp, out, outlen, fmt, use_sandbox, fillchar, maxwidth, hltab, tabtab)
      win_T	*wp;
      char_u	*out;		/* buffer to write into != NameBuff */
      size_t	outlen;		/* length of out[] */
      char_u	*fmt;
!     int		use_sandbox UNUSED; /* "fmt" was set insecurely, use sandbox */
      int		fillchar;
      int		maxwidth;
      struct stl_hlrec *hltab;	/* return: HL attributes (can be NULL) */
*** ../vim-7.2.179/src/ex_cmds.c	2009-05-16 16:36:25.000000000 +0200
--- src/ex_cmds.c	2009-05-16 22:22:46.000000000 +0200
***************
*** 2255,2266 ****
   *
   * Return the string in allocated memory (NULL when out of memory).
   */
- /*ARGSUSED*/
      char_u *
  viminfo_readstring(virp, off, convert)
      vir_T	*virp;
      int		off;		    /* offset for virp->vir_line */
!     int		convert;	    /* convert the string */
  {
      char_u	*retval;
      char_u	*s, *d;
--- 2255,2265 ----
   *
   * Return the string in allocated memory (NULL when out of memory).
   */
      char_u *
  viminfo_readstring(virp, off, convert)
      vir_T	*virp;
      int		off;		    /* offset for virp->vir_line */
!     int		convert UNUSED;	    /* convert the string */
  {
      char_u	*retval;
      char_u	*s, *d;
***************
*** 2736,2742 ****
   * May set eap->forceit if a dialog says it's OK to overwrite.
   * Return OK if it's OK, FAIL if it is not.
   */
- /*ARGSUSED*/
      static int
  check_overwrite(eap, buf, fname, ffname, other)
      exarg_T	*eap;
--- 2735,2740 ----
*** ../vim-7.2.179/src/macros.h	2009-02-21 20:27:00.000000000 +0100
--- src/macros.h	2009-05-16 21:52:56.000000000 +0200
***************
*** 284,290 ****
  # define mb_cptr2len(p)	    (enc_utf8 ? utf_ptr2len(p) : (*mb_ptr2len)(p))
  
  # define MB_COPY_CHAR(f, t) if (has_mbyte) mb_copy_char(&f, &t); else *t++ = *f++
! # define MB_CHARLEN(p)	    (has_mbyte ? mb_charlen(p) : STRLEN(p))
  # define PTR2CHAR(p)	    (has_mbyte ? mb_ptr2char(p) : (int)*(p))
  #else
  # define mb_ptr_adv(p)		++p
--- 284,290 ----
  # define mb_cptr2len(p)	    (enc_utf8 ? utf_ptr2len(p) : (*mb_ptr2len)(p))
  
  # define MB_COPY_CHAR(f, t) if (has_mbyte) mb_copy_char(&f, &t); else *t++ = *f++
! # define MB_CHARLEN(p)	    (has_mbyte ? mb_charlen(p) : (int)STRLEN(p))
  # define PTR2CHAR(p)	    (has_mbyte ? mb_ptr2char(p) : (int)*(p))
  #else
  # define mb_ptr_adv(p)		++p
*** ../vim-7.2.179/src/main.c	2008-11-28 21:26:50.000000000 +0100
--- src/main.c	2009-05-16 22:25:59.000000000 +0200
***************
*** 1505,1514 ****
   *
   * Also find the --server... arguments and --socketid and --windowid
   */
- /*ARGSUSED*/
      static void
  early_arg_scan(parmp)
!     mparm_T	*parmp;
  {
  #if defined(FEAT_XCLIPBOARD) || defined(FEAT_CLIENTSERVER) \
  	|| !defined(FEAT_NETBEANS_INTG)
--- 1505,1513 ----
   *
   * Also find the --server... arguments and --socketid and --windowid
   */
      static void
  early_arg_scan(parmp)
!     mparm_T	*parmp UNUSED;
  {
  #if defined(FEAT_XCLIPBOARD) || defined(FEAT_CLIENTSERVER) \
  	|| !defined(FEAT_NETBEANS_INTG)
***************
*** 2380,2389 ****
   * Create the requested number of windows and edit buffers in them.
   * Also does recovery if "recoverymode" set.
   */
- /*ARGSUSED*/
      static void
  create_windows(parmp)
!     mparm_T	*parmp;
  {
  #ifdef FEAT_WINDOWS
      int		dorewind;
--- 2379,2387 ----
   * Create the requested number of windows and edit buffers in them.
   * Also does recovery if "recoverymode" set.
   */
      static void
  create_windows(parmp)
!     mparm_T	*parmp UNUSED;
  {
  #ifdef FEAT_WINDOWS
      int		dorewind;
***************
*** 3851,3860 ****
   * return an allocated string.  Otherwise return "data".
   * "*tofree" is set to the result when it needs to be freed later.
   */
- /*ARGSUSED*/
      char_u *
  serverConvert(client_enc, data, tofree)
!     char_u *client_enc;
      char_u *data;
      char_u **tofree;
  {
--- 3849,3857 ----
   * return an allocated string.  Otherwise return "data".
   * "*tofree" is set to the result when it needs to be freed later.
   */
      char_u *
  serverConvert(client_enc, data, tofree)
!     char_u *client_enc UNUSED;
      char_u *data;
      char_u **tofree;
  {
*** ../vim-7.2.179/src/menu.c	2009-05-16 17:29:37.000000000 +0200
--- src/menu.c	2009-05-16 22:29:31.000000000 +0200
***************
*** 2340,2349 ****
   * This function is also defined without the +multi_lang feature, in which
   * case the commands are ignored.
   */
- /*ARGSUSED*/
      void
  ex_menutranslate(eap)
!     exarg_T	*eap;
  {
  #ifdef FEAT_MULTI_LANG
      char_u		*arg = eap->arg;
--- 2340,2348 ----
   * This function is also defined without the +multi_lang feature, in which
   * case the commands are ignored.
   */
      void
  ex_menutranslate(eap)
!     exarg_T	*eap UNUSED;
  {
  #ifdef FEAT_MULTI_LANG
      char_u		*arg = eap->arg;
*** ../vim-7.2.179/src/message.c	2009-04-22 14:42:26.000000000 +0200
--- src/message.c	2009-05-16 22:30:47.000000000 +0200
***************
*** 818,827 ****
  /*
   * ":messages" command.
   */
- /*ARGSUSED*/
      void
  ex_messages(eap)
!     exarg_T	*eap;
  {
      struct msg_hist *p;
      char_u	    *s;
--- 818,826 ----
  /*
   * ":messages" command.
   */
      void
  ex_messages(eap)
!     exarg_T	*eap UNUSED;
  {
      struct msg_hist *p;
      char_u	    *s;
***************
*** 3290,3304 ****
   * A '&' in a button name becomes a shortcut, so each '&' should be before a
   * different letter.
   */
- /* ARGSUSED */
      int
  do_dialog(type, title, message, buttons, dfltbutton, textfield)
!     int		type;
!     char_u	*title;
      char_u	*message;
      char_u	*buttons;
      int		dfltbutton;
!     char_u	*textfield;	/* IObuff for inputdialog(), NULL otherwise */
  {
      int		oldState;
      int		retval = 0;
--- 3289,3303 ----
   * A '&' in a button name becomes a shortcut, so each '&' should be before a
   * different letter.
   */
      int
  do_dialog(type, title, message, buttons, dfltbutton, textfield)
!     int		type UNUSED;
!     char_u	*title UNUSED;
      char_u	*message;
      char_u	*buttons;
      int		dfltbutton;
!     char_u	*textfield UNUSED;	/* IObuff for inputdialog(), NULL
! 					   otherwise */
  {
      int		oldState;
      int		retval = 0;
***************
*** 4021,4027 ****
  	if (*p != '%')
  	{
  	    char    *q = strchr(p + 1, '%');
! 	    size_t  n = (q == NULL) ? STRLEN(p) : (q - p);
  
  	    /* Copy up to the next '%' or NUL without any changes. */
  	    if (str_l < str_m)
--- 4020,4026 ----
  	if (*p != '%')
  	{
  	    char    *q = strchr(p + 1, '%');
! 	    size_t  n = (q == NULL) ? STRLEN(p) : (size_t)(q - p);
  
  	    /* Copy up to the next '%' or NUL without any changes. */
  	    if (str_l < str_m)
***************
*** 4268,4274 ****
  				  precision <= (size_t)0x7fffffffL ? precision
  						       : (size_t)0x7fffffffL);
  #endif
! 			str_arg_l = (q == NULL) ? precision : q - str_arg;
  		    }
  		    break;
  
--- 4267,4274 ----
  				  precision <= (size_t)0x7fffffffL ? precision
  						       : (size_t)0x7fffffffL);
  #endif
! 			str_arg_l = (q == NULL) ? precision
! 						      : (size_t)(q - str_arg);
  		    }
  		    break;
  
***************
*** 4368,4374 ****
  					    get_a_arg(arg_idx);
  #else
  # if defined(FEAT_EVAL)
! 					    tvs != NULL ? tv_nr(tvs, &arg_idx) :
  # endif
  						va_arg(ap, unsigned int);
  #endif
--- 4368,4375 ----
  					    get_a_arg(arg_idx);
  #else
  # if defined(FEAT_EVAL)
! 					    tvs != NULL ? (unsigned)
! 							tv_nr(tvs, &arg_idx) :
  # endif
  						va_arg(ap, unsigned int);
  #endif
***************
*** 4381,4387 ****
  					    get_a_arg(arg_idx);
  #else
  # if defined(FEAT_EVAL)
! 					    tvs != NULL ? tv_nr(tvs, &arg_idx) :
  # endif
  						va_arg(ap, unsigned long int);
  #endif
--- 4382,4389 ----
  					    get_a_arg(arg_idx);
  #else
  # if defined(FEAT_EVAL)
! 					    tvs != NULL ? (unsigned long)
! 							tv_nr(tvs, &arg_idx) :
  # endif
  						va_arg(ap, unsigned long int);
  #endif
***************
*** 4704,4710 ****
  			size_t avail = str_m - str_l;
  
  			vim_memset(str + str_l, zero_padding ? '0' : ' ',
! 					     (size_t)pn > avail ? avail : pn);
  		    }
  		    str_l += pn;
  		}
--- 4706,4713 ----
  			size_t avail = str_m - str_l;
  
  			vim_memset(str + str_l, zero_padding ? '0' : ' ',
! 					     (size_t)pn > avail ? avail
! 								: (size_t)pn);
  		    }
  		    str_l += pn;
  		}
***************
*** 4731,4737 ****
  			size_t avail = str_m - str_l;
  
  			mch_memmove(str + str_l, str_arg,
! 					     (size_t)zn > avail ? avail : zn);
  		    }
  		    str_l += zn;
  		}
--- 4734,4741 ----
  			size_t avail = str_m - str_l;
  
  			mch_memmove(str + str_l, str_arg,
! 					     (size_t)zn > avail ? avail
! 								: (size_t)zn);
  		    }
  		    str_l += zn;
  		}
***************
*** 4746,4752 ****
  			size_t avail = str_m-str_l;
  
  			vim_memset(str + str_l, '0',
! 					     (size_t)zn > avail ? avail : zn);
  		    }
  		    str_l += zn;
  		}
--- 4750,4757 ----
  			size_t avail = str_m-str_l;
  
  			vim_memset(str + str_l, '0',
! 					     (size_t)zn > avail ? avail
! 								: (size_t)zn);
  		    }
  		    str_l += zn;
  		}
***************
*** 4765,4771 ****
  
  			mch_memmove(str + str_l,
  				str_arg + zero_padding_insertion_ind,
! 				(size_t)sn > avail ? avail : sn);
  		    }
  		    str_l += sn;
  		}
--- 4770,4776 ----
  
  			mch_memmove(str + str_l,
  				str_arg + zero_padding_insertion_ind,
! 				(size_t)sn > avail ? avail : (size_t)sn);
  		    }
  		    str_l += sn;
  		}
***************
*** 4785,4791 ****
  			size_t avail = str_m - str_l;
  
  			vim_memset(str + str_l, ' ',
! 					     (size_t)pn > avail ? avail : pn);
  		    }
  		    str_l += pn;
  		}
--- 4790,4797 ----
  			size_t avail = str_m - str_l;
  
  			vim_memset(str + str_l, ' ',
! 					     (size_t)pn > avail ? avail
! 								: (size_t)pn);
  		    }
  		    str_l += pn;
  		}
*** ../vim-7.2.179/src/misc1.c	2009-05-15 21:31:11.000000000 +0200
--- src/misc1.c	2009-05-16 21:25:34.000000000 +0200
***************
*** 4147,4156 ****
  /*
   * Function given to ExpandGeneric() to obtain an environment variable name.
   */
- /*ARGSUSED*/
      char_u *
  get_env_name(xp, idx)
!     expand_T	*xp;
      int		idx;
  {
  # if defined(AMIGA) || defined(__MRC__) || defined(__SC__)
--- 4147,4155 ----
  /*
   * Function given to ExpandGeneric() to obtain an environment variable name.
   */
      char_u *
  get_env_name(xp, idx)
!     expand_T	*xp UNUSED;
      int		idx;
  {
  # if defined(AMIGA) || defined(__MRC__) || defined(__SC__)
***************
*** 4742,4750 ****
  	 * If it is then restrict the search to below this line and try again.
  	 */
  	line = ml_get(pos->lnum);
! 	for (p = line; *p && (unsigned)(p - line) < pos->col; ++p)
  	    p = skip_string(p);
! 	if ((unsigned)(p - line) <= pos->col)
  	    break;
  	cur_maxcomment = curwin->w_cursor.lnum - pos->lnum - 1;
  	if (cur_maxcomment <= 0)
--- 4741,4749 ----
  	 * If it is then restrict the search to below this line and try again.
  	 */
  	line = ml_get(pos->lnum);
! 	for (p = line; *p && (colnr_T)(p - line) < pos->col; ++p)
  	    p = skip_string(p);
! 	if ((colnr_T)(p - line) <= pos->col)
  	    break;
  	cur_maxcomment = curwin->w_cursor.lnum - pos->lnum - 1;
  	if (cur_maxcomment <= 0)
***************
*** 6275,6281 ****
       * check for that.
       */
      if ((State & INSERT)
! 	    && curwin->w_cursor.col < STRLEN(linecopy)
  	    && linecopy[curwin->w_cursor.col] == ')')
  	linecopy[curwin->w_cursor.col] = NUL;
  
--- 6274,6280 ----
       * check for that.
       */
      if ((State & INSERT)
! 	    && curwin->w_cursor.col < (colnr_T)STRLEN(linecopy)
  	    && linecopy[curwin->w_cursor.col] == ')')
  	linecopy[curwin->w_cursor.col] = NUL;
  
*** ../vim-7.2.179/src/mbyte.c	2008-11-28 21:26:50.000000000 +0100
--- src/mbyte.c	2009-05-16 22:29:02.000000000 +0200
***************
*** 1015,1024 ****
   * Return length in bytes of character "c".
   * Returns 1 for a single-byte character.
   */
- /* ARGSUSED */
      int
  latin_char2len(c)
!     int		c;
  {
      return 1;
  }
--- 1015,1023 ----
   * Return length in bytes of character "c".
   * Returns 1 for a single-byte character.
   */
      int
  latin_char2len(c)
!     int		c UNUSED;
  {
      return 1;
  }
***************
*** 1248,1257 ****
   * Return the number of display cells character at "*p" occupies.
   * This doesn't take care of unprintable characters, use ptr2cells() for that.
   */
- /*ARGSUSED*/
      int
  latin_ptr2cells(p)
!     char_u	*p;
  {
      return 1;
  }
--- 1247,1255 ----
   * Return the number of display cells character at "*p" occupies.
   * This doesn't take care of unprintable characters, use ptr2cells() for that.
   */
      int
  latin_ptr2cells(p)
!     char_u	*p UNUSED;
  {
      return 1;
  }
***************
*** 1293,1302 ****
   * Return the number of display cells character "c" occupies.
   * Only takes care of multi-byte chars, not "^C" and such.
   */
- /*ARGSUSED*/
      int
  latin_char2cells(c)
!     int		c;
  {
      return 1;
  }
--- 1291,1299 ----
   * Return the number of display cells character "c" occupies.
   * Only takes care of multi-byte chars, not "^C" and such.
   */
      int
  latin_char2cells(c)
!     int		c UNUSED;
  {
      return 1;
  }
***************
*** 1318,1328 ****
   * Return number of display cells for char at ScreenLines[off].
   * We make sure that the offset used is less than "max_off".
   */
- /*ARGSUSED*/
      int
  latin_off2cells(off, max_off)
!     unsigned	off;
!     unsigned	max_off;
  {
      return 1;
  }
--- 1315,1324 ----
   * Return number of display cells for char at ScreenLines[off].
   * We make sure that the offset used is less than "max_off".
   */
      int
  latin_off2cells(off, max_off)
!     unsigned	off UNUSED;
!     unsigned	max_off UNUSED;
  {
      return 1;
  }
***************
*** 2419,2429 ****
   * Return offset from "p" to the first byte of the character it points into.
   * Returns 0 when already at the first byte of a character.
   */
- /*ARGSUSED*/
      int
  latin_head_off(base, p)
!     char_u	*base;
!     char_u	*p;
  {
      return 0;
  }
--- 2415,2424 ----
   * Return offset from "p" to the first byte of the character it points into.
   * Returns 0 when already at the first byte of a character.
   */
      int
  latin_head_off(base, p)
!     char_u	*base UNUSED;
!     char_u	*p UNUSED;
  {
      return 0;
  }
***************
*** 3131,3137 ****
  	else
  	    s = p + 1;
      }
!     for (i = 0; s[i] != NUL && i < sizeof(buf) - 1; ++i)
      {
  	if (s[i] == '_' || s[i] == '-')
  	    buf[i] = '-';
--- 3126,3132 ----
  	else
  	    s = p + 1;
      }
!     for (i = 0; s[i] != NUL && i < (int)sizeof(buf) - 1; ++i)
      {
  	if (s[i] == '_' || s[i] == '-')
  	    buf[i] = '-';
***************
*** 3582,3590 ****
   * Callback invoked when the user finished preediting.
   * Put the final string into the input buffer.
   */
- /*ARGSUSED0*/
      static void
! im_commit_cb(GtkIMContext *context, const gchar *str, gpointer data)
  {
      int	slen = (int)STRLEN(str);
      int	add_to_input = TRUE;
--- 3577,3586 ----
   * Callback invoked when the user finished preediting.
   * Put the final string into the input buffer.
   */
      static void
! im_commit_cb(GtkIMContext *context UNUSED,
! 	     const gchar *str,
! 	     gpointer data UNUSED)
  {
      int	slen = (int)STRLEN(str);
      int	add_to_input = TRUE;
***************
*** 3670,3678 ****
  /*
   * Callback invoked after start to the preedit.
   */
- /*ARGSUSED*/
      static void
! im_preedit_start_cb(GtkIMContext *context, gpointer data)
  {
  #ifdef XIM_DEBUG
      xim_log("im_preedit_start_cb()\n");
--- 3666,3673 ----
  /*
   * Callback invoked after start to the preedit.
   */
      static void
! im_preedit_start_cb(GtkIMContext *context UNUSED, gpointer data UNUSED)
  {
  #ifdef XIM_DEBUG
      xim_log("im_preedit_start_cb()\n");
***************
*** 3687,3695 ****
  /*
   * Callback invoked after end to the preedit.
   */
- /*ARGSUSED*/
      static void
! im_preedit_end_cb(GtkIMContext *context, gpointer data)
  {
  #ifdef XIM_DEBUG
      xim_log("im_preedit_end_cb()\n");
--- 3682,3689 ----
  /*
   * Callback invoked after end to the preedit.
   */
      static void
! im_preedit_end_cb(GtkIMContext *context UNUSED, gpointer data UNUSED)
  {
  #ifdef XIM_DEBUG
      xim_log("im_preedit_end_cb()\n");
***************
*** 3748,3756 ****
   * remaining input from within the "retrieve_surrounding" signal handler, this
   * might not be necessary.  Gotta ask on vim-dev for opinions.
   */
- /*ARGSUSED1*/
      static void
! im_preedit_changed_cb(GtkIMContext *context, gpointer data)
  {
      char    *preedit_string = NULL;
      int	    cursor_index    = 0;
--- 3742,3749 ----
   * remaining input from within the "retrieve_surrounding" signal handler, this
   * might not be necessary.  Gotta ask on vim-dev for opinions.
   */
      static void
! im_preedit_changed_cb(GtkIMContext *context, gpointer data UNUSED)
  {
      char    *preedit_string = NULL;
      int	    cursor_index    = 0;
***************
*** 4616,4626 ****
      }
  }
  
- /*ARGSUSED*/
      void
  im_set_position(row, col)
!     int		row;
!     int		col;
  {
      xim_set_preedit();
  }
--- 4609,4618 ----
      }
  }
  
      void
  im_set_position(row, col)
!     int		row UNUSED;
!     int		col UNUSED;
  {
      xim_set_preedit();
  }
***************
*** 4927,4938 ****
  static void xim_instantiate_cb __ARGS((Display *display, XPointer client_data, XPointer	call_data));
  static void xim_destroy_cb __ARGS((XIM im, XPointer client_data, XPointer call_data));
  
- /*ARGSUSED*/
      static void
  xim_instantiate_cb(display, client_data, call_data)
      Display	*display;
!     XPointer	client_data;
!     XPointer	call_data;
  {
      Window	x11_window;
      Display	*x11_display;
--- 4919,4929 ----
  static void xim_instantiate_cb __ARGS((Display *display, XPointer client_data, XPointer	call_data));
  static void xim_destroy_cb __ARGS((XIM im, XPointer client_data, XPointer call_data));
  
      static void
  xim_instantiate_cb(display, client_data, call_data)
      Display	*display;
!     XPointer	client_data UNUSED;
!     XPointer	call_data UNUSED;
  {
      Window	x11_window;
      Display	*x11_display;
***************
*** 4952,4963 ****
  					 xim_instantiate_cb, NULL);
  }
  
- /*ARGSUSED*/
      static void
  xim_destroy_cb(im, client_data, call_data)
!     XIM		im;
!     XPointer	client_data;
!     XPointer	call_data;
  {
      Window	x11_window;
      Display	*x11_display;
--- 4943,4953 ----
  					 xim_instantiate_cb, NULL);
  }
  
      static void
  xim_destroy_cb(im, client_data, call_data)
!     XIM		im UNUSED;
!     XPointer	client_data UNUSED;
!     XPointer	call_data UNUSED;
  {
      Window	x11_window;
      Display	*x11_display;
***************
*** 5276,5284 ****
      }
  }
  
- /*ARGSUSED*/
      static void
! preedit_start_cbproc(XIC thexic, XPointer client_data, XPointer call_data)
  {
  #ifdef XIM_DEBUG
      xim_log("xim_decide_input_style()\n");
--- 5266,5275 ----
      }
  }
  
      static void
! preedit_start_cbproc(XIC thexic UNUSED,
! 	             XPointer client_data UNUSED,
! 		     XPointer call_data UNUSED)
  {
  #ifdef XIM_DEBUG
      xim_log("xim_decide_input_style()\n");
***************
*** 5310,5318 ****
  static GSList *key_press_event_queue = NULL;
  static gboolean processing_queued_event = FALSE;
  
- /*ARGSUSED*/
      static void
! preedit_draw_cbproc(XIC thexic, XPointer client_data, XPointer call_data)
  {
      XIMPreeditDrawCallbackStruct *draw_data;
      XIMText	*text;
--- 5301,5310 ----
  static GSList *key_press_event_queue = NULL;
  static gboolean processing_queued_event = FALSE;
  
      static void
! preedit_draw_cbproc(XIC thexic UNUSED,
! 		    XPointer client_data UNUSED,
! 		    XPointer call_data)
  {
      XIMPreeditDrawCallbackStruct *draw_data;
      XIMText	*text;
***************
*** 5451,5468 ****
      return -1;
  }
  
- /*ARGSUSED*/
      static void
! preedit_caret_cbproc(XIC thexic, XPointer client_data, XPointer call_data)
  {
  #ifdef XIM_DEBUG
      xim_log("preedit_caret_cbproc()\n");
  #endif
  }
  
- /*ARGSUSED*/
      static void
! preedit_done_cbproc(XIC thexic, XPointer client_data, XPointer call_data)
  {
  #ifdef XIM_DEBUG
      xim_log("preedit_done_cbproc()\n");
--- 5443,5462 ----
      return -1;
  }
  
      static void
! preedit_caret_cbproc(XIC thexic UNUSED,
! 		     XPointer client_data UNUSED,
! 		     XPointer call_data UNUSED)
  {
  #ifdef XIM_DEBUG
      xim_log("preedit_caret_cbproc()\n");
  #endif
  }
  
      static void
! preedit_done_cbproc(XIC thexic UNUSED,
! 		    XPointer client_data UNUSED,
! 		    XPointer call_data UNUSED)
  {
  #ifdef XIM_DEBUG
      xim_log("preedit_done_cbproc()\n");
***************
*** 5501,5509 ****
      }
  }
  
- /*ARGSUSED*/
      int
! xim_queue_key_press_event(GdkEventKey *event, int down)
  {
  #ifdef XIM_DEBUG
      xim_log("xim_queue_key_press_event()\n");
--- 5495,5502 ----
      }
  }
  
      int
! xim_queue_key_press_event(GdkEventKey *event, int down UNUSED)
  {
  #ifdef XIM_DEBUG
      xim_log("xim_queue_key_press_event()\n");
***************
*** 5519,5527 ****
      return TRUE;
  }
  
- /*ARGSUSED*/
      static void
! preedit_callback_setup(GdkIC *ic)
  {
      XIC xxic;
      XVaNestedList preedit_attr;
--- 5512,5519 ----
      return TRUE;
  }
  
      static void
! preedit_callback_setup(GdkIC *ic UNUSED)
  {
      XIC xxic;
      XVaNestedList preedit_attr;
***************
*** 5546,5554 ****
      XFree(preedit_attr);
  }
  
- /*ARGSUSED*/
      static void
! reset_state_setup(GdkIC *ic)
  {
  #ifdef USE_X11R6_XIM
      /* don't change the input context when we call reset */
--- 5538,5545 ----
      XFree(preedit_attr);
  }
  
      static void
! reset_state_setup(GdkIC *ic UNUSED)
  {
  #ifdef USE_X11R6_XIM
      /* don't change the input context when we call reset */
*** ../vim-7.2.179/src/normal.c	2009-05-15 21:31:11.000000000 +0200
--- src/normal.c	2009-05-16 22:31:10.000000000 +0200
***************
*** 9243,9252 ****
  }
  
  #ifdef FEAT_SNIFF
- /*ARGSUSED*/
      static void
  nv_sniff(cap)
!     cmdarg_T	*cap;
  {
      ProcessSniffRequests();
  }
--- 9243,9251 ----
  }
  
  #ifdef FEAT_SNIFF
      static void
  nv_sniff(cap)
!     cmdarg_T	*cap UNUSED;
  {
      ProcessSniffRequests();
  }
***************
*** 9262,9271 ****
  #endif
  
  #ifdef FEAT_DND
- /*ARGSUSED*/
      static void
  nv_drop(cap)
!     cmdarg_T	*cap;
  {
      do_put('~', BACKWARD, 1L, PUT_CURSEND);
  }
--- 9261,9269 ----
  #endif
  
  #ifdef FEAT_DND
      static void
  nv_drop(cap)
!     cmdarg_T	*cap UNUSED;
  {
      do_put('~', BACKWARD, 1L, PUT_CURSEND);
  }
***************
*** 9277,9283 ****
   * When waiting for a character for 'updatetime' K_CURSORHOLD is put in the
   * input buffer.  "did_cursorhold" is set to avoid retriggering.
   */
- /*ARGSUSED*/
      static void
  nv_cursorhold(cap)
      cmdarg_T	*cap;
--- 9275,9280 ----
*** ../vim-7.2.179/src/option.c	2009-05-15 21:31:11.000000000 +0200
--- src/option.c	2009-05-17 12:13:52.000000000 +0200
***************
*** 387,392 ****
--- 387,395 ----
      char_u	*def_val[2];	/* default values for variable (vi and vim) */
  #ifdef FEAT_EVAL
      scid_T	scriptID;	/* script in which the option was last set */
+ # define SCRIPTID_INIT , 0
+ #else
+ # define SCRIPTID_INIT
  #endif
  };
  
***************
*** 477,483 ****
  #else
  			    (char_u *)224L,
  #endif
! 					    (char_u *)0L}},
      {"antialias",   "anti", P_BOOL|P_VI_DEF|P_VIM|P_RCLR,
  #if defined(FEAT_GUI) && defined(MACOS_X)
  			    (char_u *)&p_antialias, PV_NONE,
--- 480,486 ----
  #else
  			    (char_u *)224L,
  #endif
! 					    (char_u *)0L} SCRIPTID_INIT},
      {"antialias",   "anti", P_BOOL|P_VI_DEF|P_VIM|P_RCLR,
  #if defined(FEAT_GUI) && defined(MACOS_X)
  			    (char_u *)&p_antialias, PV_NONE,
***************
*** 486,520 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)FALSE, (char_u *)FALSE}
  #endif
! 			    },
      {"arabic",	    "arab", P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_ARABIC
  			    (char_u *)VAR_WIN, PV_ARAB,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"arabicshape", "arshape", P_BOOL|P_VI_DEF|P_VIM|P_RCLR,
  #ifdef FEAT_ARABIC
  			    (char_u *)&p_arshape, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"allowrevins", "ari",  P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_RIGHTLEFT
  			    (char_u *)&p_ari, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"altkeymap",   "akm",  P_BOOL|P_VI_DEF,
  #ifdef FEAT_FKMAP
  			    (char_u *)&p_altkeymap, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"ambiwidth",  "ambw",  P_STRING|P_VI_DEF|P_RCLR,
  #if defined(FEAT_MBYTE)
  			    (char_u *)&p_ambw, PV_NONE,
--- 489,523 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)FALSE, (char_u *)FALSE}
  #endif
! 			    SCRIPTID_INIT},
      {"arabic",	    "arab", P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_ARABIC
  			    (char_u *)VAR_WIN, PV_ARAB,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"arabicshape", "arshape", P_BOOL|P_VI_DEF|P_VIM|P_RCLR,
  #ifdef FEAT_ARABIC
  			    (char_u *)&p_arshape, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"allowrevins", "ari",  P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_RIGHTLEFT
  			    (char_u *)&p_ari, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"altkeymap",   "akm",  P_BOOL|P_VI_DEF,
  #ifdef FEAT_FKMAP
  			    (char_u *)&p_altkeymap, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"ambiwidth",  "ambw",  P_STRING|P_VI_DEF|P_RCLR,
  #if defined(FEAT_MBYTE)
  			    (char_u *)&p_ambw, PV_NONE,
***************
*** 523,549 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
  #ifdef FEAT_AUTOCHDIR
      {"autochdir",  "acd",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_acd, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
  #endif
      {"autoindent",  "ai",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_ai, PV_AI,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"autoprint",   "ap",   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"autoread",    "ar",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_ar, PV_AR,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"autowrite",   "aw",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_aw, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"autowriteall","awa",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_awa, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"background",  "bg",   P_STRING|P_VI_DEF|P_RCLR,
  			    (char_u *)&p_bg, PV_NONE,
  			    {
--- 526,552 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
  #ifdef FEAT_AUTOCHDIR
      {"autochdir",  "acd",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_acd, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
  #endif
      {"autoindent",  "ai",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_ai, PV_AI,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"autoprint",   "ap",   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"autoread",    "ar",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_ar, PV_AR,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"autowrite",   "aw",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_aw, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"autowriteall","awa",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_awa, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"background",  "bg",   P_STRING|P_VI_DEF|P_RCLR,
  			    (char_u *)&p_bg, PV_NONE,
  			    {
***************
*** 552,564 ****
  #else
  			    (char_u *)"light",
  #endif
! 					    (char_u *)0L}},
      {"backspace",   "bs",   P_STRING|P_VI_DEF|P_VIM|P_COMMA|P_NODUP,
  			    (char_u *)&p_bs, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L}},
      {"backup",	    "bk",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_bk, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"backupcopy",  "bkc",  P_STRING|P_VIM|P_COMMA|P_NODUP,
  			    (char_u *)&p_bkc, PV_NONE,
  #ifdef UNIX
--- 555,567 ----
  #else
  			    (char_u *)"light",
  #endif
! 					    (char_u *)0L} SCRIPTID_INIT},
      {"backspace",   "bs",   P_STRING|P_VI_DEF|P_VIM|P_COMMA|P_NODUP,
  			    (char_u *)&p_bs, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"backup",	    "bk",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_bk, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"backupcopy",  "bkc",  P_STRING|P_VIM|P_COMMA|P_NODUP,
  			    (char_u *)&p_bkc, PV_NONE,
  #ifdef UNIX
***************
*** 566,575 ****
  #else
  			    {(char_u *)"auto", (char_u *)"auto"}
  #endif
! 			    },
      {"backupdir",   "bdir", P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP|P_SECURE,
  			    (char_u *)&p_bdir, PV_NONE,
! 			    {(char_u *)DFLT_BDIR, (char_u *)0L}},
      {"backupext",   "bex",  P_STRING|P_VI_DEF|P_NFNAME,
  			    (char_u *)&p_bex, PV_NONE,
  			    {
--- 569,578 ----
  #else
  			    {(char_u *)"auto", (char_u *)"auto"}
  #endif
! 			    SCRIPTID_INIT},
      {"backupdir",   "bdir", P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP|P_SECURE,
  			    (char_u *)&p_bdir, PV_NONE,
! 			    {(char_u *)DFLT_BDIR, (char_u *)0L} SCRIPTID_INIT},
      {"backupext",   "bex",  P_STRING|P_VI_DEF|P_NFNAME,
  			    (char_u *)&p_bex, PV_NONE,
  			    {
***************
*** 578,584 ****
  #else
  			    (char_u *)"~",
  #endif
! 					    (char_u *)0L}},
      {"backupskip",  "bsk",  P_STRING|P_VI_DEF|P_COMMA,
  #ifdef FEAT_WILDIGN
  			    (char_u *)&p_bsk, PV_NONE,
--- 581,587 ----
  #else
  			    (char_u *)"~",
  #endif
! 					    (char_u *)0L} SCRIPTID_INIT},
      {"backupskip",  "bsk",  P_STRING|P_VI_DEF|P_COMMA,
  #ifdef FEAT_WILDIGN
  			    (char_u *)&p_bsk, PV_NONE,
***************
*** 587,626 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
  #ifdef FEAT_BEVAL
      {"balloondelay","bdlay",P_NUM|P_VI_DEF,
  			    (char_u *)&p_bdlay, PV_NONE,
! 			    {(char_u *)600L, (char_u *)0L}},
      {"ballooneval", "beval",P_BOOL|P_VI_DEF|P_NO_MKRC,
  			    (char_u *)&p_beval, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
  # ifdef FEAT_EVAL
      {"balloonexpr", "bexpr", P_STRING|P_ALLOCED|P_VI_DEF|P_VIM,
  			    (char_u *)&p_bexpr, PV_BEXPR,
! 			    {(char_u *)"", (char_u *)0L}},
  # endif
  #endif
      {"beautify",    "bf",   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"binary",	    "bin",  P_BOOL|P_VI_DEF|P_RSTAT,
  			    (char_u *)&p_bin, PV_BIN,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"bioskey",	    "biosk",P_BOOL|P_VI_DEF,
  #ifdef MSDOS
  			    (char_u *)&p_biosk, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"bomb",	    NULL,   P_BOOL|P_NO_MKRC|P_VI_DEF|P_RSTAT,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_bomb, PV_BOMB,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"breakat",	    "brk",  P_STRING|P_VI_DEF|P_RALL|P_FLAGLIST,
  #ifdef FEAT_LINEBREAK
  			    (char_u *)&p_breakat, PV_NONE,
--- 590,629 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
  #ifdef FEAT_BEVAL
      {"balloondelay","bdlay",P_NUM|P_VI_DEF,
  			    (char_u *)&p_bdlay, PV_NONE,
! 			    {(char_u *)600L, (char_u *)0L} SCRIPTID_INIT},
      {"ballooneval", "beval",P_BOOL|P_VI_DEF|P_NO_MKRC,
  			    (char_u *)&p_beval, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
  # ifdef FEAT_EVAL
      {"balloonexpr", "bexpr", P_STRING|P_ALLOCED|P_VI_DEF|P_VIM,
  			    (char_u *)&p_bexpr, PV_BEXPR,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
  # endif
  #endif
      {"beautify",    "bf",   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"binary",	    "bin",  P_BOOL|P_VI_DEF|P_RSTAT,
  			    (char_u *)&p_bin, PV_BIN,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"bioskey",	    "biosk",P_BOOL|P_VI_DEF,
  #ifdef MSDOS
  			    (char_u *)&p_biosk, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"bomb",	    NULL,   P_BOOL|P_NO_MKRC|P_VI_DEF|P_RSTAT,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_bomb, PV_BOMB,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"breakat",	    "brk",  P_STRING|P_VI_DEF|P_RALL|P_FLAGLIST,
  #ifdef FEAT_LINEBREAK
  			    (char_u *)&p_breakat, PV_NONE,
***************
*** 629,635 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"browsedir",   "bsdir",P_STRING|P_VI_DEF,
  #ifdef FEAT_BROWSE
  			    (char_u *)&p_bsdir, PV_NONE,
--- 632,638 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"browsedir",   "bsdir",P_STRING|P_VI_DEF,
  #ifdef FEAT_BROWSE
  			    (char_u *)&p_bsdir, PV_NONE,
***************
*** 638,644 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"bufhidden",   "bh",   P_STRING|P_ALLOCED|P_VI_DEF|P_NOGLOB,
  #if defined(FEAT_QUICKFIX)
  			    (char_u *)&p_bh, PV_BH,
--- 641,647 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"bufhidden",   "bh",   P_STRING|P_ALLOCED|P_VI_DEF|P_NOGLOB,
  #if defined(FEAT_QUICKFIX)
  			    (char_u *)&p_bh, PV_BH,
***************
*** 647,657 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"buflisted",   "bl",   P_BOOL|P_VI_DEF|P_NOGLOB,
  			    (char_u *)&p_bl, PV_BL,
  			    {(char_u *)1L, (char_u *)0L}
! 			    },
      {"buftype",	    "bt",   P_STRING|P_ALLOCED|P_VI_DEF|P_NOGLOB,
  #if defined(FEAT_QUICKFIX)
  			    (char_u *)&p_bt, PV_BT,
--- 650,660 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"buflisted",   "bl",   P_BOOL|P_VI_DEF|P_NOGLOB,
  			    (char_u *)&p_bl, PV_BL,
  			    {(char_u *)1L, (char_u *)0L}
! 			    SCRIPTID_INIT},
      {"buftype",	    "bt",   P_STRING|P_ALLOCED|P_VI_DEF|P_NOGLOB,
  #if defined(FEAT_QUICKFIX)
  			    (char_u *)&p_bt, PV_BT,
***************
*** 660,666 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"casemap",	    "cmp",   P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_cmp, PV_NONE,
--- 663,669 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"casemap",	    "cmp",   P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_cmp, PV_NONE,
***************
*** 669,675 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"cdpath",	    "cd",   P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_SEARCHPATH
  			    (char_u *)&p_cdpath, PV_NONE,
--- 672,678 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"cdpath",	    "cd",   P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_SEARCHPATH
  			    (char_u *)&p_cdpath, PV_NONE,
***************
*** 678,684 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"cedit",	    NULL,   P_STRING,
  #ifdef FEAT_CMDWIN
  			    (char_u *)&p_cedit, PV_NONE,
--- 681,687 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"cedit",	    NULL,   P_STRING,
  #ifdef FEAT_CMDWIN
  			    (char_u *)&p_cedit, PV_NONE,
***************
*** 687,693 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"charconvert",  "ccv", P_STRING|P_VI_DEF|P_SECURE,
  #if defined(FEAT_MBYTE) && defined(FEAT_EVAL)
  			    (char_u *)&p_ccv, PV_NONE,
--- 690,696 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"charconvert",  "ccv", P_STRING|P_VI_DEF|P_SECURE,
  #if defined(FEAT_MBYTE) && defined(FEAT_EVAL)
  			    (char_u *)&p_ccv, PV_NONE,
***************
*** 696,709 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"cindent",	    "cin",  P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_CINDENT
  			    (char_u *)&p_cin, PV_CIN,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"cinkeys",	    "cink", P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_CINDENT
  			    (char_u *)&p_cink, PV_CINK,
--- 699,712 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"cindent",	    "cin",  P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_CINDENT
  			    (char_u *)&p_cin, PV_CIN,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"cinkeys",	    "cink", P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_CINDENT
  			    (char_u *)&p_cink, PV_CINK,
***************
*** 712,725 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"cinoptions",  "cino", P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_CINDENT
  			    (char_u *)&p_cino, PV_CINO,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"cinwords",    "cinw", P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  #if defined(FEAT_SMARTINDENT) || defined(FEAT_CINDENT)
  			    (char_u *)&p_cinw, PV_CINW,
--- 715,728 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"cinoptions",  "cino", P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_CINDENT
  			    (char_u *)&p_cino, PV_CINO,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"cinwords",    "cinw", P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  #if defined(FEAT_SMARTINDENT) || defined(FEAT_CINDENT)
  			    (char_u *)&p_cinw, PV_CINW,
***************
*** 729,735 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"clipboard",   "cb",   P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_CLIPBOARD
  			    (char_u *)&p_cb, PV_NONE,
--- 732,738 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"clipboard",   "cb",   P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_CLIPBOARD
  			    (char_u *)&p_cb, PV_NONE,
***************
*** 743,762 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)"", (char_u *)0L}
  #endif
! 			    },
      {"cmdheight",   "ch",   P_NUM|P_VI_DEF|P_RALL,
  			    (char_u *)&p_ch, PV_NONE,
! 			    {(char_u *)1L, (char_u *)0L}},
      {"cmdwinheight", "cwh", P_NUM|P_VI_DEF,
  #ifdef FEAT_CMDWIN
  			    (char_u *)&p_cwh, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)7L, (char_u *)0L}},
      {"columns",	    "co",   P_NUM|P_NODEFAULT|P_NO_MKRC|P_VI_DEF|P_RCLR,
  			    (char_u *)&Columns, PV_NONE,
! 			    {(char_u *)80L, (char_u *)0L}},
      {"comments",    "com",  P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_COMMENTS
  			    (char_u *)&p_com, PV_COM,
--- 746,765 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)"", (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"cmdheight",   "ch",   P_NUM|P_VI_DEF|P_RALL,
  			    (char_u *)&p_ch, PV_NONE,
! 			    {(char_u *)1L, (char_u *)0L} SCRIPTID_INIT},
      {"cmdwinheight", "cwh", P_NUM|P_VI_DEF,
  #ifdef FEAT_CMDWIN
  			    (char_u *)&p_cwh, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)7L, (char_u *)0L} SCRIPTID_INIT},
      {"columns",	    "co",   P_NUM|P_NODEFAULT|P_NO_MKRC|P_VI_DEF|P_RCLR,
  			    (char_u *)&Columns, PV_NONE,
! 			    {(char_u *)80L, (char_u *)0L} SCRIPTID_INIT},
      {"comments",    "com",  P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_COMMENTS
  			    (char_u *)&p_com, PV_COM,
***************
*** 766,772 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"commentstring", "cms", P_STRING|P_ALLOCED|P_VI_DEF,
  #ifdef FEAT_FOLDING
  			    (char_u *)&p_cms, PV_CMS,
--- 769,775 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"commentstring", "cms", P_STRING|P_ALLOCED|P_VI_DEF,
  #ifdef FEAT_FOLDING
  			    (char_u *)&p_cms, PV_CMS,
***************
*** 775,786 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
  			    /* P_PRI_MKRC isn't needed here, optval_default()
  			     * always returns TRUE for 'compatible' */
      {"compatible",  "cp",   P_BOOL|P_RALL,
  			    (char_u *)&p_cp, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)FALSE}},
      {"complete",    "cpt",  P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_INS_EXPAND
  			    (char_u *)&p_cpt, PV_CPT,
--- 778,789 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
  			    /* P_PRI_MKRC isn't needed here, optval_default()
  			     * always returns TRUE for 'compatible' */
      {"compatible",  "cp",   P_BOOL|P_RALL,
  			    (char_u *)&p_cp, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)FALSE} SCRIPTID_INIT},
      {"complete",    "cpt",  P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_INS_EXPAND
  			    (char_u *)&p_cpt, PV_CPT,
***************
*** 789,795 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"completefunc", "cfu", P_STRING|P_ALLOCED|P_VI_DEF|P_SECURE,
  #ifdef FEAT_COMPL_FUNC
  			    (char_u *)&p_cfu, PV_CFU,
--- 792,798 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"completefunc", "cfu", P_STRING|P_ALLOCED|P_VI_DEF|P_SECURE,
  #ifdef FEAT_COMPL_FUNC
  			    (char_u *)&p_cfu, PV_CFU,
***************
*** 798,804 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"completeopt",   "cot",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_INS_EXPAND
  			    (char_u *)&p_cot, PV_NONE,
--- 801,807 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"completeopt",   "cot",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_INS_EXPAND
  			    (char_u *)&p_cot, PV_NONE,
***************
*** 807,840 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"confirm",     "cf",   P_BOOL|P_VI_DEF,
  #if defined(FEAT_GUI_DIALOG) || defined(FEAT_CON_DIALOG)
  			    (char_u *)&p_confirm, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"conskey",	    "consk",P_BOOL|P_VI_DEF,
  #ifdef MSDOS
  			    (char_u *)&p_consk, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"copyindent",  "ci",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_ci, PV_CI,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"cpoptions",   "cpo",  P_STRING|P_VIM|P_RALL|P_FLAGLIST,
  			    (char_u *)&p_cpo, PV_NONE,
! 			    {(char_u *)CPO_VI, (char_u *)CPO_VIM}},
      {"cscopepathcomp", "cspc", P_NUM|P_VI_DEF|P_VIM,
  #ifdef FEAT_CSCOPE
  			    (char_u *)&p_cspc, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)0L, (char_u *)0L}},
      {"cscopeprg",   "csprg", P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  #ifdef FEAT_CSCOPE
  			    (char_u *)&p_csprg, PV_NONE,
--- 810,844 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"confirm",     "cf",   P_BOOL|P_VI_DEF,
  #if defined(FEAT_GUI_DIALOG) || defined(FEAT_CON_DIALOG)
  			    (char_u *)&p_confirm, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"conskey",	    "consk",P_BOOL|P_VI_DEF,
  #ifdef MSDOS
  			    (char_u *)&p_consk, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"copyindent",  "ci",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_ci, PV_CI,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"cpoptions",   "cpo",  P_STRING|P_VIM|P_RALL|P_FLAGLIST,
  			    (char_u *)&p_cpo, PV_NONE,
! 			    {(char_u *)CPO_VI, (char_u *)CPO_VIM}
! 			    SCRIPTID_INIT},
      {"cscopepathcomp", "cspc", P_NUM|P_VI_DEF|P_VIM,
  #ifdef FEAT_CSCOPE
  			    (char_u *)&p_cspc, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"cscopeprg",   "csprg", P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  #ifdef FEAT_CSCOPE
  			    (char_u *)&p_csprg, PV_NONE,
***************
*** 843,849 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"cscopequickfix", "csqf", P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #if defined(FEAT_CSCOPE) && defined(FEAT_QUICKFIX)
  			    (char_u *)&p_csqf, PV_NONE,
--- 847,853 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"cscopequickfix", "csqf", P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #if defined(FEAT_CSCOPE) && defined(FEAT_QUICKFIX)
  			    (char_u *)&p_csqf, PV_NONE,
***************
*** 852,896 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"cscopetag",   "cst",  P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_CSCOPE
  			    (char_u *)&p_cst, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)0L, (char_u *)0L}},
      {"cscopetagorder", "csto", P_NUM|P_VI_DEF|P_VIM,
  #ifdef FEAT_CSCOPE
  			    (char_u *)&p_csto, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)0L, (char_u *)0L}},
      {"cscopeverbose", "csverb", P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_CSCOPE
  			    (char_u *)&p_csverbose, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)0L, (char_u *)0L}},
      {"cursorcolumn", "cuc", P_BOOL|P_VI_DEF|P_RWIN,
  #ifdef FEAT_SYN_HL
  			    (char_u *)VAR_WIN, PV_CUC,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"cursorline",   "cul", P_BOOL|P_VI_DEF|P_RWIN,
  #ifdef FEAT_SYN_HL
  			    (char_u *)VAR_WIN, PV_CUL,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"debug",	    NULL,   P_STRING|P_VI_DEF,
  			    (char_u *)&p_debug, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L}},
      {"define",	    "def",  P_STRING|P_ALLOCED|P_VI_DEF,
  #ifdef FEAT_FIND_ID
  			    (char_u *)&p_def, PV_DEF,
--- 856,900 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"cscopetag",   "cst",  P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_CSCOPE
  			    (char_u *)&p_cst, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"cscopetagorder", "csto", P_NUM|P_VI_DEF|P_VIM,
  #ifdef FEAT_CSCOPE
  			    (char_u *)&p_csto, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"cscopeverbose", "csverb", P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_CSCOPE
  			    (char_u *)&p_csverbose, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"cursorcolumn", "cuc", P_BOOL|P_VI_DEF|P_RWIN,
  #ifdef FEAT_SYN_HL
  			    (char_u *)VAR_WIN, PV_CUC,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"cursorline",   "cul", P_BOOL|P_VI_DEF|P_RWIN,
  #ifdef FEAT_SYN_HL
  			    (char_u *)VAR_WIN, PV_CUL,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"debug",	    NULL,   P_STRING|P_VI_DEF,
  			    (char_u *)&p_debug, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"define",	    "def",  P_STRING|P_ALLOCED|P_VI_DEF,
  #ifdef FEAT_FIND_ID
  			    (char_u *)&p_def, PV_DEF,
***************
*** 899,926 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"delcombine", "deco",  P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_deco, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"dictionary",  "dict", P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_INS_EXPAND
  			    (char_u *)&p_dict, PV_DICT,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"diff",	    NULL,   P_BOOL|P_VI_DEF|P_RWIN|P_NOGLOB,
  #ifdef FEAT_DIFF
  			    (char_u *)VAR_WIN, PV_DIFF,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"diffexpr",    "dex",  P_STRING|P_VI_DEF|P_SECURE,
  #if defined(FEAT_DIFF) && defined(FEAT_EVAL)
  			    (char_u *)&p_dex, PV_NONE,
--- 903,930 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"delcombine", "deco",  P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_deco, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"dictionary",  "dict", P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_INS_EXPAND
  			    (char_u *)&p_dict, PV_DICT,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"diff",	    NULL,   P_BOOL|P_VI_DEF|P_RWIN|P_NOGLOB,
  #ifdef FEAT_DIFF
  			    (char_u *)VAR_WIN, PV_DIFF,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"diffexpr",    "dex",  P_STRING|P_VI_DEF|P_SECURE,
  #if defined(FEAT_DIFF) && defined(FEAT_EVAL)
  			    (char_u *)&p_dex, PV_NONE,
***************
*** 929,935 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"diffopt",	    "dip",  P_STRING|P_ALLOCED|P_VI_DEF|P_RWIN|P_COMMA|P_NODUP,
  #ifdef FEAT_DIFF
  			    (char_u *)&p_dip, PV_NONE,
--- 933,939 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"diffopt",	    "dip",  P_STRING|P_ALLOCED|P_VI_DEF|P_RWIN|P_COMMA|P_NODUP,
  #ifdef FEAT_DIFF
  			    (char_u *)&p_dip, PV_NONE,
***************
*** 938,957 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)"", (char_u *)NULL}
  #endif
! 			    },
      {"digraph",	    "dg",   P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_DIGRAPHS
  			    (char_u *)&p_dg, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"directory",   "dir",  P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP|P_SECURE,
  			    (char_u *)&p_dir, PV_NONE,
! 			    {(char_u *)DFLT_DIR, (char_u *)0L}},
      {"display",	    "dy",   P_STRING|P_VI_DEF|P_COMMA|P_RALL|P_NODUP,
  			    (char_u *)&p_dy, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L}},
      {"eadirection", "ead",  P_STRING|P_VI_DEF,
  #ifdef FEAT_VERTSPLIT
  			    (char_u *)&p_ead, PV_NONE,
--- 942,961 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)"", (char_u *)NULL}
  #endif
! 			    SCRIPTID_INIT},
      {"digraph",	    "dg",   P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_DIGRAPHS
  			    (char_u *)&p_dg, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"directory",   "dir",  P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP|P_SECURE,
  			    (char_u *)&p_dir, PV_NONE,
! 			    {(char_u *)DFLT_DIR, (char_u *)0L} SCRIPTID_INIT},
      {"display",	    "dy",   P_STRING|P_VI_DEF|P_COMMA|P_RALL|P_NODUP,
  			    (char_u *)&p_dy, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"eadirection", "ead",  P_STRING|P_VI_DEF,
  #ifdef FEAT_VERTSPLIT
  			    (char_u *)&p_ead, PV_NONE,
***************
*** 960,969 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"edcompatible","ed",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_ed, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"encoding",    "enc",  P_STRING|P_VI_DEF|P_RCLR,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_enc, PV_NONE,
--- 964,973 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"edcompatible","ed",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_ed, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"encoding",    "enc",  P_STRING|P_VI_DEF|P_RCLR,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_enc, PV_NONE,
***************
*** 972,990 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"endofline",   "eol",  P_BOOL|P_NO_MKRC|P_VI_DEF|P_RSTAT,
  			    (char_u *)&p_eol, PV_EOL,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"equalalways", "ea",   P_BOOL|P_VI_DEF|P_RALL,
  			    (char_u *)&p_ea, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"equalprg",    "ep",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_ep, PV_EP,
! 			    {(char_u *)"", (char_u *)0L}},
      {"errorbells",  "eb",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_eb, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"errorfile",   "ef",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_ef, PV_NONE,
--- 976,994 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"endofline",   "eol",  P_BOOL|P_NO_MKRC|P_VI_DEF|P_RSTAT,
  			    (char_u *)&p_eol, PV_EOL,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"equalalways", "ea",   P_BOOL|P_VI_DEF|P_RALL,
  			    (char_u *)&p_ea, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"equalprg",    "ep",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_ep, PV_EP,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"errorbells",  "eb",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_eb, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"errorfile",   "ef",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_ef, PV_NONE,
***************
*** 993,1024 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"errorformat", "efm",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_efm, PV_EFM,
! 			    {(char_u *)DFLT_EFM, (char_u *)0L},
  #else
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"esckeys",	    "ek",   P_BOOL|P_VIM,
  			    (char_u *)&p_ek, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)TRUE}},
      {"eventignore", "ei",   P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_AUTOCMD
  			    (char_u *)&p_ei, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"expandtab",   "et",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_et, PV_ET,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"exrc",	    "ex",   P_BOOL|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_exrc, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"fileencoding","fenc", P_STRING|P_ALLOCED|P_VI_DEF|P_RSTAT|P_RBUF|P_NO_MKRC,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_fenc, PV_FENC,
--- 997,1028 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"errorformat", "efm",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_efm, PV_EFM,
! 			    {(char_u *)DFLT_EFM, (char_u *)0L}
  #else
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"esckeys",	    "ek",   P_BOOL|P_VIM,
  			    (char_u *)&p_ek, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)TRUE} SCRIPTID_INIT},
      {"eventignore", "ei",   P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_AUTOCMD
  			    (char_u *)&p_ei, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"expandtab",   "et",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_et, PV_ET,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"exrc",	    "ex",   P_BOOL|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_exrc, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"fileencoding","fenc", P_STRING|P_ALLOCED|P_VI_DEF|P_RSTAT|P_RBUF|P_NO_MKRC,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_fenc, PV_FENC,
***************
*** 1027,1033 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"fileencodings","fencs", P_STRING|P_VI_DEF|P_COMMA,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_fencs, PV_NONE,
--- 1031,1037 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"fileencodings","fencs", P_STRING|P_VI_DEF|P_COMMA,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_fencs, PV_NONE,
***************
*** 1036,1048 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"fileformat",  "ff",   P_STRING|P_ALLOCED|P_VI_DEF|P_RSTAT|P_NO_MKRC,
  			    (char_u *)&p_ff, PV_FF,
! 			    {(char_u *)DFLT_FF, (char_u *)0L}},
      {"fileformats", "ffs",  P_STRING|P_VIM|P_COMMA|P_NODUP,
  			    (char_u *)&p_ffs, PV_NONE,
! 			    {(char_u *)DFLT_FFS_VI, (char_u *)DFLT_FFS_VIM}},
      {"filetype",    "ft",   P_STRING|P_ALLOCED|P_VI_DEF|P_NOGLOB|P_NFNAME,
  #ifdef FEAT_AUTOCMD
  			    (char_u *)&p_ft, PV_FT,
--- 1040,1053 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"fileformat",  "ff",   P_STRING|P_ALLOCED|P_VI_DEF|P_RSTAT|P_NO_MKRC,
  			    (char_u *)&p_ff, PV_FF,
! 			    {(char_u *)DFLT_FF, (char_u *)0L} SCRIPTID_INIT},
      {"fileformats", "ffs",  P_STRING|P_VIM|P_COMMA|P_NODUP,
  			    (char_u *)&p_ffs, PV_NONE,
! 			    {(char_u *)DFLT_FFS_VI, (char_u *)DFLT_FFS_VIM}
! 			    SCRIPTID_INIT},
      {"filetype",    "ft",   P_STRING|P_ALLOCED|P_VI_DEF|P_NOGLOB|P_NFNAME,
  #ifdef FEAT_AUTOCMD
  			    (char_u *)&p_ft, PV_FT,
***************
*** 1051,1057 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"fillchars",   "fcs",  P_STRING|P_VI_DEF|P_RALL|P_COMMA|P_NODUP,
  #if defined(FEAT_WINDOWS) || defined(FEAT_FOLDING)
  			    (char_u *)&p_fcs, PV_NONE,
--- 1056,1062 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"fillchars",   "fcs",  P_STRING|P_VI_DEF|P_RALL|P_COMMA|P_NODUP,
  #if defined(FEAT_WINDOWS) || defined(FEAT_FOLDING)
  			    (char_u *)&p_fcs, PV_NONE,
***************
*** 1060,1086 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)"", (char_u *)0L}
  #endif
! 			    },
      {"fkmap",	    "fk",   P_BOOL|P_VI_DEF,
  #ifdef FEAT_FKMAP
  			    (char_u *)&p_fkmap, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"flash",	    "fl",   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
  #ifdef FEAT_FOLDING
      {"foldclose",   "fcl",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP|P_RWIN,
  			    (char_u *)&p_fcl, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L}},
      {"foldcolumn",  "fdc",  P_NUM|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FDC,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"foldenable",  "fen",  P_BOOL|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FEN,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"foldexpr",    "fde",  P_STRING|P_ALLOCED|P_VIM|P_VI_DEF|P_RWIN,
  # ifdef FEAT_EVAL
  			    (char_u *)VAR_WIN, PV_FDE,
--- 1065,1091 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)"", (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"fkmap",	    "fk",   P_BOOL|P_VI_DEF,
  #ifdef FEAT_FKMAP
  			    (char_u *)&p_fkmap, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"flash",	    "fl",   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
  #ifdef FEAT_FOLDING
      {"foldclose",   "fcl",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP|P_RWIN,
  			    (char_u *)&p_fcl, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"foldcolumn",  "fdc",  P_NUM|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FDC,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"foldenable",  "fen",  P_BOOL|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FEN,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"foldexpr",    "fde",  P_STRING|P_ALLOCED|P_VIM|P_VI_DEF|P_RWIN,
  # ifdef FEAT_EVAL
  			    (char_u *)VAR_WIN, PV_FDE,
***************
*** 1089,1121 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  # endif
! 			    },
      {"foldignore",  "fdi",  P_STRING|P_ALLOCED|P_VIM|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FDI,
! 			    {(char_u *)"#", (char_u *)NULL}},
      {"foldlevel",   "fdl",  P_NUM|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FDL,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"foldlevelstart","fdls", P_NUM|P_VI_DEF,
  			    (char_u *)&p_fdls, PV_NONE,
! 			    {(char_u *)-1L, (char_u *)0L}},
      {"foldmarker",  "fmr",  P_STRING|P_ALLOCED|P_VIM|P_VI_DEF|
  						       P_RWIN|P_COMMA|P_NODUP,
  			    (char_u *)VAR_WIN, PV_FMR,
! 			    {(char_u *)"{{{,}}}", (char_u *)NULL}},
      {"foldmethod",  "fdm",  P_STRING|P_ALLOCED|P_VIM|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FDM,
! 			    {(char_u *)"manual", (char_u *)NULL}},
      {"foldminlines","fml",  P_NUM|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FML,
! 			    {(char_u *)1L, (char_u *)0L}},
      {"foldnestmax", "fdn",  P_NUM|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FDN,
! 			    {(char_u *)20L, (char_u *)0L}},
      {"foldopen",    "fdo",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_fdo, PV_NONE,
  		 {(char_u *)"block,hor,mark,percent,quickfix,search,tag,undo",
! 							       (char_u *)0L}},
      {"foldtext",    "fdt",  P_STRING|P_ALLOCED|P_VIM|P_VI_DEF|P_RWIN,
  # ifdef FEAT_EVAL
  			    (char_u *)VAR_WIN, PV_FDT,
--- 1094,1127 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  # endif
! 			    SCRIPTID_INIT},
      {"foldignore",  "fdi",  P_STRING|P_ALLOCED|P_VIM|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FDI,
! 			    {(char_u *)"#", (char_u *)NULL} SCRIPTID_INIT},
      {"foldlevel",   "fdl",  P_NUM|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FDL,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"foldlevelstart","fdls", P_NUM|P_VI_DEF,
  			    (char_u *)&p_fdls, PV_NONE,
! 			    {(char_u *)-1L, (char_u *)0L} SCRIPTID_INIT},
      {"foldmarker",  "fmr",  P_STRING|P_ALLOCED|P_VIM|P_VI_DEF|
  						       P_RWIN|P_COMMA|P_NODUP,
  			    (char_u *)VAR_WIN, PV_FMR,
! 			    {(char_u *)"{{{,}}}", (char_u *)NULL}
! 			    SCRIPTID_INIT},
      {"foldmethod",  "fdm",  P_STRING|P_ALLOCED|P_VIM|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FDM,
! 			    {(char_u *)"manual", (char_u *)NULL} SCRIPTID_INIT},
      {"foldminlines","fml",  P_NUM|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FML,
! 			    {(char_u *)1L, (char_u *)0L} SCRIPTID_INIT},
      {"foldnestmax", "fdn",  P_NUM|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_FDN,
! 			    {(char_u *)20L, (char_u *)0L} SCRIPTID_INIT},
      {"foldopen",    "fdo",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_fdo, PV_NONE,
  		 {(char_u *)"block,hor,mark,percent,quickfix,search,tag,undo",
! 						 (char_u *)0L} SCRIPTID_INIT},
      {"foldtext",    "fdt",  P_STRING|P_ALLOCED|P_VIM|P_VI_DEF|P_RWIN,
  # ifdef FEAT_EVAL
  			    (char_u *)VAR_WIN, PV_FDT,
***************
*** 1124,1130 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  # endif
! 			    },
  #endif
      {"formatexpr", "fex",   P_STRING|P_ALLOCED|P_VI_DEF|P_VIM,
  #ifdef FEAT_EVAL
--- 1130,1136 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  # endif
! 			    SCRIPTID_INIT},
  #endif
      {"formatexpr", "fex",   P_STRING|P_ALLOCED|P_VI_DEF|P_VIM,
  #ifdef FEAT_EVAL
***************
*** 1134,1149 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"formatoptions","fo",  P_STRING|P_ALLOCED|P_VIM|P_FLAGLIST,
  			    (char_u *)&p_fo, PV_FO,
! 			    {(char_u *)DFLT_FO_VI, (char_u *)DFLT_FO_VIM}},
      {"formatlistpat","flp", P_STRING|P_ALLOCED|P_VI_DEF,
  			    (char_u *)&p_flp, PV_FLP,
! 			    {(char_u *)"^\\s*\\d\\+[\\]:.)}\\t ]\\s*", (char_u *)0L}},
      {"formatprg",   "fp",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_fp, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L}},
      {"fsync",       "fs",   P_BOOL|P_SECURE|P_VI_DEF,
  #ifdef HAVE_FSYNC
  			    (char_u *)&p_fs, PV_NONE,
--- 1140,1157 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"formatoptions","fo",  P_STRING|P_ALLOCED|P_VIM|P_FLAGLIST,
  			    (char_u *)&p_fo, PV_FO,
! 			    {(char_u *)DFLT_FO_VI, (char_u *)DFLT_FO_VIM}
! 			    SCRIPTID_INIT},
      {"formatlistpat","flp", P_STRING|P_ALLOCED|P_VI_DEF,
  			    (char_u *)&p_flp, PV_FLP,
! 			    {(char_u *)"^\\s*\\d\\+[\\]:.)}\\t ]\\s*",
! 						 (char_u *)0L} SCRIPTID_INIT},
      {"formatprg",   "fp",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_fp, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"fsync",       "fs",   P_BOOL|P_SECURE|P_VI_DEF,
  #ifdef HAVE_FSYNC
  			    (char_u *)&p_fs, PV_NONE,
***************
*** 1152,1173 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)FALSE, (char_u *)0L}
  #endif
! 			    },
      {"gdefault",    "gd",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_gd, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"graphic",	    "gr",   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"grepformat",  "gfm",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_gefm, PV_NONE,
! 			    {(char_u *)DFLT_GREPFORMAT, (char_u *)0L},
  #else
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"grepprg",	    "gp",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_gp, PV_GP,
--- 1160,1181 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)FALSE, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"gdefault",    "gd",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_gd, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"graphic",	    "gr",   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"grepformat",  "gfm",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_gefm, PV_NONE,
! 			    {(char_u *)DFLT_GREPFORMAT, (char_u *)0L}
  #else
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"grepprg",	    "gp",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_gp, PV_GP,
***************
*** 1185,1199 ****
  			    (char_u *)"SEARCH/NUMBERS ",
  #   else
  			    (char_u *)"grep -n ",
! #endif
! #endif
  # endif
! 			    (char_u *)0L},
  #else
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"guicursor",    "gcr",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef CURSOR_SHAPE
  			    (char_u *)&p_guicursor, PV_NONE,
--- 1193,1207 ----
  			    (char_u *)"SEARCH/NUMBERS ",
  #   else
  			    (char_u *)"grep -n ",
! #   endif
! #  endif
  # endif
! 			    (char_u *)0L}
  #else
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"guicursor",    "gcr",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef CURSOR_SHAPE
  			    (char_u *)&p_guicursor, PV_NONE,
***************
*** 1208,1214 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 				    },
      {"guifont",	    "gfn",  P_STRING|P_VI_DEF|P_RCLR|P_COMMA|P_NODUP,
  #ifdef FEAT_GUI
  			    (char_u *)&p_guifont, PV_NONE,
--- 1216,1222 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"guifont",	    "gfn",  P_STRING|P_VI_DEF|P_RCLR|P_COMMA|P_NODUP,
  #ifdef FEAT_GUI
  			    (char_u *)&p_guifont, PV_NONE,
***************
*** 1217,1223 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 				    },
      {"guifontset",  "gfs",  P_STRING|P_VI_DEF|P_RCLR|P_COMMA,
  #if defined(FEAT_GUI) && defined(FEAT_XFONTSET)
  			    (char_u *)&p_guifontset, PV_NONE,
--- 1225,1231 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"guifontset",  "gfs",  P_STRING|P_VI_DEF|P_RCLR|P_COMMA,
  #if defined(FEAT_GUI) && defined(FEAT_XFONTSET)
  			    (char_u *)&p_guifontset, PV_NONE,
***************
*** 1226,1232 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 				    },
      {"guifontwide", "gfw",  P_STRING|P_VI_DEF|P_RCLR|P_COMMA|P_NODUP,
  #if defined(FEAT_GUI) && defined(FEAT_MBYTE)
  			    (char_u *)&p_guifontwide, PV_NONE,
--- 1234,1240 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"guifontwide", "gfw",  P_STRING|P_VI_DEF|P_RCLR|P_COMMA|P_NODUP,
  #if defined(FEAT_GUI) && defined(FEAT_MBYTE)
  			    (char_u *)&p_guifontwide, PV_NONE,
***************
*** 1235,1248 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 				    },
      {"guiheadroom", "ghr",  P_NUM|P_VI_DEF,
  #if defined(FEAT_GUI_GTK) || defined(FEAT_GUI_X11)
  			    (char_u *)&p_ghr, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)50L, (char_u *)0L}},
      {"guioptions",  "go",   P_STRING|P_VI_DEF|P_RALL|P_FLAGLIST,
  #if defined(FEAT_GUI)
  			    (char_u *)&p_go, PV_NONE,
--- 1243,1256 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"guiheadroom", "ghr",  P_NUM|P_VI_DEF,
  #if defined(FEAT_GUI_GTK) || defined(FEAT_GUI_X11)
  			    (char_u *)&p_ghr, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)50L, (char_u *)0L} SCRIPTID_INIT},
      {"guioptions",  "go",   P_STRING|P_VI_DEF|P_RALL|P_FLAGLIST,
  #if defined(FEAT_GUI)
  			    (char_u *)&p_go, PV_NONE,
***************
*** 1255,1268 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 				    },
      {"guipty",	    NULL,   P_BOOL|P_VI_DEF,
  #if defined(FEAT_GUI)
  			    (char_u *)&p_guipty, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"guitablabel",  "gtl", P_STRING|P_VI_DEF|P_RWIN,
  #if defined(FEAT_GUI_TABLINE)
  			    (char_u *)&p_gtl, PV_NONE,
--- 1263,1276 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"guipty",	    NULL,   P_BOOL|P_VI_DEF,
  #if defined(FEAT_GUI)
  			    (char_u *)&p_guipty, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"guitablabel",  "gtl", P_STRING|P_VI_DEF|P_RWIN,
  #if defined(FEAT_GUI_TABLINE)
  			    (char_u *)&p_gtl, PV_NONE,
***************
*** 1271,1277 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 				    },
      {"guitabtooltip",  "gtt", P_STRING|P_VI_DEF|P_RWIN,
  #if defined(FEAT_GUI_TABLINE)
  			    (char_u *)&p_gtt, PV_NONE,
--- 1279,1285 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"guitabtooltip",  "gtt", P_STRING|P_VI_DEF|P_RWIN,
  #if defined(FEAT_GUI_TABLINE)
  			    (char_u *)&p_gtt, PV_NONE,
***************
*** 1280,1299 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 				    },
      {"hardtabs",    "ht",   P_NUM|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"helpfile",    "hf",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_hf, PV_NONE,
! 			    {(char_u *)DFLT_HELPFILE, (char_u *)0L}},
      {"helpheight",  "hh",   P_NUM|P_VI_DEF,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_hh, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)20L, (char_u *)0L}},
      {"helplang",    "hlg",  P_STRING|P_VI_DEF|P_COMMA,
  #ifdef FEAT_MULTI_LANG
  			    (char_u *)&p_hlg, PV_NONE,
--- 1288,1308 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"hardtabs",    "ht",   P_NUM|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"helpfile",    "hf",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_hf, PV_NONE,
! 			    {(char_u *)DFLT_HELPFILE, (char_u *)0L}
! 			    SCRIPTID_INIT},
      {"helpheight",  "hh",   P_NUM|P_VI_DEF,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_hh, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)20L, (char_u *)0L} SCRIPTID_INIT},
      {"helplang",    "hlg",  P_STRING|P_VI_DEF|P_COMMA,
  #ifdef FEAT_MULTI_LANG
  			    (char_u *)&p_hlg, PV_NONE,
***************
*** 1302,1365 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
!     },
      {"hidden",	    "hid",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_hid, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"highlight",   "hl",   P_STRING|P_VI_DEF|P_RCLR|P_COMMA|P_NODUP,
  			    (char_u *)&p_hl, PV_NONE,
! 			    {(char_u *)HIGHLIGHT_INIT, (char_u *)0L}},
      {"history",	    "hi",   P_NUM|P_VIM,
  			    (char_u *)&p_hi, PV_NONE,
! 			    {(char_u *)0L, (char_u *)20L}},
      {"hkmap",	    "hk",   P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_RIGHTLEFT
  			    (char_u *)&p_hkmap, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"hkmapp",	    "hkp",  P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_RIGHTLEFT
  			    (char_u *)&p_hkmapp, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"hlsearch",    "hls",  P_BOOL|P_VI_DEF|P_VIM|P_RALL,
  			    (char_u *)&p_hls, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"icon",	    NULL,   P_BOOL|P_VI_DEF,
  #ifdef FEAT_TITLE
  			    (char_u *)&p_icon, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"iconstring",  NULL,   P_STRING|P_VI_DEF,
  #ifdef FEAT_TITLE
  			    (char_u *)&p_iconstring, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"ignorecase",  "ic",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_ic, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"imactivatekey","imak",P_STRING|P_VI_DEF,
  #if defined(FEAT_XIM) && defined(FEAT_GUI_GTK)
  			    (char_u *)&p_imak, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"imcmdline",   "imc",  P_BOOL|P_VI_DEF,
  #ifdef USE_IM_CONTROL
  			    (char_u *)&p_imcmdline, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"imdisable",   "imd",  P_BOOL|P_VI_DEF,
  #ifdef USE_IM_CONTROL
  			    (char_u *)&p_imdisable, PV_NONE,
--- 1311,1375 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"hidden",	    "hid",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_hid, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"highlight",   "hl",   P_STRING|P_VI_DEF|P_RCLR|P_COMMA|P_NODUP,
  			    (char_u *)&p_hl, PV_NONE,
! 			    {(char_u *)HIGHLIGHT_INIT, (char_u *)0L}
! 			    SCRIPTID_INIT},
      {"history",	    "hi",   P_NUM|P_VIM,
  			    (char_u *)&p_hi, PV_NONE,
! 			    {(char_u *)0L, (char_u *)20L} SCRIPTID_INIT},
      {"hkmap",	    "hk",   P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_RIGHTLEFT
  			    (char_u *)&p_hkmap, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"hkmapp",	    "hkp",  P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_RIGHTLEFT
  			    (char_u *)&p_hkmapp, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"hlsearch",    "hls",  P_BOOL|P_VI_DEF|P_VIM|P_RALL,
  			    (char_u *)&p_hls, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"icon",	    NULL,   P_BOOL|P_VI_DEF,
  #ifdef FEAT_TITLE
  			    (char_u *)&p_icon, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"iconstring",  NULL,   P_STRING|P_VI_DEF,
  #ifdef FEAT_TITLE
  			    (char_u *)&p_iconstring, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"ignorecase",  "ic",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_ic, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"imactivatekey","imak",P_STRING|P_VI_DEF,
  #if defined(FEAT_XIM) && defined(FEAT_GUI_GTK)
  			    (char_u *)&p_imak, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"imcmdline",   "imc",  P_BOOL|P_VI_DEF,
  #ifdef USE_IM_CONTROL
  			    (char_u *)&p_imcmdline, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"imdisable",   "imd",  P_BOOL|P_VI_DEF,
  #ifdef USE_IM_CONTROL
  			    (char_u *)&p_imdisable, PV_NONE,
***************
*** 1371,1377 ****
  #else
  			    {(char_u *)FALSE, (char_u *)0L}
  #endif
! 			    },
      {"iminsert",    "imi",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_iminsert, PV_IMI,
  #ifdef B_IMODE_IM
--- 1381,1387 ----
  #else
  			    {(char_u *)FALSE, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"iminsert",    "imi",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_iminsert, PV_IMI,
  #ifdef B_IMODE_IM
***************
*** 1379,1385 ****
  #else
  			    {(char_u *)B_IMODE_NONE, (char_u *)0L}
  #endif
! 			    },
      {"imsearch",    "ims",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_imsearch, PV_IMS,
  #ifdef B_IMODE_IM
--- 1389,1395 ----
  #else
  			    {(char_u *)B_IMODE_NONE, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"imsearch",    "ims",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_imsearch, PV_IMS,
  #ifdef B_IMODE_IM
***************
*** 1387,1393 ****
  #else
  			    {(char_u *)B_IMODE_NONE, (char_u *)0L}
  #endif
! 			    },
      {"include",	    "inc",  P_STRING|P_ALLOCED|P_VI_DEF,
  #ifdef FEAT_FIND_ID
  			    (char_u *)&p_inc, PV_INC,
--- 1397,1403 ----
  #else
  			    {(char_u *)B_IMODE_NONE, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"include",	    "inc",  P_STRING|P_ALLOCED|P_VI_DEF,
  #ifdef FEAT_FIND_ID
  			    (char_u *)&p_inc, PV_INC,
***************
*** 1396,1402 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"includeexpr", "inex", P_STRING|P_ALLOCED|P_VI_DEF,
  #if defined(FEAT_FIND_ID) && defined(FEAT_EVAL)
  			    (char_u *)&p_inex, PV_INEX,
--- 1406,1412 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"includeexpr", "inex", P_STRING|P_ALLOCED|P_VI_DEF,
  #if defined(FEAT_FIND_ID) && defined(FEAT_EVAL)
  			    (char_u *)&p_inex, PV_INEX,
***************
*** 1405,1414 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"incsearch",   "is",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_is, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"indentexpr", "inde",  P_STRING|P_ALLOCED|P_VI_DEF|P_VIM,
  #if defined(FEAT_CINDENT) && defined(FEAT_EVAL)
  			    (char_u *)&p_inde, PV_INDE,
--- 1415,1424 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"incsearch",   "is",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_is, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"indentexpr", "inde",  P_STRING|P_ALLOCED|P_VI_DEF|P_VIM,
  #if defined(FEAT_CINDENT) && defined(FEAT_EVAL)
  			    (char_u *)&p_inde, PV_INDE,
***************
*** 1417,1423 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"indentkeys", "indk",  P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  #if defined(FEAT_CINDENT) && defined(FEAT_EVAL)
  			    (char_u *)&p_indk, PV_INDK,
--- 1427,1433 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"indentkeys", "indk",  P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  #if defined(FEAT_CINDENT) && defined(FEAT_EVAL)
  			    (char_u *)&p_indk, PV_INDK,
***************
*** 1426,1438 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"infercase",   "inf",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_inf, PV_INF,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"insertmode",  "im",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_im, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"isfname",	    "isf",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_isf, PV_NONE,
  			    {
--- 1436,1448 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"infercase",   "inf",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_inf, PV_INF,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"insertmode",  "im",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_im, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"isfname",	    "isf",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_isf, PV_NONE,
  			    {
***************
*** 1455,1461 ****
  #  endif
  # endif
  #endif
! 				(char_u *)0L}},
      {"isident",	    "isi",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_isi, PV_NONE,
  			    {
--- 1465,1471 ----
  #  endif
  # endif
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"isident",	    "isi",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_isi, PV_NONE,
  			    {
***************
*** 1472,1478 ****
  			    (char_u *)"@,48-57,_,192-255",
  # endif
  #endif
! 				(char_u *)0L}},
      {"iskeyword",   "isk",  P_STRING|P_ALLOCED|P_VIM|P_COMMA|P_NODUP,
  			    (char_u *)&p_isk, PV_ISK,
  			    {
--- 1482,1488 ----
  			    (char_u *)"@,48-57,_,192-255",
  # endif
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"iskeyword",   "isk",  P_STRING|P_ALLOCED|P_VIM|P_COMMA|P_NODUP,
  			    (char_u *)&p_isk, PV_ISK,
  			    {
***************
*** 1491,1497 ****
  				ISK_LATIN1
  # endif
  #endif
! 				}},
      {"isprint",	    "isp",  P_STRING|P_VI_DEF|P_RALL|P_COMMA|P_NODUP,
  			    (char_u *)&p_isp, PV_NONE,
  			    {
--- 1501,1507 ----
  				ISK_LATIN1
  # endif
  #endif
! 			    } SCRIPTID_INIT},
      {"isprint",	    "isp",  P_STRING|P_VI_DEF|P_RALL|P_COMMA|P_NODUP,
  			    (char_u *)&p_isp, PV_NONE,
  			    {
***************
*** 1507,1516 ****
  			    ISP_LATIN1,
  # endif
  #endif
! 				(char_u *)0L}},
      {"joinspaces",  "js",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_js, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"key",	    NULL,   P_STRING|P_ALLOCED|P_VI_DEF|P_NO_MKRC,
  #ifdef FEAT_CRYPT
  			    (char_u *)&p_key, PV_KEY,
--- 1517,1526 ----
  			    ISP_LATIN1,
  # endif
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"joinspaces",  "js",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_js, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"key",	    NULL,   P_STRING|P_ALLOCED|P_VI_DEF|P_NO_MKRC,
  #ifdef FEAT_CRYPT
  			    (char_u *)&p_key, PV_KEY,
***************
*** 1519,1525 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"keymap",	    "kmp",  P_STRING|P_ALLOCED|P_VI_DEF|P_RBUF|P_RSTAT|P_NFNAME|P_PRI_MKRC,
  #ifdef FEAT_KEYMAP
  			    (char_u *)&p_keymap, PV_KMAP,
--- 1529,1535 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"keymap",	    "kmp",  P_STRING|P_ALLOCED|P_VI_DEF|P_RBUF|P_RSTAT|P_NFNAME|P_PRI_MKRC,
  #ifdef FEAT_KEYMAP
  			    (char_u *)&p_keymap, PV_KMAP,
***************
*** 1528,1541 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)"", (char_u *)0L}
  #endif
! 	},
      {"keymodel",    "km",   P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_VISUAL
  			    (char_u *)&p_km, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"keywordprg",  "kp",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_kp, PV_KP,
  			    {
--- 1538,1551 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)"", (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"keymodel",    "km",   P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_VISUAL
  			    (char_u *)&p_km, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"keywordprg",  "kp",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_kp, PV_KP,
  			    {
***************
*** 1556,1562 ****
  # endif
  #endif
  #endif
! 				(char_u *)0L}},
      {"langmap",     "lmap", P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_LANGMAP
  			    (char_u *)&p_langmap, PV_NONE,
--- 1566,1572 ----
  # endif
  #endif
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"langmap",     "lmap", P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_LANGMAP
  			    (char_u *)&p_langmap, PV_NONE,
***************
*** 1565,1595 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL,
  #endif
! 				(char_u *)0L}},
      {"langmenu",    "lm",   P_STRING|P_VI_DEF|P_NFNAME,
  #if defined(FEAT_MENU) && defined(FEAT_MULTI_LANG)
  			    (char_u *)&p_lm, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"laststatus",  "ls",   P_NUM|P_VI_DEF|P_RALL,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_ls, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)1L, (char_u *)0L}},
      {"lazyredraw",  "lz",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_lz, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"linebreak",   "lbr",  P_BOOL|P_VI_DEF|P_RWIN,
  #ifdef FEAT_LINEBREAK
  			    (char_u *)VAR_WIN, PV_LBR,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"lines",	    NULL,   P_NUM|P_NODEFAULT|P_NO_MKRC|P_VI_DEF|P_RCLR,
  			    (char_u *)&Rows, PV_NONE,
  			    {
--- 1575,1605 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL,
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"langmenu",    "lm",   P_STRING|P_VI_DEF|P_NFNAME,
  #if defined(FEAT_MENU) && defined(FEAT_MULTI_LANG)
  			    (char_u *)&p_lm, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"laststatus",  "ls",   P_NUM|P_VI_DEF|P_RALL,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_ls, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)1L, (char_u *)0L} SCRIPTID_INIT},
      {"lazyredraw",  "lz",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_lz, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"linebreak",   "lbr",  P_BOOL|P_VI_DEF|P_RWIN,
  #ifdef FEAT_LINEBREAK
  			    (char_u *)VAR_WIN, PV_LBR,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"lines",	    NULL,   P_NUM|P_NODEFAULT|P_NO_MKRC|P_VI_DEF|P_RCLR,
  			    (char_u *)&Rows, PV_NONE,
  			    {
***************
*** 1598,1604 ****
  #else
  			    (char_u *)24L,
  #endif
! 					    (char_u *)0L}},
      {"linespace",   "lsp",  P_NUM|P_VI_DEF|P_RCLR,
  #ifdef FEAT_GUI
  			    (char_u *)&p_linespace, PV_NONE,
--- 1608,1614 ----
  #else
  			    (char_u *)24L,
  #endif
! 					    (char_u *)0L} SCRIPTID_INIT},
      {"linespace",   "lsp",  P_NUM|P_VI_DEF|P_RCLR,
  #ifdef FEAT_GUI
  			    (char_u *)&p_linespace, PV_NONE,
***************
*** 1610,1623 ****
  #else
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"lisp",	    NULL,   P_BOOL|P_VI_DEF,
  #ifdef FEAT_LISP
  			    (char_u *)&p_lisp, PV_LISP,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"lispwords",   "lw",   P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_LISP
  			    (char_u *)&p_lispwords, PV_NONE,
--- 1620,1633 ----
  #else
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"lisp",	    NULL,   P_BOOL|P_VI_DEF,
  #ifdef FEAT_LISP
  			    (char_u *)&p_lisp, PV_LISP,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"lispwords",   "lw",   P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_LISP
  			    (char_u *)&p_lispwords, PV_NONE,
***************
*** 1626,1649 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)"", (char_u *)0L}
  #endif
! 			    },
      {"list",	    NULL,   P_BOOL|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_LIST,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"listchars",   "lcs",  P_STRING|P_VI_DEF|P_RALL|P_COMMA|P_NODUP,
  			    (char_u *)&p_lcs, PV_NONE,
! 			    {(char_u *)"eol:$", (char_u *)0L}},
      {"loadplugins", "lpl",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_lpl, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
  #ifdef FEAT_GUI_MAC
      {"macatsui",    NULL,   P_BOOL|P_VI_DEF|P_RCLR,
  			    (char_u *)&p_macatsui, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
  #endif
      {"magic",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_magic, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"makeef",	    "mef",  P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_mef, PV_NONE,
--- 1636,1659 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)"", (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"list",	    NULL,   P_BOOL|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_LIST,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"listchars",   "lcs",  P_STRING|P_VI_DEF|P_RALL|P_COMMA|P_NODUP,
  			    (char_u *)&p_lcs, PV_NONE,
! 			    {(char_u *)"eol:$", (char_u *)0L} SCRIPTID_INIT},
      {"loadplugins", "lpl",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_lpl, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
  #ifdef FEAT_GUI_MAC
      {"macatsui",    NULL,   P_BOOL|P_VI_DEF|P_RCLR,
  			    (char_u *)&p_macatsui, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
  #endif
      {"magic",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_magic, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"makeef",	    "mef",  P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_mef, PV_NONE,
***************
*** 1652,1658 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"makeprg",	    "mp",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_mp, PV_MP,
--- 1662,1668 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"makeprg",	    "mp",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_mp, PV_MP,
***************
*** 1665,1713 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"matchpairs",  "mps",  P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_mps, PV_MPS,
! 			    {(char_u *)"(:),{:},[:]", (char_u *)0L}},
      {"matchtime",   "mat",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_mat, PV_NONE,
! 			    {(char_u *)5L, (char_u *)0L}},
      {"maxcombine",  "mco",  P_NUM|P_VI_DEF,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_mco, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)2, (char_u *)0L}},
      {"maxfuncdepth", "mfd", P_NUM|P_VI_DEF,
  #ifdef FEAT_EVAL
  			    (char_u *)&p_mfd, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)100L, (char_u *)0L}},
      {"maxmapdepth", "mmd",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_mmd, PV_NONE,
! 			    {(char_u *)1000L, (char_u *)0L}},
      {"maxmem",	    "mm",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_mm, PV_NONE,
! 			    {(char_u *)DFLT_MAXMEM, (char_u *)0L}},
      {"maxmempattern","mmp", P_NUM|P_VI_DEF,
  			    (char_u *)&p_mmp, PV_NONE,
! 			    {(char_u *)1000L, (char_u *)0L}},
      {"maxmemtot",   "mmt",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_mmt, PV_NONE,
! 			    {(char_u *)DFLT_MAXMEMTOT, (char_u *)0L}},
      {"menuitems",   "mis",  P_NUM|P_VI_DEF,
  #ifdef FEAT_MENU
  			    (char_u *)&p_mis, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)25L, (char_u *)0L}},
      {"mesg",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"mkspellmem",  "msm",  P_STRING|P_VI_DEF|P_EXPAND|P_SECURE,
  #ifdef FEAT_SPELL
  			    (char_u *)&p_msm, PV_NONE,
--- 1675,1726 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"matchpairs",  "mps",  P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_mps, PV_MPS,
! 			    {(char_u *)"(:),{:},[:]", (char_u *)0L}
! 			    SCRIPTID_INIT},
      {"matchtime",   "mat",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_mat, PV_NONE,
! 			    {(char_u *)5L, (char_u *)0L} SCRIPTID_INIT},
      {"maxcombine",  "mco",  P_NUM|P_VI_DEF,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_mco, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)2, (char_u *)0L} SCRIPTID_INIT},
      {"maxfuncdepth", "mfd", P_NUM|P_VI_DEF,
  #ifdef FEAT_EVAL
  			    (char_u *)&p_mfd, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)100L, (char_u *)0L} SCRIPTID_INIT},
      {"maxmapdepth", "mmd",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_mmd, PV_NONE,
! 			    {(char_u *)1000L, (char_u *)0L} SCRIPTID_INIT},
      {"maxmem",	    "mm",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_mm, PV_NONE,
! 			    {(char_u *)DFLT_MAXMEM, (char_u *)0L}
! 			    SCRIPTID_INIT},
      {"maxmempattern","mmp", P_NUM|P_VI_DEF,
  			    (char_u *)&p_mmp, PV_NONE,
! 			    {(char_u *)1000L, (char_u *)0L} SCRIPTID_INIT},
      {"maxmemtot",   "mmt",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_mmt, PV_NONE,
! 			    {(char_u *)DFLT_MAXMEMTOT, (char_u *)0L}
! 			    SCRIPTID_INIT},
      {"menuitems",   "mis",  P_NUM|P_VI_DEF,
  #ifdef FEAT_MENU
  			    (char_u *)&p_mis, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)25L, (char_u *)0L} SCRIPTID_INIT},
      {"mesg",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"mkspellmem",  "msm",  P_STRING|P_VI_DEF|P_EXPAND|P_SECURE,
  #ifdef FEAT_SPELL
  			    (char_u *)&p_msm, PV_NONE,
***************
*** 1716,1737 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
!     },
      {"modeline",    "ml",   P_BOOL|P_VIM,
  			    (char_u *)&p_ml, PV_ML,
! 			    {(char_u *)FALSE, (char_u *)TRUE}},
      {"modelines",   "mls",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_mls, PV_NONE,
! 			    {(char_u *)5L, (char_u *)0L}},
      {"modifiable",  "ma",   P_BOOL|P_VI_DEF|P_NOGLOB,
  			    (char_u *)&p_ma, PV_MA,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"modified",    "mod",  P_BOOL|P_NO_MKRC|P_VI_DEF|P_RSTAT,
  			    (char_u *)&p_mod, PV_MOD,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"more",	    NULL,   P_BOOL|P_VIM,
  			    (char_u *)&p_more, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)TRUE}},
      {"mouse",	    NULL,   P_STRING|P_VI_DEF|P_FLAGLIST,
  			    (char_u *)&p_mouse, PV_NONE,
  			    {
--- 1729,1750 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"modeline",    "ml",   P_BOOL|P_VIM,
  			    (char_u *)&p_ml, PV_ML,
! 			    {(char_u *)FALSE, (char_u *)TRUE} SCRIPTID_INIT},
      {"modelines",   "mls",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_mls, PV_NONE,
! 			    {(char_u *)5L, (char_u *)0L} SCRIPTID_INIT},
      {"modifiable",  "ma",   P_BOOL|P_VI_DEF|P_NOGLOB,
  			    (char_u *)&p_ma, PV_MA,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"modified",    "mod",  P_BOOL|P_NO_MKRC|P_VI_DEF|P_RSTAT,
  			    (char_u *)&p_mod, PV_MOD,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"more",	    NULL,   P_BOOL|P_VIM,
  			    (char_u *)&p_more, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)TRUE} SCRIPTID_INIT},
      {"mouse",	    NULL,   P_STRING|P_VI_DEF|P_FLAGLIST,
  			    (char_u *)&p_mouse, PV_NONE,
  			    {
***************
*** 1740,1760 ****
  #else
  				(char_u *)"",
  #endif
! 				(char_u *)0L}},
      {"mousefocus",   "mousef", P_BOOL|P_VI_DEF,
  #ifdef FEAT_GUI
  			    (char_u *)&p_mousef, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"mousehide",   "mh",   P_BOOL|P_VI_DEF,
  #ifdef FEAT_GUI
  			    (char_u *)&p_mh, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"mousemodel",  "mousem", P_STRING|P_VI_DEF,
  			    (char_u *)&p_mousem, PV_NONE,
  			    {
--- 1753,1773 ----
  #else
  				(char_u *)"",
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"mousefocus",   "mousef", P_BOOL|P_VI_DEF,
  #ifdef FEAT_GUI
  			    (char_u *)&p_mousef, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"mousehide",   "mh",   P_BOOL|P_VI_DEF,
  #ifdef FEAT_GUI
  			    (char_u *)&p_mh, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"mousemodel",  "mousem", P_STRING|P_VI_DEF,
  			    (char_u *)&p_mousem, PV_NONE,
  			    {
***************
*** 1767,1773 ****
  				(char_u *)"extend",
  # endif
  #endif
! 				(char_u *)0L}},
      {"mouseshape",  "mouses",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_MOUSESHAPE
  			    (char_u *)&p_mouseshape, PV_NONE,
--- 1780,1786 ----
  				(char_u *)"extend",
  # endif
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"mouseshape",  "mouses",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_MOUSESHAPE
  			    (char_u *)&p_mouseshape, PV_NONE,
***************
*** 1776,1808 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"mousetime",   "mouset",	P_NUM|P_VI_DEF,
  			    (char_u *)&p_mouset, PV_NONE,
! 			    {(char_u *)500L, (char_u *)0L}},
      {"mzquantum",  "mzq",   P_NUM,
  #ifdef FEAT_MZSCHEME
  			    (char_u *)&p_mzq, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)100L, (char_u *)100L}},
      {"novice",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"nrformats",   "nf",   P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_nf, PV_NF,
! 			    {(char_u *)"octal,hex", (char_u *)0L}},
      {"number",	    "nu",   P_BOOL|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_NU,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"numberwidth", "nuw",  P_NUM|P_RWIN|P_VIM,
  #ifdef FEAT_LINEBREAK
  			    (char_u *)VAR_WIN, PV_NUW,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)8L, (char_u *)4L}},
      {"omnifunc",    "ofu",  P_STRING|P_ALLOCED|P_VI_DEF|P_SECURE,
  #ifdef FEAT_COMPL_FUNC
  			    (char_u *)&p_ofu, PV_OFU,
--- 1789,1822 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"mousetime",   "mouset",	P_NUM|P_VI_DEF,
  			    (char_u *)&p_mouset, PV_NONE,
! 			    {(char_u *)500L, (char_u *)0L} SCRIPTID_INIT},
      {"mzquantum",  "mzq",   P_NUM,
  #ifdef FEAT_MZSCHEME
  			    (char_u *)&p_mzq, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)100L, (char_u *)100L} SCRIPTID_INIT},
      {"novice",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"nrformats",   "nf",   P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_nf, PV_NF,
! 			    {(char_u *)"octal,hex", (char_u *)0L}
! 			    SCRIPTID_INIT},
      {"number",	    "nu",   P_BOOL|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_NU,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"numberwidth", "nuw",  P_NUM|P_RWIN|P_VIM,
  #ifdef FEAT_LINEBREAK
  			    (char_u *)VAR_WIN, PV_NUW,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)8L, (char_u *)4L} SCRIPTID_INIT},
      {"omnifunc",    "ofu",  P_STRING|P_ALLOCED|P_VI_DEF|P_SECURE,
  #ifdef FEAT_COMPL_FUNC
  			    (char_u *)&p_ofu, PV_OFU,
***************
*** 1811,1820 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"open",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"opendevice",  "odev", P_BOOL|P_VI_DEF,
  #if defined(MSDOS) || defined(MSWIN) || defined(OS2)
  			    (char_u *)&p_odev, PV_NONE,
--- 1825,1834 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"open",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"opendevice",  "odev", P_BOOL|P_VI_DEF,
  #if defined(MSDOS) || defined(MSWIN) || defined(OS2)
  			    (char_u *)&p_odev, PV_NONE,
***************
*** 1822,1834 ****
  			    (char_u *)NULL, PV_NONE,
  #endif
  			    {(char_u *)FALSE, (char_u *)FALSE}
! 			    },
      {"operatorfunc", "opfunc", P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_opfunc, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} },
      {"optimize",    "opt",  P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"osfiletype",  "oft",  P_STRING|P_ALLOCED|P_VI_DEF,
  #ifdef FEAT_OSFILETYPE
  			    (char_u *)&p_oft, PV_OFT,
--- 1836,1848 ----
  			    (char_u *)NULL, PV_NONE,
  #endif
  			    {(char_u *)FALSE, (char_u *)FALSE}
! 			    SCRIPTID_INIT},
      {"operatorfunc", "opfunc", P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_opfunc, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"optimize",    "opt",  P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"osfiletype",  "oft",  P_STRING|P_ALLOCED|P_VI_DEF,
  #ifdef FEAT_OSFILETYPE
  			    (char_u *)&p_oft, PV_OFT,
***************
*** 1837,1853 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"paragraphs",  "para", P_STRING|P_VI_DEF,
  			    (char_u *)&p_para, PV_NONE,
  			    {(char_u *)"IPLPPPQPP TPHPLIPpLpItpplpipbp",
! 				(char_u *)0L}},
      {"paste",	    NULL,   P_BOOL|P_VI_DEF|P_PRI_MKRC,
  			    (char_u *)&p_paste, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"pastetoggle", "pt",   P_STRING|P_VI_DEF,
  			    (char_u *)&p_pt, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L}},
      {"patchexpr",   "pex",  P_STRING|P_VI_DEF|P_SECURE,
  #if defined(FEAT_DIFF) && defined(FEAT_EVAL)
  			    (char_u *)&p_pex, PV_NONE,
--- 1851,1867 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"paragraphs",  "para", P_STRING|P_VI_DEF,
  			    (char_u *)&p_para, PV_NONE,
  			    {(char_u *)"IPLPPPQPP TPHPLIPpLpItpplpipbp",
! 				(char_u *)0L} SCRIPTID_INIT},
      {"paste",	    NULL,   P_BOOL|P_VI_DEF|P_PRI_MKRC,
  			    (char_u *)&p_paste, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"pastetoggle", "pt",   P_STRING|P_VI_DEF,
  			    (char_u *)&p_pt, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"patchexpr",   "pex",  P_STRING|P_VI_DEF|P_SECURE,
  #if defined(FEAT_DIFF) && defined(FEAT_EVAL)
  			    (char_u *)&p_pex, PV_NONE,
***************
*** 1856,1865 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"patchmode",   "pm",   P_STRING|P_VI_DEF|P_NFNAME,
  			    (char_u *)&p_pm, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L}},
      {"path",	    "pa",   P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_path, PV_PATH,
  			    {
--- 1870,1879 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"patchmode",   "pm",   P_STRING|P_VI_DEF|P_NFNAME,
  			    (char_u *)&p_pm, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"path",	    "pa",   P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_path, PV_PATH,
  			    {
***************
*** 1872,1895 ****
  			    (char_u *)".,/usr/include,,",
  # endif
  #endif
! 				(char_u *)0L}},
      {"preserveindent", "pi", P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_pi, PV_PI,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"previewheight", "pvh", P_NUM|P_VI_DEF,
  #if defined(FEAT_WINDOWS) && defined(FEAT_QUICKFIX)
  			    (char_u *)&p_pvh, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)12L, (char_u *)0L}},
      {"previewwindow", "pvw", P_BOOL|P_VI_DEF|P_RSTAT|P_NOGLOB,
  #if defined(FEAT_WINDOWS) && defined(FEAT_QUICKFIX)
  			    (char_u *)VAR_WIN, PV_PVW,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"printdevice", "pdev", P_STRING|P_VI_DEF|P_SECURE,
  #ifdef FEAT_PRINTER
  			    (char_u *)&p_pdev, PV_NONE,
--- 1886,1909 ----
  			    (char_u *)".,/usr/include,,",
  # endif
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"preserveindent", "pi", P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_pi, PV_PI,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"previewheight", "pvh", P_NUM|P_VI_DEF,
  #if defined(FEAT_WINDOWS) && defined(FEAT_QUICKFIX)
  			    (char_u *)&p_pvh, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)12L, (char_u *)0L} SCRIPTID_INIT},
      {"previewwindow", "pvw", P_BOOL|P_VI_DEF|P_RSTAT|P_NOGLOB,
  #if defined(FEAT_WINDOWS) && defined(FEAT_QUICKFIX)
  			    (char_u *)VAR_WIN, PV_PVW,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"printdevice", "pdev", P_STRING|P_VI_DEF|P_SECURE,
  #ifdef FEAT_PRINTER
  			    (char_u *)&p_pdev, PV_NONE,
***************
*** 1898,1904 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"printencoding", "penc", P_STRING|P_VI_DEF,
  #ifdef FEAT_POSTSCRIPT
  			    (char_u *)&p_penc, PV_NONE,
--- 1912,1918 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"printencoding", "penc", P_STRING|P_VI_DEF,
  #ifdef FEAT_POSTSCRIPT
  			    (char_u *)&p_penc, PV_NONE,
***************
*** 1907,1913 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"printexpr", "pexpr",  P_STRING|P_VI_DEF,
  #ifdef FEAT_POSTSCRIPT
  			    (char_u *)&p_pexpr, PV_NONE,
--- 1921,1927 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"printexpr", "pexpr",  P_STRING|P_VI_DEF,
  #ifdef FEAT_POSTSCRIPT
  			    (char_u *)&p_pexpr, PV_NONE,
***************
*** 1916,1922 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"printfont", "pfn",    P_STRING|P_VI_DEF,
  #ifdef FEAT_PRINTER
  			    (char_u *)&p_pfn, PV_NONE,
--- 1930,1936 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"printfont", "pfn",    P_STRING|P_VI_DEF,
  #ifdef FEAT_PRINTER
  			    (char_u *)&p_pfn, PV_NONE,
***************
*** 1931,1937 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"printheader", "pheader",  P_STRING|P_VI_DEF|P_GETTEXT,
  #ifdef FEAT_PRINTER
  			    (char_u *)&p_header, PV_NONE,
--- 1945,1951 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"printheader", "pheader",  P_STRING|P_VI_DEF|P_GETTEXT,
  #ifdef FEAT_PRINTER
  			    (char_u *)&p_header, PV_NONE,
***************
*** 1940,1946 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
     {"printmbcharset", "pmbcs",  P_STRING|P_VI_DEF,
  #if defined(FEAT_POSTSCRIPT) && defined(FEAT_MBYTE)
  			    (char_u *)&p_pmcs, PV_NONE,
--- 1954,1960 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
     {"printmbcharset", "pmbcs",  P_STRING|P_VI_DEF,
  #if defined(FEAT_POSTSCRIPT) && defined(FEAT_MBYTE)
  			    (char_u *)&p_pmcs, PV_NONE,
***************
*** 1949,1955 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"printmbfont", "pmbfn",  P_STRING|P_VI_DEF,
  #if defined(FEAT_POSTSCRIPT) && defined(FEAT_MBYTE)
  			    (char_u *)&p_pmfn, PV_NONE,
--- 1963,1969 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"printmbfont", "pmbfn",  P_STRING|P_VI_DEF,
  #if defined(FEAT_POSTSCRIPT) && defined(FEAT_MBYTE)
  			    (char_u *)&p_pmfn, PV_NONE,
***************
*** 1958,1964 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"printoptions", "popt", P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_PRINTER
  			    (char_u *)&p_popt, PV_NONE,
--- 1972,1978 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"printoptions", "popt", P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_PRINTER
  			    (char_u *)&p_popt, PV_NONE,
***************
*** 1967,1983 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"prompt",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_prompt, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"pumheight",   "ph",   P_NUM|P_VI_DEF,
  #ifdef FEAT_INS_EXPAND
  			    (char_u *)&p_ph, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)0L, (char_u *)0L}},
      {"quoteescape", "qe",   P_STRING|P_ALLOCED|P_VI_DEF,
  #ifdef FEAT_TEXTOBJ
  			    (char_u *)&p_qe, PV_QE,
--- 1981,1997 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"prompt",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_prompt, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"pumheight",   "ph",   P_NUM|P_VI_DEF,
  #ifdef FEAT_INS_EXPAND
  			    (char_u *)&p_ph, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"quoteescape", "qe",   P_STRING|P_ALLOCED|P_VI_DEF,
  #ifdef FEAT_TEXTOBJ
  			    (char_u *)&p_qe, PV_QE,
***************
*** 1986,2032 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"readonly",    "ro",   P_BOOL|P_VI_DEF|P_RSTAT|P_NOGLOB,
  			    (char_u *)&p_ro, PV_RO,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"redraw",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"redrawtime",  "rdt",  P_NUM|P_VI_DEF,
  #ifdef FEAT_RELTIME
  			    (char_u *)&p_rdt, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)2000L, (char_u *)0L}},
      {"remap",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_remap, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"report",	    NULL,   P_NUM|P_VI_DEF,
  			    (char_u *)&p_report, PV_NONE,
! 			    {(char_u *)2L, (char_u *)0L}},
      {"restorescreen", "rs", P_BOOL|P_VI_DEF,
  #ifdef WIN3264
  			    (char_u *)&p_rs, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"revins",	    "ri",   P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_RIGHTLEFT
  			    (char_u *)&p_ri, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"rightleft",   "rl",   P_BOOL|P_VI_DEF|P_RWIN,
  #ifdef FEAT_RIGHTLEFT
  			    (char_u *)VAR_WIN, PV_RL,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"rightleftcmd", "rlc", P_STRING|P_ALLOCED|P_VI_DEF|P_RWIN,
  #ifdef FEAT_RIGHTLEFT
  			    (char_u *)VAR_WIN, PV_RLC,
--- 2000,2046 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"readonly",    "ro",   P_BOOL|P_VI_DEF|P_RSTAT|P_NOGLOB,
  			    (char_u *)&p_ro, PV_RO,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"redraw",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"redrawtime",  "rdt",  P_NUM|P_VI_DEF,
  #ifdef FEAT_RELTIME
  			    (char_u *)&p_rdt, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)2000L, (char_u *)0L} SCRIPTID_INIT},
      {"remap",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_remap, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"report",	    NULL,   P_NUM|P_VI_DEF,
  			    (char_u *)&p_report, PV_NONE,
! 			    {(char_u *)2L, (char_u *)0L} SCRIPTID_INIT},
      {"restorescreen", "rs", P_BOOL|P_VI_DEF,
  #ifdef WIN3264
  			    (char_u *)&p_rs, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"revins",	    "ri",   P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_RIGHTLEFT
  			    (char_u *)&p_ri, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"rightleft",   "rl",   P_BOOL|P_VI_DEF|P_RWIN,
  #ifdef FEAT_RIGHTLEFT
  			    (char_u *)VAR_WIN, PV_RL,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"rightleftcmd", "rlc", P_STRING|P_ALLOCED|P_VI_DEF|P_RWIN,
  #ifdef FEAT_RIGHTLEFT
  			    (char_u *)VAR_WIN, PV_RLC,
***************
*** 2035,2074 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"ruler",	    "ru",   P_BOOL|P_VI_DEF|P_VIM|P_RSTAT,
  #ifdef FEAT_CMDL_INFO
  			    (char_u *)&p_ru, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"rulerformat", "ruf",  P_STRING|P_VI_DEF|P_ALLOCED|P_RSTAT,
  #ifdef FEAT_STL_OPT
  			    (char_u *)&p_ruf, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"runtimepath", "rtp",  P_STRING|P_VI_DEF|P_EXPAND|P_COMMA|P_NODUP|P_SECURE,
  			    (char_u *)&p_rtp, PV_NONE,
! 			    {(char_u *)DFLT_RUNTIMEPATH, (char_u *)0L}},
      {"scroll",	    "scr",  P_NUM|P_NO_MKRC|P_VI_DEF,
  			    (char_u *)VAR_WIN, PV_SCROLL,
! 			    {(char_u *)12L, (char_u *)0L}},
      {"scrollbind",  "scb",  P_BOOL|P_VI_DEF,
  #ifdef FEAT_SCROLLBIND
  			    (char_u *)VAR_WIN, PV_SCBIND,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"scrolljump",  "sj",   P_NUM|P_VI_DEF|P_VIM,
  			    (char_u *)&p_sj, PV_NONE,
! 			    {(char_u *)1L, (char_u *)0L}},
      {"scrolloff",   "so",   P_NUM|P_VI_DEF|P_VIM|P_RALL,
  			    (char_u *)&p_so, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"scrollopt",   "sbo",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_SCROLLBIND
  			    (char_u *)&p_sbo, PV_NONE,
--- 2049,2089 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"ruler",	    "ru",   P_BOOL|P_VI_DEF|P_VIM|P_RSTAT,
  #ifdef FEAT_CMDL_INFO
  			    (char_u *)&p_ru, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"rulerformat", "ruf",  P_STRING|P_VI_DEF|P_ALLOCED|P_RSTAT,
  #ifdef FEAT_STL_OPT
  			    (char_u *)&p_ruf, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"runtimepath", "rtp",  P_STRING|P_VI_DEF|P_EXPAND|P_COMMA|P_NODUP|P_SECURE,
  			    (char_u *)&p_rtp, PV_NONE,
! 			    {(char_u *)DFLT_RUNTIMEPATH, (char_u *)0L}
! 			    SCRIPTID_INIT},
      {"scroll",	    "scr",  P_NUM|P_NO_MKRC|P_VI_DEF,
  			    (char_u *)VAR_WIN, PV_SCROLL,
! 			    {(char_u *)12L, (char_u *)0L} SCRIPTID_INIT},
      {"scrollbind",  "scb",  P_BOOL|P_VI_DEF,
  #ifdef FEAT_SCROLLBIND
  			    (char_u *)VAR_WIN, PV_SCBIND,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"scrolljump",  "sj",   P_NUM|P_VI_DEF|P_VIM,
  			    (char_u *)&p_sj, PV_NONE,
! 			    {(char_u *)1L, (char_u *)0L} SCRIPTID_INIT},
      {"scrolloff",   "so",   P_NUM|P_VI_DEF|P_VIM|P_RALL,
  			    (char_u *)&p_so, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"scrollopt",   "sbo",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_SCROLLBIND
  			    (char_u *)&p_sbo, PV_NONE,
***************
*** 2077,2103 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"sections",    "sect", P_STRING|P_VI_DEF,
  			    (char_u *)&p_sections, PV_NONE,
! 			    {(char_u *)"SHNHH HUnhsh", (char_u *)0L}},
      {"secure",	    NULL,   P_BOOL|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_secure, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"selection",   "sel",  P_STRING|P_VI_DEF,
  #ifdef FEAT_VISUAL
  			    (char_u *)&p_sel, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"inclusive", (char_u *)0L}},
      {"selectmode",  "slm",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_VISUAL
  			    (char_u *)&p_slm, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"sessionoptions", "ssop", P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_SESSION
  			    (char_u *)&p_ssop, PV_NONE,
--- 2092,2120 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"sections",    "sect", P_STRING|P_VI_DEF,
  			    (char_u *)&p_sections, PV_NONE,
! 			    {(char_u *)"SHNHH HUnhsh", (char_u *)0L}
! 			    SCRIPTID_INIT},
      {"secure",	    NULL,   P_BOOL|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_secure, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"selection",   "sel",  P_STRING|P_VI_DEF,
  #ifdef FEAT_VISUAL
  			    (char_u *)&p_sel, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"inclusive", (char_u *)0L}
! 			    SCRIPTID_INIT},
      {"selectmode",  "slm",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_VISUAL
  			    (char_u *)&p_slm, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"sessionoptions", "ssop", P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_SESSION
  			    (char_u *)&p_ssop, PV_NONE,
***************
*** 2107,2113 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"shell",	    "sh",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_sh, PV_NONE,
  			    {
--- 2124,2130 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"shell",	    "sh",   P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_sh, PV_NONE,
  			    {
***************
*** 2136,2142 ****
  #  endif
  # endif
  #endif /* VMS */
! 				(char_u *)0L}},
      {"shellcmdflag","shcf", P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_shcf, PV_NONE,
  			    {
--- 2153,2159 ----
  #  endif
  # endif
  #endif /* VMS */
! 				(char_u *)0L} SCRIPTID_INIT},
      {"shellcmdflag","shcf", P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_shcf, PV_NONE,
  			    {
***************
*** 2149,2155 ****
  			    (char_u *)"-c",
  # endif
  #endif
! 				(char_u *)0L}},
      {"shellpipe",   "sp",   P_STRING|P_VI_DEF|P_SECURE,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_sp, PV_NONE,
--- 2166,2172 ----
  			    (char_u *)"-c",
  # endif
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"shellpipe",   "sp",   P_STRING|P_VI_DEF|P_SECURE,
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_sp, PV_NONE,
***************
*** 2168,2197 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
!     },
      {"shellquote",  "shq",  P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_shq, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L}},
      {"shellredir",  "srr",  P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_srr, PV_NONE,
! 			    {(char_u *)">", (char_u *)0L}},
      {"shellslash",  "ssl",   P_BOOL|P_VI_DEF,
  #ifdef BACKSLASH_IN_FILENAME
  			    (char_u *)&p_ssl, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"shelltemp",   "stmp", P_BOOL,
  			    (char_u *)&p_stmp, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)TRUE}},
      {"shelltype",   "st",   P_NUM|P_VI_DEF,
  #ifdef AMIGA
  			    (char_u *)&p_st, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)0L, (char_u *)0L}},
      {"shellxquote", "sxq",  P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_sxq, PV_NONE,
  			    {
--- 2185,2214 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"shellquote",  "shq",  P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_shq, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"shellredir",  "srr",  P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_srr, PV_NONE,
! 			    {(char_u *)">", (char_u *)0L} SCRIPTID_INIT},
      {"shellslash",  "ssl",   P_BOOL|P_VI_DEF,
  #ifdef BACKSLASH_IN_FILENAME
  			    (char_u *)&p_ssl, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"shelltemp",   "stmp", P_BOOL,
  			    (char_u *)&p_stmp, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)TRUE} SCRIPTID_INIT},
      {"shelltype",   "st",   P_NUM|P_VI_DEF,
  #ifdef AMIGA
  			    (char_u *)&p_st, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"shellxquote", "sxq",  P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_sxq, PV_NONE,
  			    {
***************
*** 2200,2229 ****
  #else
  			    (char_u *)"",
  #endif
! 				(char_u *)0L}},
      {"shiftround",  "sr",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_sr, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"shiftwidth",  "sw",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_sw, PV_SW,
! 			    {(char_u *)8L, (char_u *)0L}},
      {"shortmess",   "shm",  P_STRING|P_VIM|P_FLAGLIST,
  			    (char_u *)&p_shm, PV_NONE,
! 			    {(char_u *)"", (char_u *)"filnxtToO"}},
      {"shortname",   "sn",   P_BOOL|P_VI_DEF,
  #ifdef SHORT_FNAME
  			    (char_u *)NULL, PV_NONE,
  #else
  			    (char_u *)&p_sn, PV_SN,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"showbreak",   "sbr",  P_STRING|P_VI_DEF|P_RALL,
  #ifdef FEAT_LINEBREAK
  			    (char_u *)&p_sbr, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"showcmd",	    "sc",   P_BOOL|P_VIM,
  #ifdef FEAT_CMDL_INFO
  			    (char_u *)&p_sc, PV_NONE,
--- 2217,2247 ----
  #else
  			    (char_u *)"",
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"shiftround",  "sr",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_sr, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"shiftwidth",  "sw",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_sw, PV_SW,
! 			    {(char_u *)8L, (char_u *)0L} SCRIPTID_INIT},
      {"shortmess",   "shm",  P_STRING|P_VIM|P_FLAGLIST,
  			    (char_u *)&p_shm, PV_NONE,
! 			    {(char_u *)"", (char_u *)"filnxtToO"}
! 			    SCRIPTID_INIT},
      {"shortname",   "sn",   P_BOOL|P_VI_DEF,
  #ifdef SHORT_FNAME
  			    (char_u *)NULL, PV_NONE,
  #else
  			    (char_u *)&p_sn, PV_SN,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"showbreak",   "sbr",  P_STRING|P_VI_DEF|P_RALL,
  #ifdef FEAT_LINEBREAK
  			    (char_u *)&p_sbr, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"showcmd",	    "sc",   P_BOOL|P_VIM,
  #ifdef FEAT_CMDL_INFO
  			    (char_u *)&p_sc, PV_NONE,
***************
*** 2236,2293 ****
  #else
  				(char_u *)TRUE
  #endif
! 				}},
      {"showfulltag", "sft",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_sft, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"showmatch",   "sm",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_sm, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"showmode",    "smd",  P_BOOL|P_VIM,
  			    (char_u *)&p_smd, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)TRUE}},
      {"showtabline", "stal", P_NUM|P_VI_DEF|P_RALL,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_stal, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)1L, (char_u *)0L}},
      {"sidescroll",  "ss",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_ss, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"sidescrolloff", "siso", P_NUM|P_VI_DEF|P_VIM|P_RBUF,
  			    (char_u *)&p_siso, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"slowopen",    "slow", P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"smartcase",   "scs",  P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_scs, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"smartindent", "si",   P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_SMARTINDENT
  			    (char_u *)&p_si, PV_SI,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"smarttab",    "sta",  P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_sta, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"softtabstop", "sts",  P_NUM|P_VI_DEF|P_VIM,
  			    (char_u *)&p_sts, PV_STS,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"sourceany",   NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"spell",	    NULL,   P_BOOL|P_VI_DEF|P_RWIN,
  #ifdef FEAT_SPELL
  			    (char_u *)VAR_WIN, PV_SPELL,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"spellcapcheck", "spc", P_STRING|P_ALLOCED|P_VI_DEF|P_RBUF,
  #ifdef FEAT_SPELL
  			    (char_u *)&p_spc, PV_SPC,
--- 2254,2311 ----
  #else
  				(char_u *)TRUE
  #endif
! 				} SCRIPTID_INIT},
      {"showfulltag", "sft",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_sft, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"showmatch",   "sm",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_sm, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"showmode",    "smd",  P_BOOL|P_VIM,
  			    (char_u *)&p_smd, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)TRUE} SCRIPTID_INIT},
      {"showtabline", "stal", P_NUM|P_VI_DEF|P_RALL,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_stal, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)1L, (char_u *)0L} SCRIPTID_INIT},
      {"sidescroll",  "ss",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_ss, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"sidescrolloff", "siso", P_NUM|P_VI_DEF|P_VIM|P_RBUF,
  			    (char_u *)&p_siso, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"slowopen",    "slow", P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"smartcase",   "scs",  P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_scs, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"smartindent", "si",   P_BOOL|P_VI_DEF|P_VIM,
  #ifdef FEAT_SMARTINDENT
  			    (char_u *)&p_si, PV_SI,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"smarttab",    "sta",  P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_sta, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"softtabstop", "sts",  P_NUM|P_VI_DEF|P_VIM,
  			    (char_u *)&p_sts, PV_STS,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"sourceany",   NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"spell",	    NULL,   P_BOOL|P_VI_DEF|P_RWIN,
  #ifdef FEAT_SPELL
  			    (char_u *)VAR_WIN, PV_SPELL,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"spellcapcheck", "spc", P_STRING|P_ALLOCED|P_VI_DEF|P_RBUF,
  #ifdef FEAT_SPELL
  			    (char_u *)&p_spc, PV_SPC,
***************
*** 2296,2302 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"spellfile",   "spf",  P_STRING|P_EXPAND|P_ALLOCED|P_VI_DEF|P_SECURE|P_COMMA,
  #ifdef FEAT_SPELL
  			    (char_u *)&p_spf, PV_SPF,
--- 2314,2320 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"spellfile",   "spf",  P_STRING|P_EXPAND|P_ALLOCED|P_VI_DEF|P_SECURE|P_COMMA,
  #ifdef FEAT_SPELL
  			    (char_u *)&p_spf, PV_SPF,
***************
*** 2305,2311 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"spelllang",   "spl",  P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_RBUF|P_EXPAND,
  #ifdef FEAT_SPELL
  			    (char_u *)&p_spl, PV_SPL,
--- 2323,2329 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"spelllang",   "spl",  P_STRING|P_ALLOCED|P_VI_DEF|P_COMMA|P_RBUF|P_EXPAND,
  #ifdef FEAT_SPELL
  			    (char_u *)&p_spl, PV_SPL,
***************
*** 2314,2320 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"spellsuggest", "sps", P_STRING|P_VI_DEF|P_EXPAND|P_SECURE|P_COMMA,
  #ifdef FEAT_SPELL
  			    (char_u *)&p_sps, PV_NONE,
--- 2332,2338 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"spellsuggest", "sps", P_STRING|P_VI_DEF|P_EXPAND|P_SECURE|P_COMMA,
  #ifdef FEAT_SPELL
  			    (char_u *)&p_sps, PV_NONE,
***************
*** 2323,2357 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
!     },
      {"splitbelow",  "sb",   P_BOOL|P_VI_DEF,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_sb, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"splitright",  "spr",  P_BOOL|P_VI_DEF,
  #ifdef FEAT_VERTSPLIT
  			    (char_u *)&p_spr, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"startofline", "sol",  P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_sol, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"statusline"  ,"stl",  P_STRING|P_VI_DEF|P_ALLOCED|P_RSTAT,
  #ifdef FEAT_STL_OPT
  			    (char_u *)&p_stl, PV_STL,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"suffixes",    "su",   P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_su, PV_NONE,
  			    {(char_u *)".bak,~,.o,.h,.info,.swp,.obj",
! 				(char_u *)0L}},
      {"suffixesadd", "sua",  P_STRING|P_VI_DEF|P_ALLOCED|P_COMMA|P_NODUP,
  #ifdef FEAT_SEARCHPATH
  			    (char_u *)&p_sua, PV_SUA,
--- 2341,2375 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"splitbelow",  "sb",   P_BOOL|P_VI_DEF,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_sb, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"splitright",  "spr",  P_BOOL|P_VI_DEF,
  #ifdef FEAT_VERTSPLIT
  			    (char_u *)&p_spr, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"startofline", "sol",  P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_sol, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"statusline"  ,"stl",  P_STRING|P_VI_DEF|P_ALLOCED|P_RSTAT,
  #ifdef FEAT_STL_OPT
  			    (char_u *)&p_stl, PV_STL,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"suffixes",    "su",   P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_su, PV_NONE,
  			    {(char_u *)".bak,~,.o,.h,.info,.swp,.obj",
! 				(char_u *)0L} SCRIPTID_INIT},
      {"suffixesadd", "sua",  P_STRING|P_VI_DEF|P_ALLOCED|P_COMMA|P_NODUP,
  #ifdef FEAT_SEARCHPATH
  			    (char_u *)&p_sua, PV_SUA,
***************
*** 2360,2375 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"swapfile",    "swf",  P_BOOL|P_VI_DEF|P_RSTAT,
  			    (char_u *)&p_swf, PV_SWF,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"swapsync",    "sws",  P_STRING|P_VI_DEF,
  			    (char_u *)&p_sws, PV_NONE,
! 			    {(char_u *)"fsync", (char_u *)0L}},
      {"switchbuf",   "swb",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_swb, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L}},
      {"synmaxcol",   "smc",  P_NUM|P_VI_DEF|P_RBUF,
  #ifdef FEAT_SYN_HL
  			    (char_u *)&p_smc, PV_SMC,
--- 2378,2393 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"swapfile",    "swf",  P_BOOL|P_VI_DEF|P_RSTAT,
  			    (char_u *)&p_swf, PV_SWF,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"swapsync",    "sws",  P_STRING|P_VI_DEF,
  			    (char_u *)&p_sws, PV_NONE,
! 			    {(char_u *)"fsync", (char_u *)0L} SCRIPTID_INIT},
      {"switchbuf",   "swb",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_swb, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"synmaxcol",   "smc",  P_NUM|P_VI_DEF|P_RBUF,
  #ifdef FEAT_SYN_HL
  			    (char_u *)&p_smc, PV_SMC,
***************
*** 2378,2384 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"syntax",	    "syn",  P_STRING|P_ALLOCED|P_VI_DEF|P_NOGLOB|P_NFNAME,
  #ifdef FEAT_SYN_HL
  			    (char_u *)&p_syn, PV_SYN,
--- 2396,2402 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"syntax",	    "syn",  P_STRING|P_ALLOCED|P_VI_DEF|P_NOGLOB|P_NFNAME,
  #ifdef FEAT_SYN_HL
  			    (char_u *)&p_syn, PV_SYN,
***************
*** 2387,2410 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"tabline",	    "tal",  P_STRING|P_VI_DEF|P_RALL,
  #ifdef FEAT_STL_OPT
  			    (char_u *)&p_tal, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"tabpagemax",  "tpm",  P_NUM|P_VI_DEF,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_tpm, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)10L, (char_u *)0L}},
      {"tabstop",	    "ts",   P_NUM|P_VI_DEF|P_RBUF,
  			    (char_u *)&p_ts, PV_TS,
! 			    {(char_u *)8L, (char_u *)0L}},
      {"tagbsearch",  "tbs",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_tbs, PV_NONE,
  #ifdef VMS	/* binary searching doesn't appear to work on VMS */
--- 2405,2428 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"tabline",	    "tal",  P_STRING|P_VI_DEF|P_RALL,
  #ifdef FEAT_STL_OPT
  			    (char_u *)&p_tal, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"tabpagemax",  "tpm",  P_NUM|P_VI_DEF,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_tpm, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)10L, (char_u *)0L} SCRIPTID_INIT},
      {"tabstop",	    "ts",   P_NUM|P_VI_DEF|P_RBUF,
  			    (char_u *)&p_ts, PV_TS,
! 			    {(char_u *)8L, (char_u *)0L} SCRIPTID_INIT},
      {"tagbsearch",  "tbs",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_tbs, PV_NONE,
  #ifdef VMS	/* binary searching doesn't appear to work on VMS */
***************
*** 2412,2424 ****
  #else
  			    {(char_u *)TRUE, (char_u *)0L}
  #endif
! 			    },
      {"taglength",   "tl",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_tl, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"tagrelative", "tr",   P_BOOL|P_VIM,
  			    (char_u *)&p_tr, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)TRUE}},
      {"tags",	    "tag",  P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_tags, PV_TAGS,
  			    {
--- 2430,2442 ----
  #else
  			    {(char_u *)TRUE, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"taglength",   "tl",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_tl, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"tagrelative", "tr",   P_BOOL|P_VIM,
  			    (char_u *)&p_tr, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)TRUE} SCRIPTID_INIT},
      {"tags",	    "tag",  P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_tags, PV_TAGS,
  			    {
***************
*** 2427,2446 ****
  #else
  			    (char_u *)"./tags,tags",
  #endif
! 				(char_u *)0L}},
      {"tagstack",    "tgst", P_BOOL|P_VI_DEF,
  			    (char_u *)&p_tgst, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"term",	    NULL,   P_STRING|P_EXPAND|P_NODEFAULT|P_NO_MKRC|P_VI_DEF|P_RALL,
  			    (char_u *)&T_NAME, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L}},
      {"termbidi", "tbidi",   P_BOOL|P_VI_DEF,
  #ifdef FEAT_ARABIC
  			    (char_u *)&p_tbidi, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"termencoding", "tenc", P_STRING|P_VI_DEF|P_RCLR,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_tenc, PV_NONE,
--- 2445,2464 ----
  #else
  			    (char_u *)"./tags,tags",
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"tagstack",    "tgst", P_BOOL|P_VI_DEF,
  			    (char_u *)&p_tgst, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"term",	    NULL,   P_STRING|P_EXPAND|P_NODEFAULT|P_NO_MKRC|P_VI_DEF|P_RALL,
  			    (char_u *)&T_NAME, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"termbidi", "tbidi",   P_BOOL|P_VI_DEF,
  #ifdef FEAT_ARABIC
  			    (char_u *)&p_tbidi, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"termencoding", "tenc", P_STRING|P_VI_DEF|P_RCLR,
  #ifdef FEAT_MBYTE
  			    (char_u *)&p_tenc, PV_NONE,
***************
*** 2449,2461 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"terse",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_terse, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"textauto",    "ta",   P_BOOL|P_VIM,
  			    (char_u *)&p_ta, PV_NONE,
! 			    {(char_u *)DFLT_TEXTAUTO, (char_u *)TRUE}},
      {"textmode",    "tx",   P_BOOL|P_VI_DEF|P_NO_MKRC,
  			    (char_u *)&p_tx, PV_TX,
  			    {
--- 2467,2480 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"terse",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_terse, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"textauto",    "ta",   P_BOOL|P_VIM,
  			    (char_u *)&p_ta, PV_NONE,
! 			    {(char_u *)DFLT_TEXTAUTO, (char_u *)TRUE}
! 			    SCRIPTID_INIT},
      {"textmode",    "tx",   P_BOOL|P_VI_DEF|P_NO_MKRC,
  			    (char_u *)&p_tx, PV_TX,
  			    {
***************
*** 2464,2503 ****
  #else
  			    (char_u *)FALSE,
  #endif
! 				(char_u *)0L}},
      {"textwidth",   "tw",   P_NUM|P_VI_DEF|P_VIM,
  			    (char_u *)&p_tw, PV_TW,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"thesaurus",   "tsr",  P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_INS_EXPAND
  			    (char_u *)&p_tsr, PV_TSR,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"tildeop",	    "top",  P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_to, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"timeout",	    "to",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_timeout, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"timeoutlen",  "tm",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_tm, PV_NONE,
! 			    {(char_u *)1000L, (char_u *)0L}},
      {"title",	    NULL,   P_BOOL|P_VI_DEF,
  #ifdef FEAT_TITLE
  			    (char_u *)&p_title, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"titlelen",    NULL,   P_NUM|P_VI_DEF,
  #ifdef FEAT_TITLE
  			    (char_u *)&p_titlelen, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)85L, (char_u *)0L}},
      {"titleold",    NULL,   P_STRING|P_VI_DEF|P_GETTEXT|P_SECURE|P_NO_MKRC,
  #ifdef FEAT_TITLE
  			    (char_u *)&p_titleold, PV_NONE,
--- 2483,2522 ----
  #else
  			    (char_u *)FALSE,
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"textwidth",   "tw",   P_NUM|P_VI_DEF|P_VIM,
  			    (char_u *)&p_tw, PV_TW,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"thesaurus",   "tsr",  P_STRING|P_EXPAND|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_INS_EXPAND
  			    (char_u *)&p_tsr, PV_TSR,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"tildeop",	    "top",  P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_to, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"timeout",	    "to",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_timeout, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"timeoutlen",  "tm",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_tm, PV_NONE,
! 			    {(char_u *)1000L, (char_u *)0L} SCRIPTID_INIT},
      {"title",	    NULL,   P_BOOL|P_VI_DEF,
  #ifdef FEAT_TITLE
  			    (char_u *)&p_title, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"titlelen",    NULL,   P_NUM|P_VI_DEF,
  #ifdef FEAT_TITLE
  			    (char_u *)&p_titlelen, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)85L, (char_u *)0L} SCRIPTID_INIT},
      {"titleold",    NULL,   P_STRING|P_VI_DEF|P_GETTEXT|P_SECURE|P_NO_MKRC,
  #ifdef FEAT_TITLE
  			    (char_u *)&p_titleold, PV_NONE,
***************
*** 2507,2555 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"titlestring", NULL,   P_STRING|P_VI_DEF,
  #ifdef FEAT_TITLE
  			    (char_u *)&p_titlestring, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
  #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_W32)
      {"toolbar",     "tb",   P_STRING|P_COMMA|P_VI_DEF|P_NODUP,
  			    (char_u *)&p_toolbar, PV_NONE,
! 			    {(char_u *)"icons,tooltips", (char_u *)0L}},
  #endif
  #if defined(FEAT_TOOLBAR) && defined(FEAT_GUI_GTK) && defined(HAVE_GTK2)
      {"toolbariconsize",	"tbis", P_STRING|P_VI_DEF,
  			    (char_u *)&p_tbis, PV_NONE,
! 			    {(char_u *)"small", (char_u *)0L}},
  #endif
      {"ttimeout",    NULL,   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_ttimeout, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"ttimeoutlen", "ttm",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_ttm, PV_NONE,
! 			    {(char_u *)-1L, (char_u *)0L}},
      {"ttybuiltin",  "tbi",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_tbi, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"ttyfast",	    "tf",   P_BOOL|P_NO_MKRC|P_VI_DEF,
  			    (char_u *)&p_tf, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"ttymouse",    "ttym", P_STRING|P_NODEFAULT|P_NO_MKRC|P_VI_DEF,
  #if defined(FEAT_MOUSE) && (defined(UNIX) || defined(VMS))
  			    (char_u *)&p_ttym, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"ttyscroll",   "tsl",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_ttyscroll, PV_NONE,
! 			    {(char_u *)999L, (char_u *)0L}},
      {"ttytype",	    "tty",  P_STRING|P_EXPAND|P_NODEFAULT|P_NO_MKRC|P_VI_DEF|P_RALL,
  			    (char_u *)&T_NAME, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L}},
      {"undolevels",  "ul",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_ul, PV_NONE,
  			    {
--- 2526,2575 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"titlestring", NULL,   P_STRING|P_VI_DEF,
  #ifdef FEAT_TITLE
  			    (char_u *)&p_titlestring, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
  #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_W32)
      {"toolbar",     "tb",   P_STRING|P_COMMA|P_VI_DEF|P_NODUP,
  			    (char_u *)&p_toolbar, PV_NONE,
! 			    {(char_u *)"icons,tooltips", (char_u *)0L}
! 			    SCRIPTID_INIT},
  #endif
  #if defined(FEAT_TOOLBAR) && defined(FEAT_GUI_GTK) && defined(HAVE_GTK2)
      {"toolbariconsize",	"tbis", P_STRING|P_VI_DEF,
  			    (char_u *)&p_tbis, PV_NONE,
! 			    {(char_u *)"small", (char_u *)0L} SCRIPTID_INIT},
  #endif
      {"ttimeout",    NULL,   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_ttimeout, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"ttimeoutlen", "ttm",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_ttm, PV_NONE,
! 			    {(char_u *)-1L, (char_u *)0L} SCRIPTID_INIT},
      {"ttybuiltin",  "tbi",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_tbi, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"ttyfast",	    "tf",   P_BOOL|P_NO_MKRC|P_VI_DEF,
  			    (char_u *)&p_tf, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"ttymouse",    "ttym", P_STRING|P_NODEFAULT|P_NO_MKRC|P_VI_DEF,
  #if defined(FEAT_MOUSE) && (defined(UNIX) || defined(VMS))
  			    (char_u *)&p_ttym, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"ttyscroll",   "tsl",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_ttyscroll, PV_NONE,
! 			    {(char_u *)999L, (char_u *)0L} SCRIPTID_INIT},
      {"ttytype",	    "tty",  P_STRING|P_EXPAND|P_NODEFAULT|P_NO_MKRC|P_VI_DEF|P_RALL,
  			    (char_u *)&T_NAME, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"undolevels",  "ul",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_ul, PV_NONE,
  			    {
***************
*** 2558,2576 ****
  #else
  			    (char_u *)100L,
  #endif
! 				(char_u *)0L}},
      {"updatecount", "uc",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_uc, PV_NONE,
! 			    {(char_u *)200L, (char_u *)0L}},
      {"updatetime",  "ut",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_ut, PV_NONE,
! 			    {(char_u *)4000L, (char_u *)0L}},
      {"verbose",	    "vbs",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_verbose, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"verbosefile", "vfile", P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_vfile, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L}},
      {"viewdir",     "vdir", P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  #ifdef FEAT_SESSION
  			    (char_u *)&p_vdir, PV_NONE,
--- 2578,2596 ----
  #else
  			    (char_u *)100L,
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"updatecount", "uc",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_uc, PV_NONE,
! 			    {(char_u *)200L, (char_u *)0L} SCRIPTID_INIT},
      {"updatetime",  "ut",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_ut, PV_NONE,
! 			    {(char_u *)4000L, (char_u *)0L} SCRIPTID_INIT},
      {"verbose",	    "vbs",  P_NUM|P_VI_DEF,
  			    (char_u *)&p_verbose, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"verbosefile", "vfile", P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_vfile, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"viewdir",     "vdir", P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
  #ifdef FEAT_SESSION
  			    (char_u *)&p_vdir, PV_NONE,
***************
*** 2579,2585 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"viewoptions", "vop",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_SESSION
  			    (char_u *)&p_vop, PV_NONE,
--- 2599,2605 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"viewoptions", "vop",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_SESSION
  			    (char_u *)&p_vop, PV_NONE,
***************
*** 2588,2594 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"viminfo",	    "vi",   P_STRING|P_COMMA|P_NODUP|P_SECURE,
  #ifdef FEAT_VIMINFO
  			    (char_u *)&p_viminfo, PV_NONE,
--- 2608,2614 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"viminfo",	    "vi",   P_STRING|P_COMMA|P_NODUP|P_SECURE,
  #ifdef FEAT_VIMINFO
  			    (char_u *)&p_viminfo, PV_NONE,
***************
*** 2606,2612 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"virtualedit", "ve",   P_STRING|P_COMMA|P_NODUP|P_VI_DEF|P_VIM,
  #ifdef FEAT_VIRTUALEDIT
  			    (char_u *)&p_ve, PV_NONE,
--- 2626,2632 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"virtualedit", "ve",   P_STRING|P_COMMA|P_NODUP|P_VI_DEF|P_VIM,
  #ifdef FEAT_VIRTUALEDIT
  			    (char_u *)&p_ve, PV_NONE,
***************
*** 2615,2665 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    },
      {"visualbell",  "vb",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_vb, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"w300",	    NULL,   P_NUM|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"w1200",	    NULL,   P_NUM|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"w9600",	    NULL,   P_NUM|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"warn",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_warn, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"weirdinvert", "wiv",  P_BOOL|P_VI_DEF|P_RCLR,
  			    (char_u *)&p_wiv, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"whichwrap",   "ww",   P_STRING|P_VIM|P_COMMA|P_FLAGLIST,
  			    (char_u *)&p_ww, PV_NONE,
! 			    {(char_u *)"", (char_u *)"b,s"}},
      {"wildchar",    "wc",   P_NUM|P_VIM,
  			    (char_u *)&p_wc, PV_NONE,
! 			    {(char_u *)(long)Ctrl_E, (char_u *)(long)TAB}},
      {"wildcharm",   "wcm",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_wcm, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"wildignore",  "wig",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_WILDIGN
  			    (char_u *)&p_wig, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L}},
      {"wildmenu",    "wmnu", P_BOOL|P_VI_DEF,
  #ifdef FEAT_WILDMENU
  			    (char_u *)&p_wmnu, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"wildmode",    "wim",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_wim, PV_NONE,
! 			    {(char_u *)"full", (char_u *)0L}},
      {"wildoptions", "wop",  P_STRING|P_VI_DEF,
  #ifdef FEAT_CMDL_COMPL
  			    (char_u *)&p_wop, PV_NONE,
--- 2635,2686 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)0L, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"visualbell",  "vb",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_vb, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"w300",	    NULL,   P_NUM|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"w1200",	    NULL,   P_NUM|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"w9600",	    NULL,   P_NUM|P_VI_DEF,
  			    (char_u *)NULL, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"warn",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_warn, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"weirdinvert", "wiv",  P_BOOL|P_VI_DEF|P_RCLR,
  			    (char_u *)&p_wiv, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"whichwrap",   "ww",   P_STRING|P_VIM|P_COMMA|P_FLAGLIST,
  			    (char_u *)&p_ww, PV_NONE,
! 			    {(char_u *)"", (char_u *)"b,s"} SCRIPTID_INIT},
      {"wildchar",    "wc",   P_NUM|P_VIM,
  			    (char_u *)&p_wc, PV_NONE,
! 			    {(char_u *)(long)Ctrl_E, (char_u *)(long)TAB}
! 			    SCRIPTID_INIT},
      {"wildcharm",   "wcm",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_wcm, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"wildignore",  "wig",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  #ifdef FEAT_WILDIGN
  			    (char_u *)&p_wig, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
      {"wildmenu",    "wmnu", P_BOOL|P_VI_DEF,
  #ifdef FEAT_WILDMENU
  			    (char_u *)&p_wmnu, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"wildmode",    "wim",  P_STRING|P_VI_DEF|P_COMMA|P_NODUP,
  			    (char_u *)&p_wim, PV_NONE,
! 			    {(char_u *)"full", (char_u *)0L} SCRIPTID_INIT},
      {"wildoptions", "wop",  P_STRING|P_VI_DEF,
  #ifdef FEAT_CMDL_COMPL
  			    (char_u *)&p_wop, PV_NONE,
***************
*** 2668,2674 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"winaltkeys",  "wak",  P_STRING|P_VI_DEF,
  #ifdef FEAT_WAK
  			    (char_u *)&p_wak, PV_NONE,
--- 2689,2695 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"winaltkeys",  "wak",  P_STRING|P_VI_DEF,
  #ifdef FEAT_WAK
  			    (char_u *)&p_wak, PV_NONE,
***************
*** 2677,2743 ****
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    },
      {"window",	    "wi",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_window, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"winheight",   "wh",   P_NUM|P_VI_DEF,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_wh, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)1L, (char_u *)0L}},
      {"winfixheight", "wfh", P_BOOL|P_VI_DEF|P_RSTAT,
  #ifdef FEAT_WINDOWS
  			    (char_u *)VAR_WIN, PV_WFH,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"winfixwidth", "wfw", P_BOOL|P_VI_DEF|P_RSTAT,
  #ifdef FEAT_VERTSPLIT
  			    (char_u *)VAR_WIN, PV_WFW,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"winminheight", "wmh", P_NUM|P_VI_DEF,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_wmh, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)1L, (char_u *)0L}},
      {"winminwidth", "wmw", P_NUM|P_VI_DEF,
  #ifdef FEAT_VERTSPLIT
  			    (char_u *)&p_wmw, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)1L, (char_u *)0L}},
      {"winwidth",   "wiw",   P_NUM|P_VI_DEF,
  #ifdef FEAT_VERTSPLIT
  			    (char_u *)&p_wiw, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)20L, (char_u *)0L}},
      {"wrap",	    NULL,   P_BOOL|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_WRAP,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"wrapmargin",  "wm",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_wm, PV_WM,
! 			    {(char_u *)0L, (char_u *)0L}},
      {"wrapscan",    "ws",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_ws, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"write",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_write, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L}},
      {"writeany",    "wa",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_wa, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L}},
      {"writebackup", "wb",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_wb, PV_NONE,
  			    {
--- 2698,2764 ----
  			    (char_u *)NULL, PV_NONE,
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
! 			    SCRIPTID_INIT},
      {"window",	    "wi",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_window, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"winheight",   "wh",   P_NUM|P_VI_DEF,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_wh, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)1L, (char_u *)0L} SCRIPTID_INIT},
      {"winfixheight", "wfh", P_BOOL|P_VI_DEF|P_RSTAT,
  #ifdef FEAT_WINDOWS
  			    (char_u *)VAR_WIN, PV_WFH,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"winfixwidth", "wfw", P_BOOL|P_VI_DEF|P_RSTAT,
  #ifdef FEAT_VERTSPLIT
  			    (char_u *)VAR_WIN, PV_WFW,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"winminheight", "wmh", P_NUM|P_VI_DEF,
  #ifdef FEAT_WINDOWS
  			    (char_u *)&p_wmh, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)1L, (char_u *)0L} SCRIPTID_INIT},
      {"winminwidth", "wmw", P_NUM|P_VI_DEF,
  #ifdef FEAT_VERTSPLIT
  			    (char_u *)&p_wmw, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)1L, (char_u *)0L} SCRIPTID_INIT},
      {"winwidth",   "wiw",   P_NUM|P_VI_DEF,
  #ifdef FEAT_VERTSPLIT
  			    (char_u *)&p_wiw, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! 			    {(char_u *)20L, (char_u *)0L} SCRIPTID_INIT},
      {"wrap",	    NULL,   P_BOOL|P_VI_DEF|P_RWIN,
  			    (char_u *)VAR_WIN, PV_WRAP,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"wrapmargin",  "wm",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_wm, PV_WM,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
      {"wrapscan",    "ws",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_ws, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"write",	    NULL,   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_write, PV_NONE,
! 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
      {"writeany",    "wa",   P_BOOL|P_VI_DEF,
  			    (char_u *)&p_wa, PV_NONE,
! 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
      {"writebackup", "wb",   P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_wb, PV_NONE,
  			    {
***************
*** 2746,2760 ****
  #else
  			    (char_u *)FALSE,
  #endif
! 				(char_u *)0L}},
      {"writedelay",  "wd",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_wd, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L}},
  
  /* terminal output codes */
  #define p_term(sss, vvv)   {sss, NULL, P_STRING|P_VI_DEF|P_RALL|P_SECURE, \
  			    (char_u *)&vvv, PV_NONE, \
! 			    {(char_u *)"", (char_u *)0L}},
  
      p_term("t_AB", T_CAB)
      p_term("t_AF", T_CAF)
--- 2767,2781 ----
  #else
  			    (char_u *)FALSE,
  #endif
! 				(char_u *)0L} SCRIPTID_INIT},
      {"writedelay",  "wd",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_wd, PV_NONE,
! 			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
  
  /* terminal output codes */
  #define p_term(sss, vvv)   {sss, NULL, P_STRING|P_VI_DEF|P_RALL|P_SECURE, \
  			    (char_u *)&vvv, PV_NONE, \
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
  
      p_term("t_AB", T_CAB)
      p_term("t_AF", T_CAF)
***************
*** 2815,2821 ****
  
  /* terminal key codes are not in here */
  
!     {NULL, NULL, 0, NULL, PV_NONE, {NULL, NULL}}	/* end marker */
  };
  
  #define PARAM_COUNT (sizeof(options) / sizeof(struct vimoption))
--- 2836,2843 ----
  
  /* terminal key codes are not in here */
  
!     /* end marker */
!     {NULL, NULL, 0, NULL, PV_NONE, {NULL, NULL} SCRIPTID_INIT}
  };
  
  #define PARAM_COUNT (sizeof(options) / sizeof(struct vimoption))
***************
*** 9917,9923 ****
  	regmatch->rm_ic = ic;
  	if (xp->xp_context != EXPAND_BOOL_SETTINGS)
  	{
! 	    for (match = 0; match < sizeof(names) / sizeof(char *); ++match)
  		if (vim_regexec(regmatch, (char_u *)names[match], (colnr_T)0))
  		{
  		    if (loop == 0)
--- 9939,9946 ----
  	regmatch->rm_ic = ic;
  	if (xp->xp_context != EXPAND_BOOL_SETTINGS)
  	{
! 	    for (match = 0; match < (int)(sizeof(names) / sizeof(char *));
! 								      ++match)
  		if (vim_regexec(regmatch, (char_u *)names[match], (colnr_T)0))
  		{
  		    if (loop == 0)
*** ../vim-7.2.179/src/os_unix.c	2009-05-16 16:36:25.000000000 +0200
--- src/os_unix.c	2009-05-17 12:17:01.000000000 +0200
***************
*** 821,827 ****
  #endif
  
  #if defined(SIGINT)
- /* ARGSUSED */
      static RETSIGTYPE
  catch_sigint SIGDEFARG(sigarg)
  {
--- 821,826 ----
***************
*** 833,839 ****
  #endif
  
  #if defined(SIGPWR)
- /* ARGSUSED */
      static RETSIGTYPE
  catch_sigpwr SIGDEFARG(sigarg)
  {
--- 832,837 ----
***************
*** 853,859 ****
  /*
   * signal function for alarm().
   */
- /* ARGSUSED */
      static RETSIGTYPE
  sig_alarm SIGDEFARG(sigarg)
  {
--- 851,856 ----
***************
*** 1087,1093 ****
  /*
   * signal handler for SIGCONT
   */
- /* ARGSUSED */
      static RETSIGTYPE
  sigcont_handler SIGDEFARG(sigarg)
  {
--- 1084,1089 ----
***************
*** 1436,1446 ****
  /*
   * Another X Error handler, just used to check for errors.
   */
- /* ARGSUSED */
      static int
  x_error_check(dpy, error_event)
!     Display *dpy;
!     XErrorEvent	*error_event;
  {
      got_x_error = TRUE;
      return 0;
--- 1432,1441 ----
  /*
   * Another X Error handler, just used to check for errors.
   */
      static int
  x_error_check(dpy, error_event)
!     Display *dpy UNUSED;
!     XErrorEvent	*error_event UNUSED;
  {
      got_x_error = TRUE;
      return 0;
***************
*** 1453,1467 ****
   */
  static int x_IOerror_check __ARGS((Display *dpy));
  
- /* ARGSUSED */
      static int
  x_IOerror_check(dpy)
!     Display *dpy;
  {
      /* This function should not return, it causes exit().  Longjump instead. */
      LONGJMP(lc_jump_env, 1);
-     /*NOTREACHED*/
-     return 0;
  }
  # endif
  
--- 1448,1459 ----
   */
  static int x_IOerror_check __ARGS((Display *dpy));
  
      static int
  x_IOerror_check(dpy)
!     Display *dpy UNUSED;
  {
      /* This function should not return, it causes exit().  Longjump instead. */
      LONGJMP(lc_jump_env, 1);
  }
  # endif
  
***************
*** 1470,1479 ****
   */
  static int x_IOerror_handler __ARGS((Display *dpy));
  
- /* ARGSUSED */
      static int
  x_IOerror_handler(dpy)
!     Display *dpy;
  {
      xterm_dpy = NULL;
      x11_window = 0;
--- 1462,1470 ----
   */
  static int x_IOerror_handler __ARGS((Display *dpy));
  
      static int
  x_IOerror_handler(dpy)
!     Display *dpy UNUSED;
  {
      xterm_dpy = NULL;
      x11_window = 0;
***************
*** 1482,1489 ****
  
      /* This function should not return, it causes exit().  Longjump instead. */
      LONGJMP(x_jump_env, 1);
-     /*NOTREACHED*/
-     return 0;
  }
  #endif
  
--- 1473,1478 ----
***************
*** 1919,1928 ****
  
  #else  /* FEAT_X11 */
  
- /*ARGSUSED*/
      static int
  get_x11_title(test_only)
!     int	    test_only;
  {
      return FALSE;
  }
--- 1908,1916 ----
  
  #else  /* FEAT_X11 */
  
      static int
  get_x11_title(test_only)
!     int	    test_only UNUSED;
  {
      return FALSE;
  }
***************
*** 2497,2507 ****
   * file name to remain exactly the same.
   * Only required for file systems where case is ignored and preserved.
   */
- /*ARGSUSED*/
      void
  fname_case(name, len)
      char_u	*name;
!     int		len;	    /* buffer size, only used when name gets longer */
  {
      struct stat st;
      char_u	*slash, *tail;
--- 2485,2494 ----
   * file name to remain exactly the same.
   * Only required for file systems where case is ignored and preserved.
   */
      void
  fname_case(name, len)
      char_u	*name;
!     int		len UNUSED;  /* buffer size, only used when name gets longer */
  {
      struct stat st;
      char_u	*slash, *tail;
***************
*** 5141,5147 ****
  
  #define SHELL_SPECIAL (char_u *)"\t \"&'$;<>()\\|"
  
- /* ARGSUSED */
      int
  mch_expand_wildcards(num_pat, pat, num_file, file, flags)
      int		   num_pat;
--- 5128,5133 ----
***************
*** 6068,6074 ****
  /*
   * Gets info from sysmouse and adds special keys to input buf.
   */
- /* ARGSUSED */
      static RETSIGTYPE
  sig_sysmouse SIGDEFARG(sigarg)
  {
--- 6054,6059 ----
***************
*** 6632,6642 ****
   * This is our chance to ask the user if they want to save,
   * or abort the logout
   */
- /*ARGSUSED*/
      static void
  xsmp_handle_interaction(smc_conn, client_data)
      SmcConn	smc_conn;
!     SmPointer	client_data;
  {
      cmdmod_T	save_cmdmod;
      int		cancel_shutdown = False;
--- 6617,6626 ----
   * This is our chance to ask the user if they want to save,
   * or abort the logout
   */
      static void
  xsmp_handle_interaction(smc_conn, client_data)
      SmcConn	smc_conn;
!     SmPointer	client_data UNUSED;
  {
      cmdmod_T	save_cmdmod;
      int		cancel_shutdown = False;
***************
*** 6669,6684 ****
  /*
   * Callback that starts save-yourself.
   */
- /*ARGSUSED*/
      static void
  xsmp_handle_save_yourself(smc_conn, client_data, save_type,
  					       shutdown, interact_style, fast)
      SmcConn	smc_conn;
!     SmPointer	client_data;
!     int		save_type;
      Bool	shutdown;
!     int		interact_style;
!     Bool	fast;
  {
      /* Handle already being in saveyourself */
      if (xsmp.save_yourself)
--- 6653,6667 ----
  /*
   * Callback that starts save-yourself.
   */
      static void
  xsmp_handle_save_yourself(smc_conn, client_data, save_type,
  					       shutdown, interact_style, fast)
      SmcConn	smc_conn;
!     SmPointer	client_data UNUSED;
!     int		save_type UNUSED;
      Bool	shutdown;
!     int		interact_style UNUSED;
!     Bool	fast UNUSED;
  {
      /* Handle already being in saveyourself */
      if (xsmp.save_yourself)
***************
*** 6712,6722 ****
  /*
   * Callback to warn us of imminent death.
   */
- /*ARGSUSED*/
      static void
  xsmp_die(smc_conn, client_data)
!     SmcConn	smc_conn;
!     SmPointer	client_data;
  {
      xsmp_close();
  
--- 6695,6704 ----
  /*
   * Callback to warn us of imminent death.
   */
      static void
  xsmp_die(smc_conn, client_data)
!     SmcConn	smc_conn UNUSED;
!     SmPointer	client_data UNUSED;
  {
      xsmp_close();
  
***************
*** 6728,6738 ****
  /*
   * Callback to tell us that save-yourself has completed.
   */
- /*ARGSUSED*/
      static void
  xsmp_save_complete(smc_conn, client_data)
!     SmcConn	smc_conn;
!     SmPointer	client_data;
  {
      xsmp.save_yourself = False;
  }
--- 6710,6719 ----
  /*
   * Callback to tell us that save-yourself has completed.
   */
      static void
  xsmp_save_complete(smc_conn, client_data)
!     SmcConn	smc_conn UNUSED;
!     SmPointer	client_data UNUSED;
  {
      xsmp.save_yourself = False;
  }
***************
*** 6742,6752 ****
   * Callback to tell us that an instigated shutdown was cancelled
   * (maybe even by us)
   */
- /*ARGSUSED*/
      static void
  xsmp_shutdown_cancelled(smc_conn, client_data)
      SmcConn	smc_conn;
!     SmPointer	client_data;
  {
      if (xsmp.save_yourself)
  	SmcSaveYourselfDone(smc_conn, True);
--- 6723,6732 ----
   * Callback to tell us that an instigated shutdown was cancelled
   * (maybe even by us)
   */
      static void
  xsmp_shutdown_cancelled(smc_conn, client_data)
      SmcConn	smc_conn;
!     SmPointer	client_data UNUSED;
  {
      if (xsmp.save_yourself)
  	SmcSaveYourselfDone(smc_conn, True);
***************
*** 6758,6770 ****
  /*
   * Callback to tell us that a new ICE connection has been established.
   */
- /*ARGSUSED*/
      static void
  xsmp_ice_connection(iceConn, clientData, opening, watchData)
      IceConn	iceConn;
!     IcePointer	clientData;
      Bool	opening;
!     IcePointer	*watchData;
  {
      /* Intercept creation of ICE connection fd */
      if (opening)
--- 6738,6749 ----
  /*
   * Callback to tell us that a new ICE connection has been established.
   */
      static void
  xsmp_ice_connection(iceConn, clientData, opening, watchData)
      IceConn	iceConn;
!     IcePointer	clientData UNUSED;
      Bool	opening;
!     IcePointer	*watchData UNUSED;
  {
      /* Intercept creation of ICE connection fd */
      if (opening)
*** ../vim-7.2.179/src/quickfix.c	2009-05-13 18:54:14.000000000 +0200
--- src/quickfix.c	2009-05-16 22:31:49.000000000 +0200
***************
*** 2240,2246 ****
   * ":cclose": close the window showing the list of errors.
   * ":lclose": close the window showing the location list
   */
- /*ARGSUSED*/
      void
  ex_cclose(eap)
      exarg_T	*eap;
--- 2240,2245 ----
***************
*** 3211,3217 ****
  			break;
  		    col = regmatch.endpos[0].col
  					    + (col == regmatch.endpos[0].col);
! 		    if (col > STRLEN(ml_get_buf(buf, lnum, FALSE)))
  			break;
  		}
  		line_breakcheck();
--- 3210,3216 ----
  			break;
  		    col = regmatch.endpos[0].col
  					    + (col == regmatch.endpos[0].col);
! 		    if (col > (colnr_T)STRLEN(ml_get_buf(buf, lnum, FALSE)))
  			break;
  		}
  		line_breakcheck();
*** ../vim-7.2.179/src/screen.c	2009-05-13 12:46:36.000000000 +0200
--- src/screen.c	2009-05-16 21:51:13.000000000 +0200
***************
*** 270,280 ****
   * Note that when also inserting/deleting lines w_redraw_top and w_redraw_bot
   * may become invalid and the whole window will have to be redrawn.
   */
- /*ARGSUSED*/
      void
  redrawWinline(lnum, invalid)
      linenr_T	lnum;
!     int		invalid;	/* window line height is invalid now */
  {
  #ifdef FEAT_FOLDING
      int		i;
--- 270,279 ----
   * Note that when also inserting/deleting lines w_redraw_top and w_redraw_bot
   * may become invalid and the whole window will have to be redrawn.
   */
      void
  redrawWinline(lnum, invalid)
      linenr_T	lnum;
!     int		invalid UNUSED;	/* window line height is invalid now */
  {
  #ifdef FEAT_FOLDING
      int		i;
***************
*** 2413,2419 ****
  			&& (lnume < bot->lnum
  			    || (lnume == bot->lnum
  				&& (bot->col - (*p_sel == 'e'))
! 		>= STRLEN(ml_get_buf(wp->w_buffer, lnume, FALSE)))))))
  	{
  	    if (VIsual_mode == Ctrl_V)
  	    {
--- 2412,2418 ----
  			&& (lnume < bot->lnum
  			    || (lnume == bot->lnum
  				&& (bot->col - (*p_sel == 'e'))
! 		>= (colnr_T)STRLEN(ml_get_buf(wp->w_buffer, lnume, FALSE)))))))
  	{
  	    if (VIsual_mode == Ctrl_V)
  	    {
***************
*** 2549,2562 ****
   *
   * Return the number of last row the line occupies.
   */
- /* ARGSUSED */
      static int
  win_line(wp, lnum, startrow, endrow, nochange)
      win_T	*wp;
      linenr_T	lnum;
      int		startrow;
      int		endrow;
!     int		nochange;		/* not updating for changed text */
  {
      int		col;			/* visual column on screen */
      unsigned	off;			/* offset in ScreenLines/ScreenAttrs */
--- 2548,2560 ----
   *
   * Return the number of last row the line occupies.
   */
      static int
  win_line(wp, lnum, startrow, endrow, nochange)
      win_T	*wp;
      linenr_T	lnum;
      int		startrow;
      int		endrow;
!     int		nochange UNUSED;	/* not updating for changed text */
  {
      int		col;			/* visual column on screen */
      unsigned	off;			/* offset in ScreenLines/ScreenAttrs */
***************
*** 6098,6104 ****
  				fillchar, maxwidth, hltab, tabtab);
      len = (int)STRLEN(buf);
  
!     while (width < maxwidth && len < sizeof(buf) - 1)
      {
  #ifdef FEAT_MBYTE
  	len += (*mb_char2bytes)(fillchar, buf + len);
--- 6096,6102 ----
  				fillchar, maxwidth, hltab, tabtab);
      len = (int)STRLEN(buf);
  
!     while (width < maxwidth && len < (int)sizeof(buf) - 1)
      {
  #ifdef FEAT_MBYTE
  	len += (*mb_char2bytes)(fillchar, buf + len);
***************
*** 8655,8661 ****
   *
   * Return OK for success, FAIL if the lines are not deleted.
   */
- /*ARGSUSED*/
      int
  screen_del_lines(off, row, line_count, end, force, wp)
      int		off;
--- 8653,8658 ----
***************
*** 8663,8669 ****
      int		line_count;
      int		end;
      int		force;		/* even when line_count > p_ttyscroll */
!     win_T	*wp;		/* NULL or window to use width from */
  {
      int		j;
      int		i;
--- 8660,8666 ----
      int		line_count;
      int		end;
      int		force;		/* even when line_count > p_ttyscroll */
!     win_T	*wp UNUSED;	/* NULL or window to use width from */
  {
      int		j;
      int		i;
*** ../vim-7.2.179/src/search.c	2009-05-15 21:31:11.000000000 +0200
--- src/search.c	2009-05-16 22:33:05.000000000 +0200
***************
*** 4527,4538 ****
   * Find identifiers or defines in included files.
   * if p_ic && (compl_cont_status & CONT_SOL) then ptr must be in lowercase.
   */
- /*ARGSUSED*/
      void
  find_pattern_in_path(ptr, dir, len, whole, skip_comments,
  				    type, count, action, start_lnum, end_lnum)
      char_u	*ptr;		/* pointer to search pattern */
!     int		dir;		/* direction of expansion */
      int		len;		/* length of search pattern */
      int		whole;		/* match whole words only */
      int		skip_comments;	/* don't match inside comments */
--- 4527,4537 ----
   * Find identifiers or defines in included files.
   * if p_ic && (compl_cont_status & CONT_SOL) then ptr must be in lowercase.
   */
      void
  find_pattern_in_path(ptr, dir, len, whole, skip_comments,
  				    type, count, action, start_lnum, end_lnum)
      char_u	*ptr;		/* pointer to search pattern */
!     int		dir UNUSED;	/* direction of expansion */
      int		len;		/* length of search pattern */
      int		whole;		/* match whole words only */
      int		skip_comments;	/* don't match inside comments */
*** ../vim-7.2.179/src/spell.c	2009-05-13 18:54:14.000000000 +0200
--- src/spell.c	2009-05-16 22:10:19.000000000 +0200
***************
*** 950,957 ****
   */
  #ifndef FEAT_MBYTE
  /* Non-multi-byte implementation. */
! # define SPELL_TOFOLD(c) ((c) < 256 ? spelltab.st_fold[c] : (c))
! # define SPELL_TOUPPER(c) ((c) < 256 ? spelltab.st_upper[c] : (c))
  # define SPELL_ISUPPER(c) ((c) < 256 ? spelltab.st_isu[c] : FALSE)
  #else
  # if defined(HAVE_WCHAR_H)
--- 950,957 ----
   */
  #ifndef FEAT_MBYTE
  /* Non-multi-byte implementation. */
! # define SPELL_TOFOLD(c) ((c) < 256 ? (int)spelltab.st_fold[c] : (c))
! # define SPELL_TOUPPER(c) ((c) < 256 ? (int)spelltab.st_upper[c] : (c))
  # define SPELL_ISUPPER(c) ((c) < 256 ? spelltab.st_isu[c] : FALSE)
  #else
  # if defined(HAVE_WCHAR_H)
***************
*** 962,979 ****
   * the "w" library function for characters above 255 if available. */
  # ifdef HAVE_TOWLOWER
  #  define SPELL_TOFOLD(c) (enc_utf8 && (c) >= 128 ? utf_fold(c) \
! 	    : (c) < 256 ? spelltab.st_fold[c] : towlower(c))
  # else
  #  define SPELL_TOFOLD(c) (enc_utf8 && (c) >= 128 ? utf_fold(c) \
! 	    : (c) < 256 ? spelltab.st_fold[c] : (c))
  # endif
  
  # ifdef HAVE_TOWUPPER
  #  define SPELL_TOUPPER(c) (enc_utf8 && (c) >= 128 ? utf_toupper(c) \
! 	    : (c) < 256 ? spelltab.st_upper[c] : towupper(c))
  # else
  #  define SPELL_TOUPPER(c) (enc_utf8 && (c) >= 128 ? utf_toupper(c) \
! 	    : (c) < 256 ? spelltab.st_upper[c] : (c))
  # endif
  
  # ifdef HAVE_ISWUPPER
--- 962,979 ----
   * the "w" library function for characters above 255 if available. */
  # ifdef HAVE_TOWLOWER
  #  define SPELL_TOFOLD(c) (enc_utf8 && (c) >= 128 ? utf_fold(c) \
! 	    : (c) < 256 ? (int)spelltab.st_fold[c] : (int)towlower(c))
  # else
  #  define SPELL_TOFOLD(c) (enc_utf8 && (c) >= 128 ? utf_fold(c) \
! 	    : (c) < 256 ? (int)spelltab.st_fold[c] : (c))
  # endif
  
  # ifdef HAVE_TOWUPPER
  #  define SPELL_TOUPPER(c) (enc_utf8 && (c) >= 128 ? utf_toupper(c) \
! 	    : (c) < 256 ? (int)spelltab.st_upper[c] : (int)towupper(c))
  # else
  #  define SPELL_TOUPPER(c) (enc_utf8 && (c) >= 128 ? utf_toupper(c) \
! 	    : (c) < 256 ? (int)spelltab.st_upper[c] : (c))
  # endif
  
  # ifdef HAVE_ISWUPPER
***************
*** 8052,8058 ****
      /* time_t can be up to 8 bytes in size, more than long_u, thus we
       * can't use put_bytes() here. */
      for (i = 7; i >= 0; --i)
! 	if (i + 1 > sizeof(time_t))
  	    /* ">>" doesn't work well when shifting more bits than avail */
  	    putc(0, fd);
  	else
--- 8052,8058 ----
      /* time_t can be up to 8 bytes in size, more than long_u, thus we
       * can't use put_bytes() here. */
      for (i = 7; i >= 0; --i)
! 	if (i + 1 > (int)sizeof(time_t))
  	    /* ">>" doesn't work well when shifting more bits than avail */
  	    putc(0, fd);
  	else
***************
*** 10541,10550 ****
  /*
   * ":spellrepall"
   */
- /*ARGSUSED*/
      void
  ex_spellrepall(eap)
!     exarg_T *eap;
  {
      pos_T	pos = curwin->w_cursor;
      char_u	*frompat;
--- 10541,10549 ----
  /*
   * ":spellrepall"
   */
      void
  ex_spellrepall(eap)
!     exarg_T *eap UNUSED;
  {
      pos_T	pos = curwin->w_cursor;
      char_u	*frompat;
***************
*** 15604,15613 ****
  /*
   * ":spellinfo"
   */
- /*ARGSUSED*/
      void
  ex_spellinfo(eap)
!     exarg_T *eap;
  {
      int		lpi;
      langp_T	*lp;
--- 15603,15611 ----
  /*
   * ":spellinfo"
   */
      void
  ex_spellinfo(eap)
!     exarg_T *eap UNUSED;
  {
      int		lpi;
      langp_T	*lp;
***************
*** 16153,16159 ****
   */
      int
  expand_spelling(lnum, pat, matchp)
!     linenr_T	lnum;
      char_u	*pat;
      char_u	***matchp;
  {
--- 16151,16157 ----
   */
      int
  expand_spelling(lnum, pat, matchp)
!     linenr_T	lnum UNUSED;
      char_u	*pat;
      char_u	***matchp;
  {
*** ../vim-7.2.179/src/syntax.c	2008-08-09 19:37:33.000000000 +0200
--- src/syntax.c	2009-05-16 22:14:19.000000000 +0200
***************
*** 3224,3234 ****
  /*
   * Handle ":syntax case" command.
   */
- /* ARGSUSED */
      static void
  syn_cmd_case(eap, syncing)
      exarg_T	*eap;
!     int		syncing;	    /* not used */
  {
      char_u	*arg = eap->arg;
      char_u	*next;
--- 3224,3233 ----
  /*
   * Handle ":syntax case" command.
   */
      static void
  syn_cmd_case(eap, syncing)
      exarg_T	*eap;
!     int		syncing UNUSED;
  {
      char_u	*arg = eap->arg;
      char_u	*next;
***************
*** 3249,3259 ****
  /*
   * Handle ":syntax spell" command.
   */
- /* ARGSUSED */
      static void
  syn_cmd_spell(eap, syncing)
      exarg_T	*eap;
!     int		syncing;	    /* not used */
  {
      char_u	*arg = eap->arg;
      char_u	*next;
--- 3248,3257 ----
  /*
   * Handle ":syntax spell" command.
   */
      static void
  syn_cmd_spell(eap, syncing)
      exarg_T	*eap;
!     int		syncing UNUSED;
  {
      char_u	*arg = eap->arg;
      char_u	*next;
***************
*** 3517,3527 ****
  /*
   * Handle ":syntax on" command.
   */
- /* ARGSUSED */
      static void
  syn_cmd_on(eap, syncing)
      exarg_T	*eap;
!     int		syncing;	/* not used */
  {
      syn_cmd_onoff(eap, "syntax");
  }
--- 3515,3524 ----
  /*
   * Handle ":syntax on" command.
   */
      static void
  syn_cmd_on(eap, syncing)
      exarg_T	*eap;
!     int		syncing UNUSED;
  {
      syn_cmd_onoff(eap, "syntax");
  }
***************
*** 3529,3539 ****
  /*
   * Handle ":syntax enable" command.
   */
- /* ARGSUSED */
      static void
  syn_cmd_enable(eap, syncing)
      exarg_T	*eap;
!     int		syncing;	/* not used */
  {
      set_internal_string_var((char_u *)"syntax_cmd", (char_u *)"enable");
      syn_cmd_onoff(eap, "syntax");
--- 3526,3535 ----
  /*
   * Handle ":syntax enable" command.
   */
      static void
  syn_cmd_enable(eap, syncing)
      exarg_T	*eap;
!     int		syncing UNUSED;
  {
      set_internal_string_var((char_u *)"syntax_cmd", (char_u *)"enable");
      syn_cmd_onoff(eap, "syntax");
***************
*** 3543,3553 ****
  /*
   * Handle ":syntax reset" command.
   */
- /* ARGSUSED */
      static void
  syn_cmd_reset(eap, syncing)
      exarg_T	*eap;
!     int		syncing;	/* not used */
  {
      eap->nextcmd = check_nextcmd(eap->arg);
      if (!eap->skip)
--- 3539,3548 ----
  /*
   * Handle ":syntax reset" command.
   */
      static void
  syn_cmd_reset(eap, syncing)
      exarg_T	*eap;
!     int		syncing UNUSED;
  {
      eap->nextcmd = check_nextcmd(eap->arg);
      if (!eap->skip)
***************
*** 3561,3571 ****
  /*
   * Handle ":syntax manual" command.
   */
- /* ARGSUSED */
      static void
  syn_cmd_manual(eap, syncing)
      exarg_T	*eap;
!     int		syncing;	/* not used */
  {
      syn_cmd_onoff(eap, "manual");
  }
--- 3556,3565 ----
  /*
   * Handle ":syntax manual" command.
   */
      static void
  syn_cmd_manual(eap, syncing)
      exarg_T	*eap;
!     int		syncing UNUSED;
  {
      syn_cmd_onoff(eap, "manual");
  }
***************
*** 3573,3583 ****
  /*
   * Handle ":syntax off" command.
   */
- /* ARGSUSED */
      static void
  syn_cmd_off(eap, syncing)
      exarg_T	*eap;
!     int		syncing;	/* not used */
  {
      syn_cmd_onoff(eap, "nosyntax");
  }
--- 3567,3576 ----
  /*
   * Handle ":syntax off" command.
   */
      static void
  syn_cmd_off(eap, syncing)
      exarg_T	*eap;
!     int		syncing UNUSED;
  {
      syn_cmd_onoff(eap, "nosyntax");
  }
***************
*** 4461,4471 ****
  /*
   * Handle ":syntax include [@{group-name}] filename" command.
   */
- /* ARGSUSED */
      static void
  syn_cmd_include(eap, syncing)
      exarg_T	*eap;
!     int		syncing;	    /* not used */
  {
      char_u	*arg = eap->arg;
      int		sgl_id = 1;
--- 4454,4463 ----
  /*
   * Handle ":syntax include [@{group-name}] filename" command.
   */
      static void
  syn_cmd_include(eap, syncing)
      exarg_T	*eap;
!     int		syncing UNUSED;
  {
      char_u	*arg = eap->arg;
      int		sgl_id = 1;
***************
*** 4532,4542 ****
  /*
   * Handle ":syntax keyword {group-name} [{option}] keyword .." command.
   */
- /* ARGSUSED */
      static void
  syn_cmd_keyword(eap, syncing)
      exarg_T	*eap;
!     int		syncing;	    /* not used */
  {
      char_u	*arg = eap->arg;
      char_u	*group_name_end;
--- 4524,4533 ----
  /*
   * Handle ":syntax keyword {group-name} [{option}] keyword .." command.
   */
      static void
  syn_cmd_keyword(eap, syncing)
      exarg_T	*eap;
!     int		syncing UNUSED;
  {
      char_u	*arg = eap->arg;
      char_u	*group_name_end;
***************
*** 5275,5285 ****
   * Handle ":syntax cluster {cluster-name} [contains={groupname},..]
   *		[add={groupname},..] [remove={groupname},..]".
   */
- /* ARGSUSED */
      static void
  syn_cmd_cluster(eap, syncing)
      exarg_T	*eap;
!     int		syncing;	    /* not used */
  {
      char_u	*arg = eap->arg;
      char_u	*group_name_end;
--- 5266,5275 ----
   * Handle ":syntax cluster {cluster-name} [contains={groupname},..]
   *		[add={groupname},..] [remove={groupname},..]".
   */
      static void
  syn_cmd_cluster(eap, syncing)
      exarg_T	*eap;
!     int		syncing UNUSED;
  {
      char_u	*arg = eap->arg;
      char_u	*group_name_end;
***************
*** 5464,5474 ****
  /*
   * Handle ":syntax sync .." command.
   */
- /* ARGSUSED */
      static void
  syn_cmd_sync(eap, syncing)
      exarg_T	*eap;
!     int		syncing;	    /* not used */
  {
      char_u	*arg_start = eap->arg;
      char_u	*arg_end;
--- 5454,5463 ----
  /*
   * Handle ":syntax sync .." command.
   */
      static void
  syn_cmd_sync(eap, syncing)
      exarg_T	*eap;
!     int		syncing UNUSED;
  {
      char_u	*arg_start = eap->arg;
      char_u	*arg_end;
***************
*** 6099,6108 ****
   * Function given to ExpandGeneric() to obtain the list syntax names for
   * expansion.
   */
- /*ARGSUSED*/
      char_u *
  get_syntax_name(xp, idx)
!     expand_T	*xp;
      int		idx;
  {
      if (expand_what == EXP_SUBCMD)
--- 6088,6096 ----
   * Function given to ExpandGeneric() to obtain the list syntax names for
   * expansion.
   */
      char_u *
  get_syntax_name(xp, idx)
!     expand_T	*xp UNUSED;
      int		idx;
  {
      if (expand_what == EXP_SUBCMD)
***************
*** 7744,7757 ****
  /*
   * Get the font or fontset for one highlight group.
   */
- /*ARGSUSED*/
      static void
  hl_do_font(idx, arg, do_normal, do_menu, do_tooltip)
      int		idx;
      char_u	*arg;
!     int		do_normal;	/* set normal font */
!     int		do_menu;	/* set menu font */
!     int		do_tooltip;	/* set tooltip font */
  {
  # ifdef FEAT_XFONTSET
      /* If 'guifontset' is not empty, first try using the name as a
--- 7732,7744 ----
  /*
   * Get the font or fontset for one highlight group.
   */
      static void
  hl_do_font(idx, arg, do_normal, do_menu, do_tooltip)
      int		idx;
      char_u	*arg;
!     int		do_normal;		/* set normal font */
!     int		do_menu UNUSED;		/* set menu font */
!     int		do_tooltip UNUSED;	/* set tooltip font */
  {
  # ifdef FEAT_XFONTSET
      /* If 'guifontset' is not empty, first try using the name as a
***************
*** 9150,9159 ****
   * Function given to ExpandGeneric() to obtain the list of group names.
   * Also used for synIDattr() function.
   */
- /*ARGSUSED*/
      char_u *
  get_highlight_name(xp, idx)
!     expand_T	*xp;
      int		idx;
  {
  #ifdef FEAT_CMDL_COMPL
--- 9137,9145 ----
   * Function given to ExpandGeneric() to obtain the list of group names.
   * Also used for synIDattr() function.
   */
      char_u *
  get_highlight_name(xp, idx)
!     expand_T	*xp UNUSED;
      int		idx;
  {
  #ifdef FEAT_CMDL_COMPL
*** ../vim-7.2.179/src/tag.c	2009-05-15 21:31:11.000000000 +0200
--- src/tag.c	2009-05-16 22:16:31.000000000 +0200
***************
*** 100,106 ****
   * Tag for preview window is remembered separately, to avoid messing up the
   * normal tagstack.
   */
! static taggy_T ptag_entry = {NULL};
  #endif
  
  /*
--- 100,106 ----
   * Tag for preview window is remembered separately, to avoid messing up the
   * normal tagstack.
   */
! static taggy_T ptag_entry = {NULL, {INIT_POS_T(0, 0, 0), 0}, 0, 0};
  #endif
  
  /*
***************
*** 3791,3797 ****
  		--end;
  	}
  	len = (int)(end - start);
! 	if (len > sizeof(buf) - 1)
  	    len = sizeof(buf) - 1;
  	vim_strncpy(buf, start, len);
      }
--- 3791,3797 ----
  		--end;
  	}
  	len = (int)(end - start);
! 	if (len > (int)sizeof(buf) - 1)
  	    len = sizeof(buf) - 1;
  	vim_strncpy(buf, start, len);
      }
*** ../vim-7.2.179/src/term.c	2009-01-22 18:32:55.000000000 +0100
--- src/term.c	2009-05-16 22:18:08.000000000 +0200
***************
*** 2906,2912 ****
      int	    i;
      int	    shift;
  
!     for (i = 1; i <= sizeof(long_u); i++)
      {
  	shift = 8 * (sizeof(long_u) - i);
  	dst[i - 1] = (char_u) ((val >> shift) & 0xff);
--- 2906,2912 ----
      int	    i;
      int	    shift;
  
!     for (i = 1; i <= (int)sizeof(long_u); i++)
      {
  	shift = 8 * (sizeof(long_u) - i);
  	dst[i - 1] = (char_u) ((val >> shift) & 0xff);
***************
*** 2937,2943 ****
      len = get_bytes_from_buf(buf, bytes, (int)sizeof(long_u));
      if (len != -1)
      {
! 	for (i = 0; i < sizeof(long_u); i++)
  	{
  	    shift = 8 * (sizeof(long_u) - 1 - i);
  	    *val += (long_u)bytes[i] << shift;
--- 2937,2943 ----
      len = get_bytes_from_buf(buf, bytes, (int)sizeof(long_u));
      if (len != -1)
      {
! 	for (i = 0; i < (int)sizeof(long_u); i++)
  	{
  	    shift = 8 * (sizeof(long_u) - 1 - i);
  	    *val += (long_u)bytes[i] << shift;
*** ../vim-7.2.179/src/ui.c	2008-11-28 21:26:50.000000000 +0100
--- src/ui.c	2009-05-16 22:33:55.000000000 +0200
***************
*** 320,329 ****
   * The gui_set_shellsize() or mch_set_shellsize() function will try to set the
   * new size.  If this is not possible, it will adjust Rows and Columns.
   */
- /*ARGSUSED*/
      void
  ui_set_shellsize(mustset)
!     int		mustset;	/* set by the user */
  {
  #ifdef FEAT_GUI
      if (gui.in_use)
--- 320,328 ----
   * The gui_set_shellsize() or mch_set_shellsize() function will try to set the
   * new size.  If this is not possible, it will adjust Rows and Columns.
   */
      void
  ui_set_shellsize(mustset)
!     int		mustset UNUSED;	/* set by the user */
  {
  #ifdef FEAT_GUI
      if (gui.in_use)
***************
*** 1127,1136 ****
   * available for pasting.
   * When "both" is TRUE also copy to the '+' register.
   */
- /*ARGSUSED*/
      void
  clip_copy_modeless_selection(both)
!     int		both;
  {
      char_u	*buffer;
      char_u	*bufp;
--- 1126,1134 ----
   * available for pasting.
   * When "both" is TRUE also copy to the '+' register.
   */
      void
  clip_copy_modeless_selection(both)
!     int		both UNUSED;
  {
      char_u	*buffer;
      char_u	*bufp;
***************
*** 1701,1710 ****
      return (int)maxlen;
  }
  
- /*ARGSUSED*/
      void
  fill_input_buf(exit_on_error)
!     int	exit_on_error;
  {
  #if defined(UNIX) || defined(OS2) || defined(VMS) || defined(MACOS_X_UNIX)
      int		len;
--- 1699,1707 ----
      return (int)maxlen;
  }
  
      void
  fill_input_buf(exit_on_error)
!     int	exit_on_error UNUSED;
  {
  #if defined(UNIX) || defined(OS2) || defined(VMS) || defined(MACOS_X_UNIX)
      int		len;
***************
*** 1992,2002 ****
  
  static void  clip_x11_request_selection_cb __ARGS((Widget, XtPointer, Atom *, Atom *, XtPointer, long_u *, int *));
  
- /* ARGSUSED */
      static void
  clip_x11_request_selection_cb(w, success, sel_atom, type, value, length,
  			      format)
!     Widget	w;
      XtPointer	success;
      Atom	*sel_atom;
      Atom	*type;
--- 1989,1998 ----
  
  static void  clip_x11_request_selection_cb __ARGS((Widget, XtPointer, Atom *, Atom *, XtPointer, long_u *, int *));
  
      static void
  clip_x11_request_selection_cb(w, success, sel_atom, type, value, length,
  			      format)
!     Widget	w UNUSED;
      XtPointer	success;
      Atom	*sel_atom;
      Atom	*type;
***************
*** 2202,2211 ****
  
  static Boolean	clip_x11_convert_selection_cb __ARGS((Widget, Atom *, Atom *, Atom *, XtPointer *, long_u *, int *));
  
- /* ARGSUSED */
      static Boolean
  clip_x11_convert_selection_cb(w, sel_atom, target, type, value, length, format)
!     Widget	w;
      Atom	*sel_atom;
      Atom	*target;
      Atom	*type;
--- 2198,2206 ----
  
  static Boolean	clip_x11_convert_selection_cb __ARGS((Widget, Atom *, Atom *, Atom *, XtPointer *, long_u *, int *));
  
      static Boolean
  clip_x11_convert_selection_cb(w, sel_atom, target, type, value, length, format)
!     Widget	w UNUSED;
      Atom	*sel_atom;
      Atom	*target;
      Atom	*type;
***************
*** 2332,2341 ****
  
  static void  clip_x11_lose_ownership_cb __ARGS((Widget, Atom *));
  
- /* ARGSUSED */
      static void
  clip_x11_lose_ownership_cb(w, sel_atom)
!     Widget  w;
      Atom    *sel_atom;
  {
      if (*sel_atom == clip_plus.sel_atom)
--- 2327,2335 ----
  
  static void  clip_x11_lose_ownership_cb __ARGS((Widget, Atom *));
  
      static void
  clip_x11_lose_ownership_cb(w, sel_atom)
!     Widget  w UNUSED;
      Atom    *sel_atom;
  {
      if (*sel_atom == clip_plus.sel_atom)
***************
*** 2368,2377 ****
   * Send the current selection to the clipboard.  Do nothing for X because we
   * will fill in the selection only when requested by another app.
   */
- /*ARGSUSED*/
      void
  clip_x11_set_selection(cbd)
!     VimClipboard *cbd;
  {
  }
  #endif
--- 2362,2370 ----
   * Send the current selection to the clipboard.  Do nothing for X because we
   * will fill in the selection only when requested by another app.
   */
      void
  clip_x11_set_selection(cbd)
!     VimClipboard *cbd UNUSED;
  {
  }
  #endif
***************
*** 2922,2932 ****
   * Find the window at screen position "*rowp" and "*colp".  The positions are
   * updated to become relative to the top-left of the window.
   */
- /*ARGSUSED*/
      win_T *
  mouse_find_win(rowp, colp)
      int		*rowp;
!     int		*colp;
  {
      frame_T	*fp;
  
--- 2915,2924 ----
   * Find the window at screen position "*rowp" and "*colp".  The positions are
   * updated to become relative to the top-left of the window.
   */
      win_T *
  mouse_find_win(rowp, colp)
      int		*rowp;
!     int		*colp UNUSED;
  {
      frame_T	*fp;
  
*** ../vim-7.2.179/src/version.c	2009-05-16 21:16:12.000000000 +0200
--- src/version.c	2009-05-17 13:06:38.000000000 +0200
***************
*** 678,679 ****
--- 678,681 ----
  {   /* Add new patch number below this line */
+ /**/
+     180,
  /**/

-- 
Wi n0t trei a h0liday in Sweden thi yer?
                 "Monty Python and the Holy Grail" PYTHON (MONTY) PICTURES LTD

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\        download, build and distribute -- http://www.A-A-P.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
