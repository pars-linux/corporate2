To: vim-dev@vim.org
Subject: Patch 7.2.184
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 7.2.184
Problem:    Some more compiler warnings when using gcc -Wextra.
Solution:   Add UNUSED and type casts.  Autoconf check for wchar_t.
Files:	    src/auto/configure, src/config.h.in, src/configure.in,
	    src/gui_athena.c, src/gui_x11.c, src/gui.c, src/gui_beval.c,
	    src/gui_at_sb.c, src/gui_at_fs.c, src/gui_motif.c,
	    src/gui_xmdlg.c, src/gui_xmebw.c, src/if_python.c, src/window.c,
	    src/workshop.c


*** ../vim-7.2.183/src/auto/configure	2009-05-21 15:19:59.000000000 +0200
--- src/auto/configure	2009-05-21 16:05:01.000000000 +0200
***************
*** 7977,7982 ****
--- 7977,8058 ----
  
      LDFLAGS="$ac_save_LDFLAGS"
  
+     { $as_echo "$as_me:$LINENO: checking size of wchar_t is 2 bytes" >&5
+ $as_echo_n "checking size of wchar_t is 2 bytes... " >&6; }
+     if test "${ac_cv_small_wchar_t+set}" = set; then
+   $as_echo_n "(cached) " >&6
+ else
+   if test "$cross_compiling" = yes; then
+   { { $as_echo "$as_me:$LINENO: error: failed to compile test program" >&5
+ $as_echo "$as_me: error: failed to compile test program" >&2;}
+    { (exit 1); exit 1; }; }
+ else
+   cat >conftest.$ac_ext <<_ACEOF
+ /* confdefs.h.  */
+ _ACEOF
+ cat confdefs.h >>conftest.$ac_ext
+ cat >>conftest.$ac_ext <<_ACEOF
+ /* end confdefs.h.  */
+ 
+ #include <X11/Xlib.h>
+ #if STDC_HEADERS
+ # include <stdlib.h>
+ # include <stddef.h>
+ #endif
+ 		main()
+ 		{
+ 		  if (sizeof(wchar_t) <= 2)
+ 		    exit(1);
+ 		  exit(0);
+ 		}
+ _ACEOF
+ rm -f conftest$ac_exeext
+ if { (ac_try="$ac_link"
+ case "(($ac_try" in
+   *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+   *) ac_try_echo=$ac_try;;
+ esac
+ eval ac_try_echo="\"\$as_me:$LINENO: $ac_try_echo\""
+ $as_echo "$ac_try_echo") >&5
+   (eval "$ac_link") 2>&5
+   ac_status=$?
+   $as_echo "$as_me:$LINENO: \$? = $ac_status" >&5
+   (exit $ac_status); } && { ac_try='./conftest$ac_exeext'
+   { (case "(($ac_try" in
+   *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+   *) ac_try_echo=$ac_try;;
+ esac
+ eval ac_try_echo="\"\$as_me:$LINENO: $ac_try_echo\""
+ $as_echo "$ac_try_echo") >&5
+   (eval "$ac_try") 2>&5
+   ac_status=$?
+   $as_echo "$as_me:$LINENO: \$? = $ac_status" >&5
+   (exit $ac_status); }; }; then
+   ac_cv_small_wchar_t="no"
+ else
+   $as_echo "$as_me: program exited with status $ac_status" >&5
+ $as_echo "$as_me: failed program was:" >&5
+ sed 's/^/| /' conftest.$ac_ext >&5
+ 
+ ( exit $ac_status )
+ ac_cv_small_wchar_t="yes"
+ fi
+ rm -rf conftest.dSYM
+ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext
+ fi
+ 
+ 
+ fi
+ 
+     { $as_echo "$as_me:$LINENO: result: $ac_cv_small_wchar_t" >&5
+ $as_echo "$ac_cv_small_wchar_t" >&6; }
+     if test "x$ac_cv_small_wchar_t" = "xyes" ; then
+       cat >>confdefs.h <<\_ACEOF
+ #define SMALL_WCHAR_T 1
+ _ACEOF
+ 
+     fi
+ 
    fi
  fi
  
***************
*** 15417,15423 ****
  
  
  
- 
  bcopy_test_prog='
  #include "confdefs.h"
  #ifdef HAVE_STRING_H
--- 15493,15498 ----
*** ../vim-7.2.183/src/config.h.in	2009-05-14 22:19:19.000000000 +0200
--- src/config.h.in	2009-05-21 15:44:24.000000000 +0200
***************
*** 39,44 ****
--- 39,47 ----
  /* Defined to the size of an int */
  #undef SIZEOF_INT
  
+ /* Define when wchar_t is only 2 bytes. */
+ #undef SMALL_WCHAR_T
+ 
  /*
   * If we cannot trust one of the following from the libraries, we use our
   * own safe but probably slower vim_memmove().
*** ../vim-7.2.183/src/configure.in	2009-05-21 15:19:59.000000000 +0200
--- src/configure.in	2009-05-21 16:04:56.000000000 +0200
***************
*** 1193,1198 ****
--- 1193,1220 ----
  
      LDFLAGS="$ac_save_LDFLAGS"
  
+     AC_MSG_CHECKING(size of wchar_t is 2 bytes)
+     AC_CACHE_VAL(ac_cv_small_wchar_t,
+ 	[AC_TRY_RUN([
+ #include <X11/Xlib.h>
+ #if STDC_HEADERS
+ # include <stdlib.h>
+ # include <stddef.h>
+ #endif
+ 		main()
+ 		{
+ 		  if (sizeof(wchar_t) <= 2)
+ 		    exit(1);
+ 		  exit(0);
+ 		}],
+ 		ac_cv_small_wchar_t="no",
+ 		ac_cv_small_wchar_t="yes",
+ 		AC_MSG_ERROR(failed to compile test program))])
+     AC_MSG_RESULT($ac_cv_small_wchar_t)
+     if test "x$ac_cv_small_wchar_t" = "xyes" ; then
+       AC_DEFINE(SMALL_WCHAR_T)
+     fi
+ 
    fi
  fi
  
***************
*** 2881,2887 ****
  AC_MSG_RESULT($ac_cv_sizeof_int)
  AC_DEFINE_UNQUOTED(SIZEOF_INT, $ac_cv_sizeof_int)
  
- 
  dnl Check for memmove() before bcopy(), makes memmove() be used when both are
  dnl present, fixes problem with incompatibility between Solaris 2.4 and 2.5.
  
--- 2903,2908 ----
*** ../vim-7.2.183/src/gui_athena.c	2008-06-24 23:00:51.000000000 +0200
--- src/gui_athena.c	2009-05-21 16:39:43.000000000 +0200
***************
*** 86,95 ****
   * Scrollbar callback (XtNjumpProc) for when the scrollbar is dragged with the
   * left or middle mouse button.
   */
- /* ARGSUSED */
      static void
  gui_athena_scroll_cb_jump(w, client_data, call_data)
!     Widget	w;
      XtPointer	client_data, call_data;
  {
      scrollbar_T *sb, *sb_info;
--- 86,94 ----
   * Scrollbar callback (XtNjumpProc) for when the scrollbar is dragged with the
   * left or middle mouse button.
   */
      static void
  gui_athena_scroll_cb_jump(w, client_data, call_data)
!     Widget	w UNUSED;
      XtPointer	client_data, call_data;
  {
      scrollbar_T *sb, *sb_info;
***************
*** 122,131 ****
   * Scrollbar callback (XtNscrollProc) for paging up or down with the left or
   * right mouse buttons.
   */
- /* ARGSUSED */
      static void
  gui_athena_scroll_cb_scroll(w, client_data, call_data)
!     Widget	w;
      XtPointer	client_data, call_data;
  {
      scrollbar_T *sb, *sb_info;
--- 121,129 ----
   * Scrollbar callback (XtNscrollProc) for paging up or down with the left or
   * right mouse buttons.
   */
      static void
  gui_athena_scroll_cb_scroll(w, client_data, call_data)
!     Widget	w UNUSED;
      XtPointer	client_data, call_data;
  {
      scrollbar_T *sb, *sb_info;
***************
*** 492,498 ****
      if (menu->icon_builtin || gui_find_bitmap(menu->name, buf, "xpm") == FAIL)
      {
  	if (menu->iconidx >= 0 && menu->iconidx
! 		   < (sizeof(built_in_pixmaps) / sizeof(built_in_pixmaps[0])))
  	    xpm = built_in_pixmaps[menu->iconidx];
  	else
  	    xpm = tb_blank_xpm;
--- 490,496 ----
      if (menu->icon_builtin || gui_find_bitmap(menu->name, buf, "xpm") == FAIL)
      {
  	if (menu->iconidx >= 0 && menu->iconidx
! 	      < (int)(sizeof(built_in_pixmaps) / sizeof(built_in_pixmaps[0])))
  	    xpm = built_in_pixmaps[menu->iconidx];
  	else
  	    xpm = tb_blank_xpm;
***************
*** 763,769 ****
      XtGetValues(XtParent(widget), args, n);
  
      retval = num_children;
!     for (i = 0; i < num_children; ++i)
      {
  	Widget	current = children[i];
  	vimmenu_T	*menu = NULL;
--- 761,767 ----
      XtGetValues(XtParent(widget), args, n);
  
      retval = num_children;
!     for (i = 0; i < (int)num_children; ++i)
      {
  	Widget	current = children[i];
  	vimmenu_T	*menu = NULL;
***************
*** 780,790 ****
      return retval;
  }
  
- /* ARGSUSED */
      void
  gui_mch_add_menu(menu, idx)
      vimmenu_T	*menu;
!     int		idx;
  {
      char_u	*pullright_name;
      Dimension	height, space, border;
--- 778,787 ----
      return retval;
  }
  
      void
  gui_mch_add_menu(menu, idx)
      vimmenu_T	*menu;
!     int		idx UNUSED;
  {
      char_u	*pullright_name;
      Dimension	height, space, border;
***************
*** 869,875 ****
  	    XtVaGetValues(parent->submenu_id, XtNchildren, &children,
  					      XtNnumChildren, &num_children,
  					      NULL);
! 	    for (i = 0; i < num_children; ++i)
  	    {
  		XtVaSetValues(children[i],
  			      XtNrightMargin, puller_width,
--- 866,872 ----
  	    XtVaGetValues(parent->submenu_id, XtNchildren, &children,
  					      XtNnumChildren, &num_children,
  					      NULL);
! 	    for (i = 0; i < (int)num_children; ++i)
  	    {
  		XtVaSetValues(children[i],
  			      XtNrightMargin, puller_width,
***************
*** 913,919 ****
      XtVaGetValues(id, XtNchildren, &children,
  		      XtNnumChildren, &num_children,
  		      NULL);
!     for (i = 0; i < num_children; ++i)
      {
  	if (children[i] == ignore)
  	    continue;
--- 910,916 ----
      XtVaGetValues(id, XtNchildren, &children,
  		      XtNnumChildren, &num_children,
  		      NULL);
!     for (i = 0; i < (int)num_children; ++i)
      {
  	if (children[i] == ignore)
  	    continue;
***************
*** 1175,1185 ****
      return pname;
  }
  
- /* ARGSUSED */
      void
  gui_mch_add_menu_item(menu, idx)
      vimmenu_T	*menu;
!     int		idx;
  {
      vimmenu_T	*parent = menu->parent;
  
--- 1172,1181 ----
      return pname;
  }
  
      void
  gui_mch_add_menu_item(menu, idx)
      vimmenu_T	*menu;
!     int		idx UNUSED;
  {
      vimmenu_T	*parent = menu->parent;
  
***************
*** 1444,1450 ****
  		XtNchildren,	    &children,
  		XtNnumChildren,	    &numChildren,
  		NULL);
! 	for (i = 0; i < numChildren; i++)
  	{
  	    whgt = 0;
  
--- 1440,1446 ----
  		XtNchildren,	    &children,
  		XtNnumChildren,	    &numChildren,
  		NULL);
! 	for (i = 0; i < (int)numChildren; i++)
  	{
  	    whgt = 0;
  
***************
*** 1473,1482 ****
  #endif
  
  
- /* ARGSUSED */
      void
  gui_mch_toggle_tearoffs(enable)
!     int		enable;
  {
      /* no tearoff menus */
  }
--- 1469,1477 ----
  #endif
  
  
      void
  gui_mch_toggle_tearoffs(enable)
!     int		enable UNUSED;
  {
      /* no tearoff menus */
  }
***************
*** 1537,1543 ****
  	    else
  		get_left_margin = True;
  
! 	    for (i = 0; i < num_children; ++i)
  	    {
  		if (children[i] == menu->id)
  		    continue;
--- 1532,1538 ----
  	    else
  		get_left_margin = True;
  
! 	    for (i = 0; i < (int)num_children; ++i)
  	    {
  		if (children[i] == menu->id)
  		    continue;
***************
*** 1645,1655 ****
      }
  }
  
- /*ARGSUSED*/
      static void
  gui_athena_menu_timeout(client_data, id)
      XtPointer	    client_data;
!     XtIntervalId    *id;
  {
      Widget  w = (Widget)client_data;
      Widget  popup;
--- 1640,1649 ----
      }
  }
  
      static void
  gui_athena_menu_timeout(client_data, id)
      XtPointer	    client_data;
!     XtIntervalId    *id UNUSED;
  {
      Widget  w = (Widget)client_data;
      Widget  popup;
***************
*** 1678,1689 ****
   *
   * This is called when XtPopup() is called.
   */
- /*ARGSUSED*/
      static void
  gui_athena_popup_callback(w, client_data, call_data)
      Widget	w;
      XtPointer	client_data;
!     XtPointer	call_data;
  {
      /* Assumption: XtIsSubclass(XtParent(w),simpleMenuWidgetClass) */
      vimmenu_T	*menu = (vimmenu_T *)client_data;
--- 1672,1682 ----
   *
   * This is called when XtPopup() is called.
   */
      static void
  gui_athena_popup_callback(w, client_data, call_data)
      Widget	w;
      XtPointer	client_data;
!     XtPointer	call_data UNUSED;
  {
      /* Assumption: XtIsSubclass(XtParent(w),simpleMenuWidgetClass) */
      vimmenu_T	*menu = (vimmenu_T *)client_data;
***************
*** 1711,1717 ****
  		     NULL);
  }
  
- /* ARGSUSED */
      static void
  gui_athena_popdown_submenus_action(w, event, args, nargs)
      Widget	w;
--- 1704,1709 ----
***************
*** 1756,1762 ****
      return False;
  }
  
- /* ARGSUSED */
      static void
  gui_athena_delayed_arm_action(w, event, args, nargs)
      Widget	w;
--- 1748,1753 ----
***************
*** 1837,1843 ****
       * (XtIsSubclass(popup,simpleMenuWidgetClass) == True) */
  }
  
- /* ARGSUSED */
      void
  gui_mch_show_popupmenu(menu)
      vimmenu_T *menu;
--- 1828,1833 ----
***************
*** 2046,2060 ****
   * Put up a file requester.
   * Returns the selected name in allocated memory, or NULL for Cancel.
   */
- /* ARGSUSED */
      char_u *
  gui_mch_browse(saving, title, dflt, ext, initdir, filter)
!     int		saving;		/* select file to write */
!     char_u	*title;		/* not used (title for the window) */
!     char_u	*dflt;		/* not used (default name) */
!     char_u	*ext;		/* not used (extension added) */
      char_u	*initdir;	/* initial directory, NULL for current dir */
!     char_u	*filter;	/* not used (file name filter) */
  {
      Position x, y;
      char_u	dirbuf[MAXPATHL];
--- 2036,2049 ----
   * Put up a file requester.
   * Returns the selected name in allocated memory, or NULL for Cancel.
   */
      char_u *
  gui_mch_browse(saving, title, dflt, ext, initdir, filter)
!     int		saving UNUSED;	/* select file to write */
!     char_u	*title;		/* title for the window */
!     char_u	*dflt;		/* default name */
!     char_u	*ext UNUSED;	/* extension added */
      char_u	*initdir;	/* initial directory, NULL for current dir */
!     char_u	*filter UNUSED;	/* file name filter */
  {
      Position x, y;
      char_u	dirbuf[MAXPATHL];
***************
*** 2100,2112 ****
   * Callback function for the textfield.  When CR is hit this works like
   * hitting the "OK" button, ESC like "Cancel".
   */
- /* ARGSUSED */
      static void
  keyhit_callback(w, client_data, event, cont)
!     Widget		w;
!     XtPointer		client_data;
      XEvent		*event;
!     Boolean		*cont;
  {
      char	buf[2];
  
--- 2089,2100 ----
   * Callback function for the textfield.  When CR is hit this works like
   * hitting the "OK" button, ESC like "Cancel".
   */
      static void
  keyhit_callback(w, client_data, event, cont)
!     Widget		w UNUSED;
!     XtPointer		client_data UNUSED;
      XEvent		*event;
!     Boolean		*cont UNUSED;
  {
      char	buf[2];
  
***************
*** 2119,2130 ****
      }
  }
  
- /* ARGSUSED */
      static void
  butproc(w, client_data, call_data)
!     Widget	w;
      XtPointer	client_data;
!     XtPointer	call_data;
  {
      dialogStatus = (int)(long)client_data + 1;
  }
--- 2107,2117 ----
      }
  }
  
      static void
  butproc(w, client_data, call_data)
!     Widget	w UNUSED;
      XtPointer	client_data;
!     XtPointer	call_data UNUSED;
  {
      dialogStatus = (int)(long)client_data + 1;
  }
***************
*** 2132,2158 ****
  /*
   * Function called when dialog window closed.
   */
- /*ARGSUSED*/
      static void
  dialog_wm_handler(w, client_data, event, dum)
!     Widget	w;
!     XtPointer	client_data;
      XEvent	*event;
!     Boolean	*dum;
  {
      if (event->type == ClientMessage
! 	    && ((XClientMessageEvent *)event)->data.l[0] == dialogatom)
  	dialogStatus = 0;
  }
  
- /* ARGSUSED */
      int
  gui_mch_dialog(type, title, message, buttons, dfltbutton, textfield)
!     int		type;
      char_u	*title;
      char_u	*message;
      char_u	*buttons;
!     int		dfltbutton;
      char_u	*textfield;
  {
      char_u		*buts;
--- 2119,2143 ----
  /*
   * Function called when dialog window closed.
   */
      static void
  dialog_wm_handler(w, client_data, event, dum)
!     Widget	w UNUSED;
!     XtPointer	client_data UNUSED;
      XEvent	*event;
!     Boolean	*dum UNUSED;
  {
      if (event->type == ClientMessage
! 	    && (Atom)((XClientMessageEvent *)event)->data.l[0] == dialogatom)
  	dialogStatus = 0;
  }
  
      int
  gui_mch_dialog(type, title, message, buttons, dfltbutton, textfield)
!     int		type UNUSED;
      char_u	*title;
      char_u	*message;
      char_u	*buttons;
!     int		dfltbutton UNUSED;
      char_u	*textfield;
  {
      char_u		*buts;
*** ../vim-7.2.183/src/gui_x11.c	2009-02-24 04:11:07.000000000 +0100
--- src/gui_x11.c	2009-05-21 16:47:02.000000000 +0200
***************
*** 570,591 ****
   * Call-back routines.
   */
  
- /* ARGSUSED */
      static void
  gui_x11_timer_cb(timed_out, interval_id)
      XtPointer	    timed_out;
!     XtIntervalId    *interval_id;
  {
      *((int *)timed_out) = TRUE;
  }
  
- /* ARGSUSED */
      static void
  gui_x11_visibility_cb(w, dud, event, dum)
!     Widget	w;
!     XtPointer	dud;
      XEvent	*event;
!     Boolean	*dum;
  {
      if (event->type != VisibilityNotify)
  	return;
--- 570,589 ----
   * Call-back routines.
   */
  
      static void
  gui_x11_timer_cb(timed_out, interval_id)
      XtPointer	    timed_out;
!     XtIntervalId    *interval_id UNUSED;
  {
      *((int *)timed_out) = TRUE;
  }
  
      static void
  gui_x11_visibility_cb(w, dud, event, dum)
!     Widget	w UNUSED;
!     XtPointer	dud UNUSED;
      XEvent	*event;
!     Boolean	*dum UNUSED;
  {
      if (event->type != VisibilityNotify)
  	return;
***************
*** 603,615 ****
      gui_mch_update();
  }
  
- /* ARGSUSED */
      static void
  gui_x11_expose_cb(w, dud, event, dum)
!     Widget	w;
!     XtPointer	dud;
      XEvent	*event;
!     Boolean	*dum;
  {
      XExposeEvent	*gevent;
      int			new_x;
--- 601,612 ----
      gui_mch_update();
  }
  
      static void
  gui_x11_expose_cb(w, dud, event, dum)
!     Widget	w UNUSED;
!     XtPointer	dud UNUSED;
      XEvent	*event;
!     Boolean	*dum UNUSED;
  {
      XExposeEvent	*gevent;
      int			new_x;
***************
*** 680,692 ****
  }
  #endif
  
- /* ARGSUSED */
      static void
  gui_x11_resize_window_cb(w, dud, event, dum)
!     Widget	w;
!     XtPointer	dud;
      XEvent	*event;
!     Boolean	*dum;
  {
      static int lastWidth, lastHeight;
  
--- 677,688 ----
  }
  #endif
  
      static void
  gui_x11_resize_window_cb(w, dud, event, dum)
!     Widget	w UNUSED;
!     XtPointer	dud UNUSED;
      XEvent	*event;
!     Boolean	*dum UNUSED;
  {
      static int lastWidth, lastHeight;
  
***************
*** 727,761 ****
  #endif
  }
  
- /* ARGSUSED */
      static void
  gui_x11_focus_change_cb(w, data, event, dum)
!     Widget	w;
!     XtPointer	data;
      XEvent	*event;
!     Boolean	*dum;
  {
      gui_focus_change(event->type == FocusIn);
  }
  
- /* ARGSUSED */
      static void
  gui_x11_enter_cb(w, data, event, dum)
!     Widget	w;
!     XtPointer	data;
!     XEvent	*event;
!     Boolean	*dum;
  {
      gui_focus_change(TRUE);
  }
  
- /* ARGSUSED */
      static void
  gui_x11_leave_cb(w, data, event, dum)
!     Widget	w;
!     XtPointer	data;
!     XEvent	*event;
!     Boolean	*dum;
  {
      gui_focus_change(FALSE);
  }
--- 723,754 ----
  #endif
  }
  
      static void
  gui_x11_focus_change_cb(w, data, event, dum)
!     Widget	w UNUSED;
!     XtPointer	data UNUSED;
      XEvent	*event;
!     Boolean	*dum UNUSED;
  {
      gui_focus_change(event->type == FocusIn);
  }
  
      static void
  gui_x11_enter_cb(w, data, event, dum)
!     Widget	w UNUSED;
!     XtPointer	data UNUSED;
!     XEvent	*event UNUSED;
!     Boolean	*dum UNUSED;
  {
      gui_focus_change(TRUE);
  }
  
      static void
  gui_x11_leave_cb(w, data, event, dum)
!     Widget	w UNUSED;
!     XtPointer	data UNUSED;
!     XEvent	*event UNUSED;
!     Boolean	*dum UNUSED;
  {
      gui_focus_change(FALSE);
  }
***************
*** 766,778 ****
  # endif
  #endif
  
- /* ARGSUSED */
      void
  gui_x11_key_hit_cb(w, dud, event, dum)
!     Widget	w;
!     XtPointer	dud;
      XEvent	*event;
!     Boolean	*dum;
  {
      XKeyPressedEvent	*ev_press;
  #ifdef FEAT_XIM
--- 759,770 ----
  # endif
  #endif
  
      void
  gui_x11_key_hit_cb(w, dud, event, dum)
!     Widget	w UNUSED;
!     XtPointer	dud UNUSED;
      XEvent	*event;
!     Boolean	*dum UNUSED;
  {
      XKeyPressedEvent	*ev_press;
  #ifdef FEAT_XIM
***************
*** 1078,1090 ****
  #endif
  }
  
- /* ARGSUSED */
      static void
  gui_x11_mouse_cb(w, dud, event, dum)
!     Widget	w;
!     XtPointer	dud;
      XEvent	*event;
!     Boolean	*dum;
  {
      static XtIntervalId timer = (XtIntervalId)0;
      static int	timed_out = TRUE;
--- 1070,1081 ----
  #endif
  }
  
      static void
  gui_x11_mouse_cb(w, dud, event, dum)
!     Widget	w UNUSED;
!     XtPointer	dud UNUSED;
      XEvent	*event;
!     Boolean	*dum UNUSED;
  {
      static XtIntervalId timer = (XtIntervalId)0;
      static int	timed_out = TRUE;
***************
*** 1210,1220 ****
      while (arg < *argc)
      {
  	/* Look for argv[arg] in cmdline_options[] table */
! 	for (i = 0; i < XtNumber(cmdline_options); i++)
  	    if (strcmp(argv[arg], cmdline_options[i].option) == 0)
  		break;
  
! 	if (i < XtNumber(cmdline_options))
  	{
  	    /* Remember finding "-rv" or "-reverse" */
  	    if (strcmp("-rv", argv[arg]) == 0
--- 1201,1211 ----
      while (arg < *argc)
      {
  	/* Look for argv[arg] in cmdline_options[] table */
! 	for (i = 0; i < (int)XtNumber(cmdline_options); i++)
  	    if (strcmp(argv[arg], cmdline_options[i].option) == 0)
  		break;
  
! 	if (i < (int)XtNumber(cmdline_options))
  	{
  	    /* Remember finding "-rv" or "-reverse" */
  	    if (strcmp("-rv", argv[arg]) == 0
***************
*** 1319,1330 ****
  
  static void local_xsmp_handle_requests __ARGS((XtPointer c, int *s, XtInputId *i));
  
- /*ARGSUSED*/
      static void
  local_xsmp_handle_requests(c, s, i)
!     XtPointer	c;
!     int		*s;
!     XtInputId	*i;
  {
      if (xsmp_handle_requests() == FAIL)
  	XtRemoveInput(_xsmp_xtinputid);
--- 1310,1320 ----
  
  static void local_xsmp_handle_requests __ARGS((XtPointer c, int *s, XtInputId *i));
  
      static void
  local_xsmp_handle_requests(c, s, i)
!     XtPointer	c UNUSED;
!     int		*s UNUSED;
!     XtInputId	*i UNUSED;
  {
      if (xsmp_handle_requests() == FAIL)
  	XtRemoveInput(_xsmp_xtinputid);
***************
*** 1438,1444 ****
  	    Columns = w;
  	if (mask & HeightValue)
  	{
! 	    if (p_window > h - 1 || !option_was_set((char_u *)"window"))
  		p_window = h - 1;
  	    Rows = h;
  	}
--- 1428,1434 ----
  	    Columns = w;
  	if (mask & HeightValue)
  	{
! 	    if (p_window > (long)h - 1 || !option_was_set((char_u *)"window"))
  		p_window = h - 1;
  	    Rows = h;
  	}
***************
*** 1753,1762 ****
  }
  #endif
  
- /*ARGSUSED*/
      void
  gui_mch_exit(rc)
!     int		rc;
  {
  #if 0
      /* Lesstif gives an error message here, and so does Solaris.  The man page
--- 1743,1751 ----
  }
  #endif
  
      void
  gui_mch_exit(rc)
!     int		rc UNUSED;
  {
  #if 0
      /* Lesstif gives an error message here, and so does Solaris.  The man page
***************
*** 1799,1805 ****
  	NULL);
  }
  
- /*ARGSUSED*/
      void
  gui_mch_set_shellsize(width, height, min_width, min_height,
  		    base_width, base_height, direction)
--- 1788,1793 ----
***************
*** 1809,1815 ****
      int		min_height;
      int		base_width;
      int		base_height;
!     int		direction;
  {
  #ifdef FEAT_XIM
      height += xim_get_status_area_height(),
--- 1797,1803 ----
      int		min_height;
      int		base_width;
      int		base_height;
!     int		direction UNUSED;
  {
  #ifdef FEAT_XIM
      height += xim_get_status_area_height(),
***************
*** 1847,1857 ****
   * If "fontset" is TRUE, load the "font_name" as a fontset.
   * Return FAIL if the font could not be loaded, OK otherwise.
   */
- /*ARGSUSED*/
      int
  gui_mch_init_font(font_name, do_fontset)
      char_u	*font_name;
!     int		do_fontset;
  {
      XFontStruct	*font = NULL;
  
--- 1835,1844 ----
   * If "fontset" is TRUE, load the "font_name" as a fontset.
   * Return FAIL if the font could not be loaded, OK otherwise.
   */
      int
  gui_mch_init_font(font_name, do_fontset)
      char_u	*font_name;
!     int		do_fontset UNUSED;
  {
      XFontStruct	*font = NULL;
  
***************
*** 2029,2038 ****
   * Return the name of font "font" in allocated memory.
   * Don't know how to get the actual name, thus use the provided name.
   */
- /*ARGSUSED*/
      char_u *
  gui_mch_get_fontname(font, name)
!     GuiFont font;
      char_u  *name;
  {
      if (name == NULL)
--- 2016,2024 ----
   * Return the name of font "font" in allocated memory.
   * Don't know how to get the actual name, thus use the provided name.
   */
      char_u *
  gui_mch_get_fontname(font, name)
!     GuiFont font UNUSED;
      char_u  *name;
  {
      if (name == NULL)
***************
*** 2521,2527 ****
  {
      int			i;
      int			offset;
!     const static int	val[8] = {1, 0, 0, 0, 1, 2, 2, 2 };
  
      XSetForeground(gui.dpy, gui.text_gc, prev_sp_color);
      for (i = FILL_X(col); i < FILL_X(col + cells); ++i)
--- 2507,2513 ----
  {
      int			i;
      int			offset;
!     static const int	val[8] = {1, 0, 0, 0, 1, 2, 2, 2 };
  
      XSetForeground(gui.dpy, gui.text_gc, prev_sp_color);
      for (i = FILL_X(col); i < FILL_X(col + cells); ++i)
***************
*** 2569,2576 ****
  # ifdef FEAT_XFONTSET
  	    if (current_fontset != NULL)
  	    {
! 		if (c >= 0x10000 && sizeof(wchar_t) <= 2)
  		    c = 0xbf;		/* show chars > 0xffff as ? */
  		((wchar_t *)buf)[wlen] = c;
  	    }
  	    else
--- 2555,2564 ----
  # ifdef FEAT_XFONTSET
  	    if (current_fontset != NULL)
  	    {
! #  ifdef SMALL_WCHAR_T
! 		if (c >= 0x10000)
  		    c = 0xbf;		/* show chars > 0xffff as ? */
+ #  endif
  		((wchar_t *)buf)[wlen] = c;
  	    }
  	    else
***************
*** 3136,3146 ****
      /* Nothing to do in X */
  }
  
- /* ARGSUSED */
      void
  gui_x11_menu_cb(w, client_data, call_data)
!     Widget	w;
!     XtPointer	client_data, call_data;
  {
      gui_menu_cb((vimmenu_T *)client_data);
  }
--- 3124,3134 ----
      /* Nothing to do in X */
  }
  
      void
  gui_x11_menu_cb(w, client_data, call_data)
!     Widget	w UNUSED;
!     XtPointer	client_data;
!     XtPointer	call_data UNUSED;
  {
      gui_menu_cb((vimmenu_T *)client_data);
  }
***************
*** 3153,3165 ****
   * Function called when window closed.	Works like ":qa".
   * Should put up a requester!
   */
- /*ARGSUSED*/
      static void
  gui_x11_wm_protocol_handler(w, client_data, event, dum)
!     Widget	w;
!     XtPointer	client_data;
      XEvent	*event;
!     Boolean	*dum;
  {
      /*
       * Only deal with Client messages.
--- 3141,3152 ----
   * Function called when window closed.	Works like ":qa".
   * Should put up a requester!
   */
      static void
  gui_x11_wm_protocol_handler(w, client_data, event, dum)
!     Widget	w UNUSED;
!     XtPointer	client_data UNUSED;
      XEvent	*event;
!     Boolean	*dum UNUSED;
  {
      /*
       * Only deal with Client messages.
***************
*** 3172,3178 ****
       * exit.  That can be cancelled though, thus Vim shouldn't exit here.
       * Just sync our swap files.
       */
!     if (((XClientMessageEvent *)event)->data.l[0] ==
  						  wm_atoms[SAVE_YOURSELF_IDX])
      {
  	out_flush();
--- 3159,3165 ----
       * exit.  That can be cancelled though, thus Vim shouldn't exit here.
       * Just sync our swap files.
       */
!     if ((Atom)((XClientMessageEvent *)event)->data.l[0] ==
  						  wm_atoms[SAVE_YOURSELF_IDX])
      {
  	out_flush();
***************
*** 3185,3191 ****
  	return;
      }
  
!     if (((XClientMessageEvent *)event)->data.l[0] !=
  						  wm_atoms[DELETE_WINDOW_IDX])
  	return;
  
--- 3172,3178 ----
  	return;
      }
  
!     if ((Atom)((XClientMessageEvent *)event)->data.l[0] !=
  						  wm_atoms[DELETE_WINDOW_IDX])
  	return;
  
***************
*** 3196,3208 ****
  /*
   * Function called when property changed. Check for incoming commands
   */
- /*ARGSUSED*/
      static void
  gui_x11_send_event_handler(w, client_data, event, dum)
!     Widget	w;
!     XtPointer	client_data;
      XEvent	*event;
!     Boolean	*dum;
  {
      XPropertyEvent *e = (XPropertyEvent *) event;
  
--- 3183,3194 ----
  /*
   * Function called when property changed. Check for incoming commands
   */
      static void
  gui_x11_send_event_handler(w, client_data, event, dum)
!     Widget	w UNUSED;
!     XtPointer	client_data UNUSED;
      XEvent	*event;
!     Boolean	*dum UNUSED;
  {
      XPropertyEvent *e = (XPropertyEvent *) event;
  
***************
*** 3277,3287 ****
      }
  }
  
- /* ARGSUSED */
      static void
  gui_x11_blink_cb(timed_out, interval_id)
!     XtPointer	    timed_out;
!     XtIntervalId    *interval_id;
  {
      if (blink_state == BLINK_ON)
      {
--- 3263,3272 ----
      }
  }
  
      static void
  gui_x11_blink_cb(timed_out, interval_id)
!     XtPointer	    timed_out UNUSED;
!     XtIntervalId    *interval_id UNUSED;
  {
      if (blink_state == BLINK_ON)
      {
*** ../vim-7.2.183/src/gui.c	2009-05-17 16:23:20.000000000 +0200
--- src/gui.c	2009-05-21 16:37:39.000000000 +0200
***************
*** 3119,3125 ****
   */
      void
  gui_init_which_components(oldval)
!     char_u	*oldval;
  {
  #ifdef FEAT_MENU
      static int	prev_menu_is_active = -1;
--- 3119,3125 ----
   */
      void
  gui_init_which_components(oldval)
!     char_u	*oldval UNUSED;
  {
  #ifdef FEAT_MENU
      static int	prev_menu_is_active = -1;
***************
*** 4668,4675 ****
   */
      static win_T *
  xy2win(x, y)
!     int		x;
!     int		y;
  {
  #ifdef FEAT_WINDOWS
      int		row;
--- 4668,4675 ----
   */
      static win_T *
  xy2win(x, y)
!     int		x UNUSED;
!     int		y UNUSED;
  {
  #ifdef FEAT_WINDOWS
      int		row;
***************
*** 5121,5128 ****
   */
      void
  gui_handle_drop(x, y, modifiers, fnames, count)
!     int		x;
!     int		y;
      int_u	modifiers;
      char_u	**fnames;
      int		count;
--- 5121,5128 ----
   */
      void
  gui_handle_drop(x, y, modifiers, fnames, count)
!     int		x UNUSED;
!     int		y UNUSED;
      int_u	modifiers;
      char_u	**fnames;
      int		count;
*** ../vim-7.2.183/src/gui_beval.c	2009-05-17 16:23:20.000000000 +0200
--- src/gui_beval.c	2009-05-21 15:03:02.000000000 +0200
***************
*** 18,24 ****
      void
  general_beval_cb(beval, state)
      BalloonEval *beval;
!     int state;
  {
      win_T	*wp;
      int		col;
--- 18,24 ----
      void
  general_beval_cb(beval, state)
      BalloonEval *beval;
!     int		state UNUSED;
  {
      win_T	*wp;
      int		col;
***************
*** 726,735 ****
   */
      static void
  pointerEventEH(w, client_data, event, unused)
!     Widget	w;
      XtPointer	client_data;
      XEvent	*event;
!     Boolean	*unused;
  {
      BalloonEval *beval = (BalloonEval *)client_data;
      pointerEvent(beval, event);
--- 726,735 ----
   */
      static void
  pointerEventEH(w, client_data, event, unused)
!     Widget	w UNUSED;
      XtPointer	client_data;
      XEvent	*event;
!     Boolean	*unused UNUSED;
  {
      BalloonEval *beval = (BalloonEval *)client_data;
      pointerEvent(beval, event);
***************
*** 877,883 ****
      static void
  timerRoutine(dx, id)
      XtPointer	    dx;
!     XtIntervalId    *id;
  {
      BalloonEval *beval = (BalloonEval *)dx;
  
--- 877,883 ----
      static void
  timerRoutine(dx, id)
      XtPointer	    dx;
!     XtIntervalId    *id UNUSED;
  {
      BalloonEval *beval = (BalloonEval *)dx;
  
*** ../vim-7.2.183/src/gui_at_sb.c	2008-11-28 21:26:50.000000000 +0100
--- src/gui_at_sb.c	2009-05-21 16:38:53.000000000 +0200
***************
*** 198,207 ****
      /* extension	*/  NULL
    },
    { /* simple fields */
!     /* change_sensitive	*/  XtInheritChangeSensitive
    },
    { /* scrollbar fields */
!     /* ignore	    */	0
    }
  };
  
--- 198,210 ----
      /* extension	*/  NULL
    },
    { /* simple fields */
!     /* change_sensitive	*/  XtInheritChangeSensitive,
! #ifndef OLDXAW
!     /* extension */	    NULL
! #endif
    },
    { /* scrollbar fields */
!     /* empty	    */	    0
    }
  };
  
***************
*** 241,247 ****
  
      if (bottom <= 0 || bottom <= top)
  	return;
!     if ((sw = sbw->scrollbar.shadow_width) < 0)
  	sw = 0;
      margin = MARGIN (sbw);
      floor = sbw->scrollbar.length - margin + 2;
--- 244,251 ----
  
      if (bottom <= 0 || bottom <= top)
  	return;
!     sw = sbw->scrollbar.shadow_width;
!     if (sw < 0)
  	sw = 0;
      margin = MARGIN (sbw);
      floor = sbw->scrollbar.length - margin + 2;
***************
*** 516,528 ****
      }
  }
  
- /* ARGSUSED */
      static void
  Initialize(request, new, args, num_args)
!     Widget	request;	/* what the client asked for */
      Widget	new;		/* what we're going to give him */
!     ArgList	args;
!     Cardinal	*num_args;
  {
      ScrollbarWidget sbw = (ScrollbarWidget) new;
  
--- 520,531 ----
      }
  }
  
      static void
  Initialize(request, new, args, num_args)
!     Widget	request UNUSED;	/* what the client asked for */
      Widget	new;		/* what we're going to give him */
!     ArgList	args UNUSED;
!     Cardinal	*num_args UNUSED;
  {
      ScrollbarWidget sbw = (ScrollbarWidget) new;
  
***************
*** 556,569 ****
  	(w, valueMask, attributes);
  }
  
- /* ARGSUSED */
      static Boolean
  SetValues(current, request, desired, args, num_args)
!     Widget  current,	    /* what I am */
! 	    request,	    /* what he wants me to be */
! 	    desired;	    /* what I will become */
!     ArgList args;
!     Cardinal *num_args;
  {
      ScrollbarWidget	sbw = (ScrollbarWidget) current;
      ScrollbarWidget	dsbw = (ScrollbarWidget) desired;
--- 559,571 ----
  	(w, valueMask, attributes);
  }
  
      static Boolean
  SetValues(current, request, desired, args, num_args)
!     Widget  current;	    /* what I am */
!     Widget  request UNUSED; /* what he wants me to be */
!     Widget  desired;	    /* what I will become */
!     ArgList args UNUSED;
!     Cardinal *num_args UNUSED;
  {
      ScrollbarWidget	sbw = (ScrollbarWidget) current;
      ScrollbarWidget	dsbw = (ScrollbarWidget) desired;
***************
*** 609,615 ****
  }
  
  
- /* ARGSUSED */
      static void
  Redisplay(w, event, region)
      Widget w;
--- 611,616 ----
***************
*** 789,799 ****
      }
  }
  
- /* ARGSUSED */
      static void
  RepeatNotify(client_data, idp)
      XtPointer client_data;
!     XtIntervalId *idp;
  {
      ScrollbarWidget sbw = (ScrollbarWidget) client_data;
      int		    call_data;
--- 790,799 ----
      }
  }
  
      static void
  RepeatNotify(client_data, idp)
      XtPointer client_data;
!     XtIntervalId *idp UNUSED;
  {
      ScrollbarWidget sbw = (ScrollbarWidget) client_data;
      int		    call_data;
***************
*** 839,884 ****
      return (num < small) ? small : ((num > big) ? big : num);
  }
  
- /* ARGSUSED */
      static void
  ScrollOneLineUp(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params;
!     Cardinal	*num_params;
  {
      ScrollSome(w, event, -ONE_LINE_DATA);
  }
  
- /* ARGSUSED */
      static void
  ScrollOneLineDown(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params;
!     Cardinal	*num_params;
  {
      ScrollSome(w, event, ONE_LINE_DATA);
  }
  
- /* ARGSUSED */
      static void
  ScrollPageDown(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params;
!     Cardinal	*num_params;
  {
      ScrollSome(w, event, ONE_PAGE_DATA);
  }
  
- /* ARGSUSED */
      static void
  ScrollPageUp(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params;
!     Cardinal	*num_params;
  {
      ScrollSome(w, event, -ONE_PAGE_DATA);
  }
--- 839,880 ----
      return (num < small) ? small : ((num > big) ? big : num);
  }
  
      static void
  ScrollOneLineUp(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params UNUSED;
!     Cardinal	*num_params UNUSED;
  {
      ScrollSome(w, event, -ONE_LINE_DATA);
  }
  
      static void
  ScrollOneLineDown(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params UNUSED;
!     Cardinal	*num_params UNUSED;
  {
      ScrollSome(w, event, ONE_LINE_DATA);
  }
  
      static void
  ScrollPageDown(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params UNUSED;
!     Cardinal	*num_params UNUSED;
  {
      ScrollSome(w, event, ONE_PAGE_DATA);
  }
  
      static void
  ScrollPageUp(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params UNUSED;
!     Cardinal	*num_params UNUSED;
  {
      ScrollSome(w, event, -ONE_PAGE_DATA);
  }
***************
*** 901,913 ****
      XtCallCallbacks(w, XtNscrollProc, (XtPointer)call_data);
  }
  
- /* ARGSUSED */
      static void
  NotifyScroll(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params;
!     Cardinal	*num_params;
  {
      ScrollbarWidget sbw = (ScrollbarWidget) w;
      Position	    x, y, loc;
--- 897,908 ----
      XtCallCallbacks(w, XtNscrollProc, (XtPointer)call_data);
  }
  
      static void
  NotifyScroll(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params UNUSED;
!     Cardinal	*num_params UNUSED;
  {
      ScrollbarWidget sbw = (ScrollbarWidget) w;
      Position	    x, y, loc;
***************
*** 991,1003 ****
  					   delay, RepeatNotify, (XtPointer)w);
  }
  
- /* ARGSUSED */
      static void
  EndScroll(w, event, params, num_params)
      Widget w;
!     XEvent *event;	/* unused */
!     String *params;	/* unused */
!     Cardinal *num_params;   /* unused */
  {
      ScrollbarWidget sbw = (ScrollbarWidget) w;
  
--- 986,997 ----
  					   delay, RepeatNotify, (XtPointer)w);
  }
  
      static void
  EndScroll(w, event, params, num_params)
      Widget w;
!     XEvent *event UNUSED;
!     String *params UNUSED;
!     Cardinal *num_params UNUSED;
  {
      ScrollbarWidget sbw = (ScrollbarWidget) w;
  
***************
*** 1023,1035 ****
      return PICKLENGTH(sbw, x / width, y / height);
  }
  
- /* ARGSUSED */
      static void
  MoveThumb(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params;	/* unused */
!     Cardinal	*num_params;	/* unused */
  {
      ScrollbarWidget	sbw = (ScrollbarWidget)w;
      Position		x, y;
--- 1017,1028 ----
      return PICKLENGTH(sbw, x / width, y / height);
  }
  
      static void
  MoveThumb(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params UNUSED;
!     Cardinal	*num_params UNUSED;
  {
      ScrollbarWidget	sbw = (ScrollbarWidget)w;
      Position		x, y;
***************
*** 1069,1081 ****
  }
  
  
- /* ARGSUSED */
      static void
  NotifyThumb(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params;	/* unused */
!     Cardinal	*num_params;	/* unused */
  {
      ScrollbarWidget sbw = (ScrollbarWidget)w;
      /* Use a union to avoid a warning for the weird conversion from float to
--- 1062,1073 ----
  }
  
  
      static void
  NotifyThumb(w, event, params, num_params)
      Widget	w;
      XEvent	*event;
!     String	*params UNUSED;
!     Cardinal	*num_params UNUSED;
  {
      ScrollbarWidget sbw = (ScrollbarWidget)w;
      /* Use a union to avoid a warning for the weird conversion from float to
***************
*** 1096,1102 ****
      XtCallCallbacks(w, XtNjumpProc, (XtPointer)&sbw->scrollbar.top);
  }
  
- /* ARGSUSED */
      static void
  AllocTopShadowGC(w)
      Widget w;
--- 1088,1093 ----
***************
*** 1110,1116 ****
      sbw->scrollbar.top_shadow_GC = XtGetGC(w, valuemask, &myXGCV);
  }
  
- /* ARGSUSED */
      static void
  AllocBotShadowGC(w)
      Widget w;
--- 1101,1106 ----
***************
*** 1124,1134 ****
      sbw->scrollbar.bot_shadow_GC = XtGetGC(w, valuemask, &myXGCV);
  }
  
- /* ARGSUSED */
      static void
  _Xaw3dDrawShadows(gw, event, region, out)
      Widget  gw;
!     XEvent  *event;
      Region  region;
      int	    out;
  {
--- 1114,1123 ----
      sbw->scrollbar.bot_shadow_GC = XtGetGC(w, valuemask, &myXGCV);
  }
  
      static void
  _Xaw3dDrawShadows(gw, event, region, out)
      Widget  gw;
!     XEvent  *event UNUSED;
      Region  region;
      int	    out;
  {
*** ../vim-7.2.183/src/gui_at_fs.c	2006-05-13 15:51:07.000000000 +0200
--- src/gui_at_fs.c	2009-05-21 16:38:36.000000000 +0200
***************
*** 829,835 ****
      text.format = FMT8BIT;
  
  #ifdef XtNinternational
!     if (_XawTextFormat((TextWidget)selFileField) == XawFmtWide)
      {
  	XawTextReplace(selFileField, (XawTextPosition)0,
  				    (XawTextPosition)WcsLen((wchar_t *)&SFtextBuffer[0]), &text);
--- 829,835 ----
      text.format = FMT8BIT;
  
  #ifdef XtNinternational
!     if ((unsigned long)_XawTextFormat((TextWidget)selFileField) == XawFmtWide)
      {
  	XawTextReplace(selFileField, (XawTextPosition)0,
  				    (XawTextPosition)WcsLen((wchar_t *)&SFtextBuffer[0]), &text);
***************
*** 851,867 ****
  #endif
  }
  
- /* ARGSUSED */
      static void
  SFbuttonPressList(w, n, event)
!     Widget		w;
!     int			n;
!     XButtonPressedEvent	*event;
  {
      SFbuttonPressed = 1;
  }
  
- /* ARGSUSED */
      static void
  SFbuttonReleaseList(w, n, event)
      Widget		 w;
--- 851,865 ----
  #endif
  }
  
      static void
  SFbuttonPressList(w, n, event)
!     Widget		w UNUSED;
!     int			n UNUSED;
!     XButtonPressedEvent	*event UNUSED;
  {
      SFbuttonPressed = 1;
  }
  
      static void
  SFbuttonReleaseList(w, n, event)
      Widget		 w;
***************
*** 989,999 ****
      return result;
  }
  
- /* ARGSUSED */
      static void
  SFdirModTimer(cl, id)
!     XtPointer		cl;
!     XtIntervalId	*id;
  {
      static int		n = -1;
      static int		f = 0;
--- 987,996 ----
      return result;
  }
  
      static void
  SFdirModTimer(cl, id)
!     XtPointer		cl UNUSED;
!     XtIntervalId	*id UNUSED;
  {
      static int		n = -1;
      static int		f = 0;
***************
*** 1596,1606 ****
  
  static void SFscrollTimer __ARGS((XtPointer p, XtIntervalId *id));
  
- /* ARGSUSED */
      static void
  SFscrollTimer(p, id)
      XtPointer		p;
!     XtIntervalId	*id;
  {
      SFDir	*dir;
      int		save;
--- 1593,1602 ----
  
  static void SFscrollTimer __ARGS((XtPointer p, XtIntervalId *id));
  
      static void
  SFscrollTimer(p, id)
      XtPointer		p;
!     XtIntervalId	*id UNUSED;
  {
      SFDir	*dir;
      int		save;
***************
*** 1695,1704 ****
      }
  }
  
- /* ARGSUSED */
      static void
  SFenterList(w, n, event)
!     Widget		w;
      int			n;
      XEnterWindowEvent	*event;
  {
--- 1691,1699 ----
      }
  }
  
      static void
  SFenterList(w, n, event)
!     Widget		w UNUSED;
      int			n;
      XEnterWindowEvent	*event;
  {
***************
*** 1719,1730 ****
      }
  }
  
- /* ARGSUSED */
      static void
  SFleaveList(w, n, event)
!     Widget	w;
      int		n;
!     XEvent	*event;
  {
      if (SFcurrentInvert[n] != -1)
      {
--- 1714,1724 ----
      }
  }
  
      static void
  SFleaveList(w, n, event)
!     Widget	w UNUSED;
      int		n;
!     XEvent	*event UNUSED;
  {
      if (SFcurrentInvert[n] != -1)
      {
***************
*** 1733,1742 ****
      }
  }
  
- /* ARGSUSED */
      static void
  SFmotionList(w, n, event)
!     Widget		w;
      int			n;
      XMotionEvent	*event;
  {
--- 1727,1735 ----
      }
  }
  
      static void
  SFmotionList(w, n, event)
!     Widget		w UNUSED;
      int			n;
      XMotionEvent	*event;
  {
***************
*** 1754,1760 ****
      }
  }
  
- /* ARGSUSED */
      static void
  SFvFloatSliderMovedCallback(w, n, fnew)
      Widget	w;
--- 1747,1752 ----
***************
*** 1767,1776 ****
      SFvSliderMovedCallback(w, (int)(long)n, nw);
  }
  
- /* ARGSUSED */
      static void
  SFvSliderMovedCallback(w, n, nw)
!     Widget	w;
      int		n;
      int		nw;
  {
--- 1759,1767 ----
      SFvSliderMovedCallback(w, (int)(long)n, nw);
  }
  
      static void
  SFvSliderMovedCallback(w, n, nw)
!     Widget	w UNUSED;
      int		n;
      int		nw;
  {
***************
*** 1853,1862 ****
      }
  }
  
- /* ARGSUSED */
      static void
  SFvAreaSelectedCallback(w, n, pnew)
!     Widget		w;
      XtPointer	n;
      XtPointer	pnew;
  {
--- 1844,1852 ----
      }
  }
  
      static void
  SFvAreaSelectedCallback(w, n, pnew)
!     Widget	w;
      XtPointer	n;
      XtPointer	pnew;
  {
***************
*** 1914,1923 ****
      SFvSliderMovedCallback(w, (int)(long)n, nw);
  }
  
- /* ARGSUSED */
      static void
  SFhSliderMovedCallback(w, n, nw)
!     Widget	w;
      XtPointer	n;
      XtPointer	nw;
  {
--- 1904,1912 ----
      SFvSliderMovedCallback(w, (int)(long)n, nw);
  }
  
      static void
  SFhSliderMovedCallback(w, n, nw)
!     Widget	w UNUSED;
      XtPointer	n;
      XtPointer	nw;
  {
***************
*** 1933,1942 ****
      SFdrawList((int)(long)n, SF_DO_NOT_SCROLL);
  }
  
- /* ARGSUSED */
      static void
  SFhAreaSelectedCallback(w, n, pnew)
!     Widget		w;
      XtPointer	n;
      XtPointer	pnew;
  {
--- 1922,1930 ----
      SFdrawList((int)(long)n, SF_DO_NOT_SCROLL);
  }
  
      static void
  SFhAreaSelectedCallback(w, n, pnew)
!     Widget	w;
      XtPointer	n;
      XtPointer	pnew;
  {
***************
*** 1994,2004 ****
      }
  }
  
- /* ARGSUSED */
      static void
  SFpathSliderMovedCallback(w, client_data, nw)
!     Widget		w;
!     XtPointer	client_data;
      XtPointer	nw;
  {
      SFDir		*dir;
--- 1982,1991 ----
      }
  }
  
      static void
  SFpathSliderMovedCallback(w, client_data, nw)
!     Widget	w UNUSED;
!     XtPointer	client_data UNUSED;
      XtPointer	nw;
  {
      SFDir		*dir;
***************
*** 2031,2041 ****
      XawTextSetInsertionPoint(selFileField, pos);
  }
  
- /* ARGSUSED */
      static void
  SFpathAreaSelectedCallback(w, client_data, pnew)
      Widget	w;
!     XtPointer	client_data;
      XtPointer	pnew;
  {
      int		nw = (int)(long)pnew;
--- 2018,2027 ----
      XawTextSetInsertionPoint(selFileField, pos);
  }
  
      static void
  SFpathAreaSelectedCallback(w, client_data, pnew)
      Widget	w;
!     XtPointer	client_data UNUSED;
      XtPointer	pnew;
  {
      int		nw = (int)(long)pnew;
***************
*** 2206,2218 ****
  
  static void SFexposeList __ARGS((Widget w, XtPointer n, XEvent *event, Boolean *cont));
  
- /* ARGSUSED */
      static void
  SFexposeList(w, n, event, cont)
!     Widget	w;
      XtPointer	n;
      XEvent	*event;
!     Boolean	*cont;
  {
      if ((event->type == NoExpose) || event->xexpose.count)
  	return;
--- 2192,2203 ----
  
  static void SFexposeList __ARGS((Widget w, XtPointer n, XEvent *event, Boolean *cont));
  
      static void
  SFexposeList(w, n, event, cont)
!     Widget	w UNUSED;
      XtPointer	n;
      XEvent	*event;
!     Boolean	*cont UNUSED;
  {
      if ((event->type == NoExpose) || event->xexpose.count)
  	return;
***************
*** 2222,2234 ****
  
  static void SFmodVerifyCallback __ARGS((Widget w, XtPointer client_data, XEvent *event, Boolean *cont));
  
- /* ARGSUSED */
      static void
  SFmodVerifyCallback(w, client_data, event, cont)
!     Widget		w;
!     XtPointer		client_data;
      XEvent		*event;
!     Boolean		*cont;
  {
      char	buf[2];
  
--- 2207,2218 ----
  
  static void SFmodVerifyCallback __ARGS((Widget w, XtPointer client_data, XEvent *event, Boolean *cont));
  
      static void
  SFmodVerifyCallback(w, client_data, event, cont)
!     Widget		w UNUSED;
!     XtPointer		client_data UNUSED;
      XEvent		*event;
!     Boolean		*cont UNUSED;
  {
      char	buf[2];
  
***************
*** 2241,2251 ****
  
  static void SFokCallback __ARGS((Widget w, XtPointer cl, XtPointer cd));
  
- /* ARGSUSED */
      static void
  SFokCallback(w, cl, cd)
!     Widget	w;
!     XtPointer	cl, cd;
  {
      SFstatus = SEL_FILE_OK;
  }
--- 2225,2235 ----
  
  static void SFokCallback __ARGS((Widget w, XtPointer cl, XtPointer cd));
  
      static void
  SFokCallback(w, cl, cd)
!     Widget	w UNUSED;
!     XtPointer	cl UNUSED;
!     XtPointer	cd UNUSED;
  {
      SFstatus = SEL_FILE_OK;
  }
***************
*** 2258,2268 ****
  
  static void SFcancelCallback __ARGS((Widget w, XtPointer cl, XtPointer cd));
  
- /* ARGSUSED */
      static void
  SFcancelCallback(w, cl, cd)
!     Widget	w;
!     XtPointer	cl, cd;
  {
      SFstatus = SEL_FILE_CANCEL;
  }
--- 2242,2252 ----
  
  static void SFcancelCallback __ARGS((Widget w, XtPointer cl, XtPointer cd));
  
      static void
  SFcancelCallback(w, cl, cd)
!     Widget	w UNUSED;
!     XtPointer	cl UNUSED;
!     XtPointer	cd UNUSED;
  {
      SFstatus = SEL_FILE_CANCEL;
  }
***************
*** 2275,2290 ****
  
  static void SFdismissAction __ARGS((Widget w, XEvent *event, String *params, Cardinal *num_params));
  
- /* ARGSUSED */
      static void
  SFdismissAction(w, event, params, num_params)
!     Widget	w;
!     XEvent *event;
!     String *params;
!     Cardinal *num_params;
  {
!     if (event->type == ClientMessage &&
! 	    event->xclient.data.l[0] != SFwmDeleteWindow)
  	return;
  
      SFstatus = SEL_FILE_CANCEL;
--- 2259,2273 ----
  
  static void SFdismissAction __ARGS((Widget w, XEvent *event, String *params, Cardinal *num_params));
  
      static void
  SFdismissAction(w, event, params, num_params)
!     Widget	w UNUSED;
!     XEvent	*event;
!     String	*params UNUSED;
!     Cardinal	*num_params UNUSED;
  {
!     if (event->type == ClientMessage
! 	    && (Atom)event->xclient.data.l[0] != SFwmDeleteWindow)
  	return;
  
      SFstatus = SEL_FILE_CANCEL;
***************
*** 2703,2709 ****
  SFtextChanged()
  {
  #if defined(FEAT_XFONTSET) && defined(XtNinternational)
!     if (_XawTextFormat((TextWidget)selFileField) == XawFmtWide)
      {
  	wchar_t *wcbuf=(wchar_t *)SFtextBuffer;
  
--- 2686,2692 ----
  SFtextChanged()
  {
  #if defined(FEAT_XFONTSET) && defined(XtNinternational)
!     if ((unsigned long)_XawTextFormat((TextWidget)selFileField) == XawFmtWide)
      {
  	wchar_t *wcbuf=(wchar_t *)SFtextBuffer;
  
***************
*** 2749,2755 ****
  #if defined(FEAT_XFONTSET) && defined(XtNinternational)
      char *buf;
  
!     if (_XawTextFormat((TextWidget)selFileField) == XawFmtWide)
      {
  	wchar_t *wcbuf;
  	int mbslength;
--- 2732,2738 ----
  #if defined(FEAT_XFONTSET) && defined(XtNinternational)
      char *buf;
  
!     if ((unsigned long)_XawTextFormat((TextWidget)selFileField) == XawFmtWide)
      {
  	wchar_t *wcbuf;
  	int mbslength;
*** ../vim-7.2.183/src/gui_motif.c	2008-06-20 11:39:30.000000000 +0200
--- src/gui_motif.c	2009-05-21 17:15:05.000000000 +0200
***************
*** 117,126 ****
   * Call-back routines.
   */
  
- /* ARGSUSED */
      static void
  scroll_cb(w, client_data, call_data)
!     Widget	w;
      XtPointer	client_data, call_data;
  {
      scrollbar_T *sb;
--- 117,125 ----
   * Call-back routines.
   */
  
      static void
  scroll_cb(w, client_data, call_data)
!     Widget	w UNUSED;
      XtPointer	client_data, call_data;
  {
      scrollbar_T *sb;
***************
*** 136,146 ****
  }
  
  #ifdef FEAT_GUI_TABLINE
- /*ARGSUSED*/
      static void
  tabline_cb(w, client_data, call_data)
!     Widget	w;
!     XtPointer	client_data, call_data;
  {
      XmNotebookCallbackStruct *nptr;
  
--- 135,145 ----
  }
  
  #ifdef FEAT_GUI_TABLINE
      static void
  tabline_cb(w, client_data, call_data)
!     Widget	w UNUSED;
!     XtPointer	client_data UNUSED;
!     XtPointer	call_data;
  {
      XmNotebookCallbackStruct *nptr;
  
***************
*** 149,159 ****
  	send_tabline_event(nptr->page_number);
  }
  
- /*ARGSUSED*/
      static void
  tabline_button_cb(w, client_data, call_data)
      Widget	w;
!     XtPointer	client_data, call_data;
  {
      int		cmd, tab_idx;
  
--- 148,158 ----
  	send_tabline_event(nptr->page_number);
  }
  
      static void
  tabline_button_cb(w, client_data, call_data)
      Widget	w;
!     XtPointer	client_data UNUSED;
!     XtPointer	call_data UNUSED;
  {
      int		cmd, tab_idx;
  
***************
*** 166,176 ****
  /*
   * Tabline single mouse click timeout handler
   */
- /*ARGSUSED*/
      static void
  motif_tabline_timer_cb (timed_out, interval_id)
      XtPointer		timed_out;
!     XtIntervalId	*interval_id;
  {
      *((int *)timed_out) = TRUE;
  }
--- 165,174 ----
  /*
   * Tabline single mouse click timeout handler
   */
      static void
  motif_tabline_timer_cb (timed_out, interval_id)
      XtPointer		timed_out;
!     XtIntervalId	*interval_id UNUSED;
  {
      *((int *)timed_out) = TRUE;
  }
***************
*** 203,215 ****
      return FALSE;
  }
  
- /*ARGSUSED*/
      static void
  tabline_menu_cb(w, closure, e, continue_dispatch)
      Widget	w;
!     XtPointer	closure;
      XEvent	*e;
!     Boolean	*continue_dispatch;
  {
      Widget			tab_w;
      XButtonPressedEvent		*event;
--- 201,212 ----
      return FALSE;
  }
  
      static void
  tabline_menu_cb(w, closure, e, continue_dispatch)
      Widget	w;
!     XtPointer	closure UNUSED;
      XEvent	*e;
!     Boolean	*continue_dispatch UNUSED;
  {
      Widget			tab_w;
      XButtonPressedEvent		*event;
***************
*** 277,287 ****
      XtManageChild(tabLine_menu);
  }
  
- /*ARGSUSED*/
      static void
  tabline_balloon_cb(beval, state)
      BalloonEval	*beval;
!     int		state;
  {
      int		nr;
      tabpage_T	*tp;
--- 274,283 ----
      XtManageChild(tabLine_menu);
  }
  
      static void
  tabline_balloon_cb(beval, state)
      BalloonEval	*beval;
!     int		state UNUSED;
  {
      int		nr;
      tabpage_T	*tp;
***************
*** 642,654 ****
  #endif
  }
  
- /*ARGSUSED*/
      void
  gui_mch_set_text_area_pos(x, y, w, h)
!     int	    x;
!     int	    y;
!     int	    w;
!     int	    h;
  {
  #ifdef FEAT_TOOLBAR
      /* Give keyboard focus to the textArea instead of the toolbar. */
--- 638,649 ----
  #endif
  }
  
      void
  gui_mch_set_text_area_pos(x, y, w, h)
!     int	    x UNUSED;
!     int	    y UNUSED;
!     int	    w UNUSED;
!     int	    h UNUSED;
  {
  #ifdef FEAT_TOOLBAR
      /* Give keyboard focus to the textArea instead of the toolbar. */
***************
*** 1261,1267 ****
      if (menu->icon_builtin || gui_find_bitmap(menu->name, buf, "xpm") == FAIL)
      {
  	if (menu->iconidx >= 0 && menu->iconidx
! 		   < (sizeof(built_in_pixmaps) / sizeof(built_in_pixmaps[0])))
  	    xpm = built_in_pixmaps[menu->iconidx];
  	else
  	    xpm = tb_blank_xpm;
--- 1256,1262 ----
      if (menu->icon_builtin || gui_find_bitmap(menu->name, buf, "xpm") == FAIL)
      {
  	if (menu->iconidx >= 0 && menu->iconidx
! 	       < (int)(sizeof(built_in_pixmaps) / sizeof(built_in_pixmaps[0])))
  	    xpm = built_in_pixmaps[menu->iconidx];
  	else
  	    xpm = tb_blank_xpm;
***************
*** 1716,1725 ****
      }
  }
  
- /* ARGSUSED */
      void
  gui_mch_show_popupmenu(menu)
!     vimmenu_T *menu;
  {
  #ifdef MOTIF_POPUP
      XmMenuPosition(menu->submenu_id, gui_x11_get_last_mouse_event());
--- 1711,1719 ----
      }
  }
  
      void
  gui_mch_show_popupmenu(menu)
!     vimmenu_T *menu UNUSED;
  {
  #ifdef MOTIF_POPUP
      XmMenuPosition(menu->submenu_id, gui_x11_get_last_mouse_event());
***************
*** 2046,2054 ****
  /*
   * Callback routine for dialog mnemonic processing.
   */
- /*ARGSUSED*/
      static void
! mnemonic_event(Widget w, XtPointer call_data, XKeyEvent *event)
  {
      do_mnemonic(w, event->keycode);
  }
--- 2040,2047 ----
  /*
   * Callback routine for dialog mnemonic processing.
   */
      static void
! mnemonic_event(Widget w, XtPointer call_data UNUSED, XKeyEvent *event)
  {
      do_mnemonic(w, event->keycode);
  }
***************
*** 2287,2299 ****
   * Put up a file requester.
   * Returns the selected name in allocated memory, or NULL for Cancel.
   */
- /* ARGSUSED */
      char_u *
  gui_mch_browse(saving, title, dflt, ext, initdir, filter)
!     int		saving;		/* select file to write */
      char_u	*title;		/* title for the window */
      char_u	*dflt;		/* default name */
!     char_u	*ext;		/* not used (extension added) */
      char_u	*initdir;	/* initial directory, NULL for current dir */
      char_u	*filter;	/* file name filter */
  {
--- 2280,2291 ----
   * Put up a file requester.
   * Returns the selected name in allocated memory, or NULL for Cancel.
   */
      char_u *
  gui_mch_browse(saving, title, dflt, ext, initdir, filter)
!     int		saving UNUSED;	/* select file to write */
      char_u	*title;		/* title for the window */
      char_u	*dflt;		/* default name */
!     char_u	*ext UNUSED;	/* not used (extension added) */
      char_u	*initdir;	/* initial directory, NULL for current dir */
      char_u	*filter;	/* file name filter */
  {
***************
*** 2413,2424 ****
  /*
   * Process callback from Dialog cancel actions.
   */
- /* ARGSUSED */
      static void
  DialogCancelCB(w, client_data, call_data)
!     Widget	w;		/*  widget id		*/
!     XtPointer	client_data;	/*  data from application   */
!     XtPointer	call_data;	/*  data from widget class  */
  {
      if (browse_fname != NULL)
      {
--- 2405,2415 ----
  /*
   * Process callback from Dialog cancel actions.
   */
      static void
  DialogCancelCB(w, client_data, call_data)
!     Widget	w UNUSED;		/*  widget id		*/
!     XtPointer	client_data UNUSED;	/*  data from application   */
!     XtPointer	call_data UNUSED;	/*  data from widget class  */
  {
      if (browse_fname != NULL)
      {
***************
*** 2431,2442 ****
  /*
   * Process callback from Dialog actions.
   */
- /* ARGSUSED */
      static void
  DialogAcceptCB(w, client_data, call_data)
!     Widget	w;		/*  widget id		*/
!     XtPointer	client_data;	/*  data from application   */
!     XtPointer	call_data;	/*  data from widget class  */
  {
      XmFileSelectionBoxCallbackStruct *fcb;
  
--- 2422,2432 ----
  /*
   * Process callback from Dialog actions.
   */
      static void
  DialogAcceptCB(w, client_data, call_data)
!     Widget	w UNUSED;		/*  widget id		*/
!     XtPointer	client_data UNUSED;	/*  data from application   */
!     XtPointer	call_data;		/*  data from widget class  */
  {
      XmFileSelectionBoxCallbackStruct *fcb;
  
***************
*** 2467,2479 ****
   * Callback function for the textfield.  When CR is hit this works like
   * hitting the "OK" button, ESC like "Cancel".
   */
- /* ARGSUSED */
      static void
  keyhit_callback(w, client_data, event, cont)
      Widget		w;
!     XtPointer		client_data;
      XEvent		*event;
!     Boolean		*cont;
  {
      char	buf[2];
      KeySym	key_sym;
--- 2457,2468 ----
   * Callback function for the textfield.  When CR is hit this works like
   * hitting the "OK" button, ESC like "Cancel".
   */
      static void
  keyhit_callback(w, client_data, event, cont)
      Widget		w;
!     XtPointer		client_data UNUSED;
      XEvent		*event;
!     Boolean		*cont UNUSED;
  {
      char	buf[2];
      KeySym	key_sym;
***************
*** 2490,2501 ****
  	XmTextFieldClearSelection(w, XtLastTimestampProcessed(gui.dpy));
  }
  
- /* ARGSUSED */
      static void
  butproc(w, client_data, call_data)
!     Widget	w;
      XtPointer	client_data;
!     XtPointer	call_data;
  {
      dialogStatus = (int)(long)client_data + 1;
  }
--- 2479,2489 ----
  	XmTextFieldClearSelection(w, XtLastTimestampProcessed(gui.dpy));
  }
  
      static void
  butproc(w, client_data, call_data)
!     Widget	w UNUSED;
      XtPointer	client_data;
!     XtPointer	call_data UNUSED;
  {
      dialogStatus = (int)(long)client_data + 1;
  }
***************
*** 2567,2576 ****
  }
  #endif
  
- /* ARGSUSED */
      int
  gui_mch_dialog(type, title, message, button_names, dfltbutton, textfield)
!     int		type;
      char_u	*title;
      char_u	*message;
      char_u	*button_names;
--- 2555,2563 ----
  }
  #endif
  
      int
  gui_mch_dialog(type, title, message, button_names, dfltbutton, textfield)
!     int		type UNUSED;
      char_u	*title;
      char_u	*message;
      char_u	*button_names;
***************
*** 3197,3203 ****
  		XmNchildren, &children,
  		XmNnumChildren, &numChildren, NULL);
  	borders += tst + tmh;
! 	for (i = 0; i < numChildren; i++)
  	{
  	    whgt = 0;
  	    XtVaGetValues(children[i], XmNheight, &whgt, NULL);
--- 3184,3190 ----
  		XmNchildren, &children,
  		XmNnumChildren, &numChildren, NULL);
  	borders += tst + tmh;
! 	for (i = 0; i < (int)numChildren; i++)
  	{
  	    whgt = 0;
  	    XtVaGetValues(children[i], XmNheight, &whgt, NULL);
***************
*** 3237,3249 ****
   * I have to use footer help for backwards compatability.  Hopefully both will
   * get implemented and the user will have a choice.
   */
- /*ARGSUSED*/
      static void
  toolbarbutton_enter_cb(w, client_data, event, cont)
!     Widget	w;
      XtPointer	client_data;
!     XEvent	*event;
!     Boolean	*cont;
  {
      vimmenu_T	*menu = (vimmenu_T *) client_data;
  
--- 3224,3235 ----
   * I have to use footer help for backwards compatability.  Hopefully both will
   * get implemented and the user will have a choice.
   */
      static void
  toolbarbutton_enter_cb(w, client_data, event, cont)
!     Widget	w UNUSED;
      XtPointer	client_data;
!     XEvent	*event UNUSED;
!     Boolean	*cont UNUSED;
  {
      vimmenu_T	*menu = (vimmenu_T *) client_data;
  
***************
*** 3254,3266 ****
      }
  }
  
- /*ARGSUSED*/
      static void
  toolbarbutton_leave_cb(w, client_data, event, cont)
!     Widget	w;
!     XtPointer	client_data;
!     XEvent	*event;
!     Boolean	*cont;
  {
      gui_mch_set_footer((char_u *) "");
  }
--- 3240,3251 ----
      }
  }
  
      static void
  toolbarbutton_leave_cb(w, client_data, event, cont)
!     Widget	w UNUSED;
!     XtPointer	client_data UNUSED;
!     XEvent	*event UNUSED;
!     Boolean	*cont UNUSED;
  {
      gui_mch_set_footer((char_u *) "");
  }
***************
*** 3492,3501 ****
  /*
   * Set the fontlist for Widget "id" to use gui.menu_fontset or gui.menu_font.
   */
- /*ARGSUSED*/
      void
  gui_motif_menu_fontlist(id)
!     Widget  id;
  {
  #ifdef FEAT_MENU
  #ifdef FONTSET_ALWAYS
--- 3477,3485 ----
  /*
   * Set the fontlist for Widget "id" to use gui.menu_fontset or gui.menu_font.
   */
      void
  gui_motif_menu_fontlist(id)
!     Widget  id UNUSED;
  {
  #ifdef FEAT_MENU
  #ifdef FONTSET_ALWAYS
***************
*** 3566,3573 ****
      Widget cancel;
  } SharedFindReplace;
  
! static SharedFindReplace find_widgets = { NULL };
! static SharedFindReplace repl_widgets = { NULL };
  
  static void find_replace_destroy_callback __ARGS((Widget w, XtPointer client_data, XtPointer call_data));
  static void find_replace_dismiss_callback __ARGS((Widget w, XtPointer client_data, XtPointer call_data));
--- 3550,3557 ----
      Widget cancel;
  } SharedFindReplace;
  
! static SharedFindReplace find_widgets = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};
! static SharedFindReplace repl_widgets = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};
  
  static void find_replace_destroy_callback __ARGS((Widget w, XtPointer client_data, XtPointer call_data));
  static void find_replace_dismiss_callback __ARGS((Widget w, XtPointer client_data, XtPointer call_data));
***************
*** 3576,3587 ****
  static void find_replace_keypress __ARGS((Widget w, SharedFindReplace * frdp, XKeyEvent * event));
  static void find_replace_dialog_create __ARGS((char_u *entry_text, int do_replace));
  
- /*ARGSUSED*/
      static void
  find_replace_destroy_callback(w, client_data, call_data)
!     Widget	w;
      XtPointer	client_data;
!     XtPointer	call_data;
  {
      SharedFindReplace *cd = (SharedFindReplace *)client_data;
  
--- 3560,3570 ----
  static void find_replace_keypress __ARGS((Widget w, SharedFindReplace * frdp, XKeyEvent * event));
  static void find_replace_dialog_create __ARGS((char_u *entry_text, int do_replace));
  
      static void
  find_replace_destroy_callback(w, client_data, call_data)
!     Widget	w UNUSED;
      XtPointer	client_data;
!     XtPointer	call_data UNUSED;
  {
      SharedFindReplace *cd = (SharedFindReplace *)client_data;
  
***************
*** 3590,3601 ****
  	cd->dialog = (Widget)0;
  }
  
- /*ARGSUSED*/
      static void
  find_replace_dismiss_callback(w, client_data, call_data)
!     Widget	w;
      XtPointer	client_data;
!     XtPointer	call_data;
  {
      SharedFindReplace *cd = (SharedFindReplace *)client_data;
  
--- 3573,3583 ----
  	cd->dialog = (Widget)0;
  }
  
      static void
  find_replace_dismiss_callback(w, client_data, call_data)
!     Widget	w UNUSED;
      XtPointer	client_data;
!     XtPointer	call_data UNUSED;
  {
      SharedFindReplace *cd = (SharedFindReplace *)client_data;
  
***************
*** 3603,3624 ****
  	XtUnmanageChild(cd->dialog);
  }
  
- /*ARGSUSED*/
      static void
  entry_activate_callback(w, client_data, call_data)
!     Widget	w;
      XtPointer	client_data;
!     XtPointer	call_data;
  {
      XmProcessTraversal((Widget)client_data, XmTRAVERSE_CURRENT);
  }
  
- /*ARGSUSED*/
      static void
  find_replace_callback(w, client_data, call_data)
!     Widget	w;
      XtPointer	client_data;
!     XtPointer	call_data;
  {
      long_u	flags = (long_u)client_data;
      char	*find_text, *repl_text;
--- 3585,3604 ----
  	XtUnmanageChild(cd->dialog);
  }
  
      static void
  entry_activate_callback(w, client_data, call_data)
!     Widget	w UNUSED;
      XtPointer	client_data;
!     XtPointer	call_data UNUSED;
  {
      XmProcessTraversal((Widget)client_data, XmTRAVERSE_CURRENT);
  }
  
      static void
  find_replace_callback(w, client_data, call_data)
!     Widget	w UNUSED;
      XtPointer	client_data;
!     XtPointer	call_data UNUSED;
  {
      long_u	flags = (long_u)client_data;
      char	*find_text, *repl_text;
***************
*** 3668,3677 ****
  	XtFree(repl_text);
  }
  
- /*ARGSUSED*/
      static void
  find_replace_keypress(w, frdp, event)
!     Widget		w;
      SharedFindReplace	*frdp;
      XKeyEvent		*event;
  {
--- 3648,3656 ----
  	XtFree(repl_text);
  }
  
      static void
  find_replace_keypress(w, frdp, event)
!     Widget		w UNUSED;
      SharedFindReplace	*frdp;
      XKeyEvent		*event;
  {
*** ../vim-7.2.183/src/gui_xmdlg.c	2008-11-28 21:26:50.000000000 +0100
--- src/gui_xmdlg.c	2009-05-21 17:01:52.000000000 +0200
***************
*** 448,454 ****
  
  	    items[i] = XmStringCreateLocalized(list[ENCODING][i]);
  
! 	    if (i < n_items)
  	    {
  		/* recycle old button */
  		XtVaSetValues(children[i],
--- 448,454 ----
  
  	    items[i] = XmStringCreateLocalized(list[ENCODING][i]);
  
! 	    if (i < (int)n_items)
  	    {
  		/* recycle old button */
  		XtVaSetValues(children[i],
***************
*** 481,487 ****
  
  	/* Destroy all the outstanding menu items.
  	 */
! 	for (i = count[ENCODING]; i < n_items; ++i)
  	{
  	    XtUnmanageChild(children[i]);
  	    XtDestroyWidget(children[i]);
--- 481,487 ----
  
  	/* Destroy all the outstanding menu items.
  	 */
! 	for (i = count[ENCODING]; i < (int)n_items; ++i)
  	{
  	    XtUnmanageChild(children[i]);
  	    XtDestroyWidget(children[i]);
***************
*** 544,552 ****
      }
  }
  
- /*ARGSUSED*/
      static void
! stoggle_callback(Widget w,
  	SharedFontSelData *data,
  	XmToggleButtonCallbackStruct *call_data)
  {
--- 544,551 ----
      }
  }
  
      static void
! stoggle_callback(Widget w UNUSED,
  	SharedFontSelData *data,
  	XmToggleButtonCallbackStruct *call_data)
  {
***************
*** 709,719 ****
      }
  }
  
- /*ARGSUSED*/
      static void
  encoding_callback(Widget w,
  	SharedFontSelData *data,
! 	XtPointer dummy)
  {
      XmString str;
      XmListCallbackStruct fake_data;
--- 708,717 ----
      }
  }
  
      static void
  encoding_callback(Widget w,
  	SharedFontSelData *data,
! 	XtPointer dummy UNUSED)
  {
      XmString str;
      XmListCallbackStruct fake_data;
***************
*** 752,762 ****
      do_choice(w, data, call_data, SIZE);
  }
  
- /*ARGSUSED*/
      static void
! cancel_callback(Widget w,
  	SharedFontSelData *data,
! 	XmListCallbackStruct *call_data)
  {
      if (data->sel[ENCODING])
      {
--- 750,759 ----
      do_choice(w, data, call_data, SIZE);
  }
  
      static void
! cancel_callback(Widget w UNUSED,
  	SharedFontSelData *data,
! 	XmListCallbackStruct *call_data UNUSED)
  {
      if (data->sel[ENCODING])
      {
***************
*** 789,799 ****
      data->exit = True;
  }
  
- /*ARGSUSED*/
      static void
! ok_callback(Widget w,
  	SharedFontSelData *data,
! 	XmPushButtonCallbackStruct *call_data)
  {
      char    *pattern;
      char    **name;
--- 786,795 ----
      data->exit = True;
  }
  
      static void
! ok_callback(Widget w UNUSED,
  	SharedFontSelData *data,
! 	XmPushButtonCallbackStruct *call_data UNUSED)
  {
      char    *pattern;
      char    **name;
*** ../vim-7.2.183/src/gui_xmebw.c	2008-11-28 21:26:50.000000000 +0100
--- src/gui_xmebw.c	2009-05-21 17:06:17.000000000 +0200
***************
*** 235,247 ****
      return tmp;
  }
  
- /*ARGSUSED*/
      static int
  alloc_color(Display	*display,
  	Colormap	colormap,
  	char		*colorname,
  	XColor		*xcolor,
! 	void		*closure)
  {
      int status;
  
--- 235,246 ----
      return tmp;
  }
  
      static int
  alloc_color(Display	*display,
  	Colormap	colormap,
  	char		*colorname,
  	XColor		*xcolor,
! 	void		*closure UNUSED)
  {
      int status;
  
***************
*** 595,603 ****
  		       XtHeight(eb), eb->primitive.highlight_thickness);
  }
  
- /*ARGSUSED*/
      static void
! draw_pixmap(XmEnhancedButtonWidget eb, XEvent *event, Region region)
  {
      Pixmap	pix;
      GC		gc = eb->label.normal_GC;
--- 594,603 ----
  		       XtHeight(eb), eb->primitive.highlight_thickness);
  }
  
      static void
! draw_pixmap(XmEnhancedButtonWidget eb,
! 	    XEvent *event UNUSED,
! 	    Region region UNUSED)
  {
      Pixmap	pix;
      GC		gc = eb->label.normal_GC;
***************
*** 641,647 ****
      height = eb->core.height - 2 * y;
      if (h < height)
  	height = h;
!     if (depth == eb->core.depth)
  	XCopyArea(XtDisplay(eb), pix, XtWindow(eb), gc, 0, 0,
  		width, height, x, y);
      else if (depth == 1)
--- 641,647 ----
      height = eb->core.height - 2 * y;
      if (h < height)
  	height = h;
!     if (depth == (int)eb->core.depth)
  	XCopyArea(XtDisplay(eb), pix, XtWindow(eb), gc, 0, 0,
  		width, height, x, y);
      else if (depth == 1)
***************
*** 731,739 ****
  	eb->label.normal_GC = tmp_gc;
  }
  
- /*ARGSUSED*/
      static void
! Enter(Widget wid, XEvent *event, String *params, Cardinal *num_params)
  {
      XmEnhancedButtonWidget eb = (XmEnhancedButtonWidget) wid;
      XmPushButtonCallbackStruct call_value;
--- 731,741 ----
  	eb->label.normal_GC = tmp_gc;
  }
  
      static void
! Enter(Widget wid,
!       XEvent *event,
!       String *params UNUSED,
!       Cardinal *num_params UNUSED)
  {
      XmEnhancedButtonWidget eb = (XmEnhancedButtonWidget) wid;
      XmPushButtonCallbackStruct call_value;
***************
*** 818,826 ****
      }
  }
  
- /*ARGSUSED*/
      static void
! Leave(Widget wid, XEvent *event, String *params, Cardinal *num_params)
  {
      XmEnhancedButtonWidget eb = (XmEnhancedButtonWidget)wid;
      XmPushButtonCallbackStruct call_value;
--- 820,830 ----
      }
  }
  
      static void
! Leave(Widget wid,
!       XEvent *event,
!       String *params UNUSED,
!       Cardinal *num_params UNUSED)
  {
      XmEnhancedButtonWidget eb = (XmEnhancedButtonWidget)wid;
      XmPushButtonCallbackStruct call_value;
***************
*** 976,984 ****
      }
  }
  
- /*ARGSUSED*/
      static void
! Initialize(Widget rq, Widget ebw, ArgList args, Cardinal *n)
  {
      XmEnhancedButtonWidget  request = (XmEnhancedButtonWidget)rq;
      XmEnhancedButtonWidget  eb = (XmEnhancedButtonWidget)ebw;
--- 980,987 ----
      }
  }
  
      static void
! Initialize(Widget rq, Widget ebw, ArgList args UNUSED, Cardinal *n UNUSED)
  {
      XmEnhancedButtonWidget  request = (XmEnhancedButtonWidget)rq;
      XmEnhancedButtonWidget  eb = (XmEnhancedButtonWidget)ebw;
***************
*** 1056,1064 ****
      free_pixmaps((XmEnhancedButtonWidget)w);
  }
  
- /*ARGSUSED*/
      static Boolean
! SetValues(Widget current, Widget request, Widget new, ArgList args, Cardinal *n)
  {
      XmEnhancedButtonWidget  cur = (XmEnhancedButtonWidget) current;
      XmEnhancedButtonWidget  eb = (XmEnhancedButtonWidget) new;
--- 1059,1070 ----
      free_pixmaps((XmEnhancedButtonWidget)w);
  }
  
      static Boolean
! SetValues(Widget current,
! 	  Widget request UNUSED,
! 	  Widget new,
! 	  ArgList args UNUSED,
! 	  Cardinal *n UNUSED)
  {
      XmEnhancedButtonWidget  cur = (XmEnhancedButtonWidget) current;
      XmEnhancedButtonWidget  eb = (XmEnhancedButtonWidget) new;
***************
*** 1108,1114 ****
  		if ((win_x < 0) || (win_y < 0))
  		    return False;
  
! 		if ((win_x > r_width) || (win_y > r_height))
  		    return False;
  		draw_highlight(eb);
  		draw_shadows(eb);
--- 1114,1120 ----
  		if ((win_x < 0) || (win_y < 0))
  		    return False;
  
! 		if ((win_x > (int)r_width) || (win_y > (int)r_height))
  		    return False;
  		draw_highlight(eb);
  		draw_shadows(eb);
*** ../vim-7.2.183/src/if_python.c	2009-01-13 18:10:21.000000000 +0100
--- src/if_python.c	2009-05-21 17:27:50.000000000 +0200
***************
*** 1096,1104 ****
  
  /* Vim module - Implementation
   */
- /*ARGSUSED*/
      static PyObject *
! VimCommand(PyObject *self, PyObject *args)
  {
      char *cmd;
      PyObject *result;
--- 1096,1103 ----
  
  /* Vim module - Implementation
   */
      static PyObject *
! VimCommand(PyObject *self UNUSED, PyObject *args)
  {
      char *cmd;
      PyObject *result;
***************
*** 1242,1250 ****
  }
  #endif
  
- /*ARGSUSED*/
      static PyObject *
! VimEval(PyObject *self, PyObject *args)
  {
  #ifdef FEAT_EVAL
      char	*expr;
--- 1241,1248 ----
  }
  #endif
  
      static PyObject *
! VimEval(PyObject *self UNUSED, PyObject *args)
  {
  #ifdef FEAT_EVAL
      char	*expr;
***************
*** 1894,1902 ****
  /* Buffer list object - Implementation
   */
  
- /*ARGSUSED*/
      static PyInt
! BufListLength(PyObject *self)
  {
      buf_T	*b = firstbuf;
      PyInt	n = 0;
--- 1892,1899 ----
  /* Buffer list object - Implementation
   */
  
      static PyInt
! BufListLength(PyObject *self UNUSED)
  {
      buf_T	*b = firstbuf;
      PyInt	n = 0;
***************
*** 1910,1918 ****
      return n;
  }
  
- /*ARGSUSED*/
      static PyObject *
! BufListItem(PyObject *self, PyInt n)
  {
      buf_T *b;
  
--- 1907,1914 ----
      return n;
  }
  
      static PyObject *
! BufListItem(PyObject *self UNUSED, PyInt n)
  {
      buf_T *b;
  
***************
*** 2210,2218 ****
  
  /* Window list object - Implementation
   */
- /*ARGSUSED*/
      static PyInt
! WinListLength(PyObject *self)
  {
      win_T	*w = firstwin;
      PyInt	n = 0;
--- 2206,2213 ----
  
  /* Window list object - Implementation
   */
      static PyInt
! WinListLength(PyObject *self UNUSED)
  {
      win_T	*w = firstwin;
      PyInt	n = 0;
***************
*** 2226,2234 ****
      return n;
  }
  
- /*ARGSUSED*/
      static PyObject *
! WinListItem(PyObject *self, PyInt n)
  {
      win_T *w;
  
--- 2221,2228 ----
      return n;
  }
  
      static PyObject *
! WinListItem(PyObject *self UNUSED, PyInt n)
  {
      win_T *w;
  
***************
*** 2274,2282 ****
  
  /* Current items object - Implementation
   */
- /*ARGSUSED*/
      static PyObject *
! CurrentGetattr(PyObject *self, char *name)
  {
      if (strcmp(name, "buffer") == 0)
  	return (PyObject *)BufferNew(curbuf);
--- 2268,2275 ----
  
  /* Current items object - Implementation
   */
      static PyObject *
! CurrentGetattr(PyObject *self UNUSED, char *name)
  {
      if (strcmp(name, "buffer") == 0)
  	return (PyObject *)BufferNew(curbuf);
***************
*** 2295,2303 ****
      }
  }
  
- /*ARGSUSED*/
      static int
! CurrentSetattr(PyObject *self, char *name, PyObject *value)
  {
      if (strcmp(name, "line") == 0)
      {
--- 2288,2295 ----
      }
  }
  
      static int
! CurrentSetattr(PyObject *self UNUSED, char *name, PyObject *value)
  {
      if (strcmp(name, "line") == 0)
      {
*** ../vim-7.2.183/src/window.c	2009-02-22 02:36:36.000000000 +0100
--- src/window.c	2009-05-21 15:14:54.000000000 +0200
***************
*** 1163,1174 ****
   * WSP_NEWLOC may be specified in flags to prevent the location list from
   * being copied.
   */
- /*ARGSUSED*/
      static void
  win_init(newp, oldp, flags)
      win_T	*newp;
      win_T	*oldp;
!     int		 flags;
  {
      int		i;
  
--- 1163,1173 ----
   * WSP_NEWLOC may be specified in flags to prevent the location list from
   * being copied.
   */
      static void
  win_init(newp, oldp, flags)
      win_T	*newp;
      win_T	*oldp;
!     int		 flags UNUSED;
  {
      int		i;
  
***************
*** 1268,1278 ****
   * Must be called when there is just one window, filling the whole screen
   * (excluding the command line).
   */
- /*ARGSUSED*/
      int
  make_windows(count, vertical)
      int		count;
!     int		vertical;	/* split windows vertically if TRUE */
  {
      int		maxcount;
      int		todo;
--- 1267,1276 ----
   * Must be called when there is just one window, filling the whole screen
   * (excluding the command line).
   */
      int
  make_windows(count, vertical)
      int		count;
!     int		vertical UNUSED;  /* split windows vertically if TRUE */
  {
      int		maxcount;
      int		todo;
***************
*** 2353,2363 ****
   * Remove a window and its frame from the tree of frames.
   * Returns a pointer to the window that got the freed up space.
   */
- /*ARGSUSED*/
      static win_T *
  winframe_remove(win, dirp, tp)
      win_T	*win;
!     int		*dirp;		/* set to 'v' or 'h' for direction if 'ea' */
      tabpage_T	*tp;		/* tab page "win" is in, NULL for current */
  {
      frame_T	*frp, *frp2, *frp3;
--- 2351,2360 ----
   * Remove a window and its frame from the tree of frames.
   * Returns a pointer to the window that got the freed up space.
   */
      static win_T *
  winframe_remove(win, dirp, tp)
      win_T	*win;
!     int		*dirp UNUSED;	/* set to 'v' or 'h' for direction if 'ea' */
      tabpage_T	*tp;		/* tab page "win" is in, NULL for current */
  {
      frame_T	*frp, *frp2, *frp3;
***************
*** 3500,3509 ****
   * FAIL.
   * Careful: When OK is returned need to get a new tab page very very soon!
   */
- /*ARGSUSED*/
      static int
  leave_tabpage(new_curbuf)
!     buf_T	*new_curbuf;	    /* what is going to be the new curbuf,
  				       NULL if unknown */
  {
      tabpage_T	*tp = curtab;
--- 3497,3505 ----
   * FAIL.
   * Careful: When OK is returned need to get a new tab page very very soon!
   */
      static int
  leave_tabpage(new_curbuf)
!     buf_T	*new_curbuf UNUSED;    /* what is going to be the new curbuf,
  				       NULL if unknown */
  {
      tabpage_T	*tp = curtab;
***************
*** 3545,3555 ****
   * Start using tab page "tp".
   * Only to be used after leave_tabpage() or freeing the current tab page.
   */
- /*ARGSUSED*/
      static void
  enter_tabpage(tp, old_curbuf)
      tabpage_T	*tp;
!     buf_T	*old_curbuf;
  {
      int		old_off = tp->tp_firstwin->w_winrow;
      win_T	*next_prevwin = tp->tp_prevwin;
--- 3541,3550 ----
   * Start using tab page "tp".
   * Only to be used after leave_tabpage() or freeing the current tab page.
   */
      static void
  enter_tabpage(tp, old_curbuf)
      tabpage_T	*tp;
!     buf_T	*old_curbuf UNUSED;
  {
      int		old_off = tp->tp_firstwin->w_winrow;
      win_T	*next_prevwin = tp->tp_prevwin;
***************
*** 4157,4166 ****
  /*
   * allocate a window structure and link it in the window list
   */
- /*ARGSUSED*/
      static win_T *
  win_alloc(after)
!     win_T	*after;
  {
      win_T	*newwin;
  
--- 4152,4160 ----
  /*
   * allocate a window structure and link it in the window list
   */
      static win_T *
  win_alloc(after)
!     win_T	*after UNUSED;
  {
      win_T	*newwin;
  
*** ../vim-7.2.183/src/workshop.c	2008-11-28 11:47:14.000000000 +0100
--- src/workshop.c	2009-05-21 17:12:55.000000000 +0200
***************
*** 204,215 ****
   * Function:
   *	Load a given file into the WorkShop buffer.
   */
- /*ARGSUSED*/
      void
  workshop_load_file(
  	char	*filename,		/* the file to load */
  	int	 line,			/* an optional line number (or 0) */
! 	char	*frameid)		/* used for multi-frame support */
  {
  #ifdef WSDEBUG_TRACE
      if (WSDLEVEL(WS_TRACE_VERBOSE | WS_TRACE))
--- 204,214 ----
   * Function:
   *	Load a given file into the WorkShop buffer.
   */
      void
  workshop_load_file(
  	char	*filename,		/* the file to load */
  	int	 line,			/* an optional line number (or 0) */
! 	char	*frameid UNUSED)	/* used for multi-frame support */
  {
  #ifdef WSDEBUG_TRACE
      if (WSDLEVEL(WS_TRACE_VERBOSE | WS_TRACE))
***************
*** 263,272 ****
      load_window(filename, lineno);
  }
  
- /*ARGSUSED*/
      void
  workshop_front_file(
! 	char	*filename)
  {
  #ifdef WSDEBUG_TRACE
      if (WSDLEVEL(WS_TRACE_VERBOSE | WS_TRACE))
--- 262,270 ----
      load_window(filename, lineno);
  }
  
      void
  workshop_front_file(
! 	char	*filename UNUSED)
  {
  #ifdef WSDEBUG_TRACE
      if (WSDLEVEL(WS_TRACE_VERBOSE | WS_TRACE))
***************
*** 538,546 ****
   * breakpoints have moved when a program has been recompiled and
   * reloaded into dbx.
   */
- /*ARGSUSED*/
      void
! workshop_moved_marks(char *filename)
  {
  #ifdef WSDEBUG_TRACE
      if (WSDLEVEL(WS_TRACE_VERBOSE | WS_TRACE))
--- 536,543 ----
   * breakpoints have moved when a program has been recompiled and
   * reloaded into dbx.
   */
      void
! workshop_moved_marks(char *filename UNUSED)
  {
  #ifdef WSDEBUG_TRACE
      if (WSDLEVEL(WS_TRACE_VERBOSE | WS_TRACE))
***************
*** 575,585 ****
      return (int)h;
  }
  
- /*ARGSUSED*/
      void
  workshop_footer_message(
! 	char		*message,
! 	int		 severity)	/* severity is currently unused */
  {
  #ifdef WSDEBUG_TRACE
      if (WSDLEVEL(WS_TRACE_VERBOSE | WS_TRACE))
--- 572,581 ----
      return (int)h;
  }
  
      void
  workshop_footer_message(
! 	char	*message,
! 	int	severity UNUSED)	/* severity is currently unused */
  {
  #ifdef WSDEBUG_TRACE
      if (WSDLEVEL(WS_TRACE_VERBOSE | WS_TRACE))
***************
*** 687,701 ****
   * command. The globals curMenuName and curMenuPriority contain the name and
   * priority of the parent menu tree.
   */
- /*ARGSUSED*/
      void
  workshop_menu_item(
  	char		*label,
  	char		*verb,
! 	char		*accelerator,
  	char		*acceleratorText,
! 	char		*name,
! 	char		*filepos,
  	char		*sensitive)
  {
      char		 cbuf[BUFSIZ];
--- 683,696 ----
   * command. The globals curMenuName and curMenuPriority contain the name and
   * priority of the parent menu tree.
   */
      void
  workshop_menu_item(
  	char		*label,
  	char		*verb,
! 	char		*accelerator UNUSED,
  	char		*acceleratorText,
! 	char		*name UNUSED,
! 	char		*filepos UNUSED,
  	char		*sensitive)
  {
      char		 cbuf[BUFSIZ];
***************
*** 810,822 ****
      workshopInitDone = True;
  }
  
- /*ARGSUSED*/
      void
  workshop_toolbar_button(
  	char	*label,
  	char	*verb,
! 	char	*senseVerb,
! 	char	*filepos,
  	char	*help,
  	char	*sense,
  	char	*file,
--- 805,816 ----
      workshopInitDone = True;
  }
  
      void
  workshop_toolbar_button(
  	char	*label,
  	char	*verb,
! 	char	*senseVerb UNUSED,
! 	char	*filepos UNUSED,
  	char	*help,
  	char	*sense,
  	char	*file,
***************
*** 968,974 ****
  	    if (strcmp(option, "syntax") == 0)
  		vim_snprintf(cbuf, sizeof(cbuf), "syntax %s", value);
  	    else if (strcmp(option, "savefiles") == 0)
! 		; /* XXX - Not yet implemented */
  	    break;
  
  	case 'l':
--- 962,970 ----
  	    if (strcmp(option, "syntax") == 0)
  		vim_snprintf(cbuf, sizeof(cbuf), "syntax %s", value);
  	    else if (strcmp(option, "savefiles") == 0)
! 	    {
! 		/* XXX - Not yet implemented */
! 	    }
  	    break;
  
  	case 'l':
***************
*** 1098,1107 ****
  /*
   * A button in the toolbar has been pushed.
   */
- /*ARGSUSED*/
      int
  workshop_get_positions(
! 	void		*clientData,	/* unused */
  	char	       **filename,	/* output data */
  	int		*curLine,	/* output data */
  	int		*curCol,	/* output data */
--- 1094,1102 ----
  /*
   * A button in the toolbar has been pushed.
   */
      int
  workshop_get_positions(
! 	void		*clientData UNUSED,
  	char	       **filename,	/* output data */
  	int		*curLine,	/* output data */
  	int		*curCol,	/* output data */
***************
*** 1526,1534 ****
  	return NULL;
  }
  
- /*ARGSUSED*/
      void
! workshop_save_sensitivity(char *filename)
  {
  }
  
--- 1521,1528 ----
  	return NULL;
  }
  
      void
! workshop_save_sensitivity(char *filename UNUSED)
  {
  }
  
*** ../vim-7.2.183/src/version.c	2009-05-21 15:19:59.000000000 +0200
--- src/version.c	2009-05-21 23:19:40.000000000 +0200
***************
*** 678,679 ****
--- 678,681 ----
  {   /* Add new patch number below this line */
+ /**/
+     184,
  /**/

-- 
CART DRIVER: Bring out your dead!
LARGE MAN:   Here's one!
CART DRIVER: Ninepence.
BODY:        I'm not dead!
                 "Monty Python and the Holy Grail" PYTHON (MONTY) PICTURES LTD

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\        download, build and distribute -- http://www.A-A-P.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
