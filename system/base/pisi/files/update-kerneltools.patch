Index: pisi-2.4_alpha1/pisi/actionsapi/kerneltools.py
===================================================================
--- pisi-2.4_alpha1.orig/pisi/actionsapi/kerneltools.py
+++ pisi-2.4_alpha1/pisi/actionsapi/kerneltools.py
@@ -46,13 +46,12 @@ def __getAllSupportedFlavours():
 #################
 
 def __getFlavour():
-    flavour = ""
     try:
         flavour = get.srcNAME().split("kernel-")[1]
     except IndexError:
-        pass
-
-    return flavour
+        return ""
+    else:
+        return flavour
 
 def __getModuleFlavour():
     for fl in [_f for _f in __getAllSupportedFlavours() if "-" in _f]:
@@ -67,17 +66,14 @@ def __getModuleFlavour():
     return "kernel"
 
 def __getKernelARCH():
+    """i386 is relevant for our i686 architecture."""
     return get.ARCH().replace("i686", "i386")
 
 def __getSuffix():
-    # Set suffix, e.g. "2.6.30_rc7-119"
-    suffix = "%s-%s" % (get.srcVERSION(), get.srcRELEASE())
-    if __getFlavour():
-        suffix += "-%s" % __getFlavour()
-
-    return suffix
+    """Read and return the value read from .suffix file."""
+    return open(".suffix", "r").read().strip()
 
-def __getExtraVersion():
+def __getExtraVersion(abiVersion):
     extraversion = ""
     try:
         # if successful, this is something like:
@@ -88,7 +84,8 @@ def __getExtraVersion():
         # e.g. if version == 2.6.30
         pass
 
-    extraversion += "-%s" % get.srcRELEASE()
+    # abiVersion will be passed from actions.py e.g. like the old release numbers
+    extraversion += "-%s" % abiVersion
 
     # Append pae, default, rt, etc. to the extraversion if available
     if __getFlavour():
@@ -119,20 +116,25 @@ def getKernelVersion(flavour=None):
         # Fail
         raise ConfigureError(_("Can't find kernel version information file %s.") % kverfile)
 
-
-def configure():
-    # I don't know what for but let's clean *.orig files
-    shelltools.system("find . -name \"*.orig\" | xargs rm -f")
-
+def configure(abiVersion):
     # Copy the relevant configuration file
     shutil.copy("configs/kernel-%s-config" % get.ARCH(), ".config")
 
     # Set EXTRAVERSION
-    pisitools.dosed("Makefile", "EXTRAVERSION =.*", "EXTRAVERSION = %s" % __getExtraVersion())
+    pisitools.dosed("Makefile", "EXTRAVERSION =.*", "EXTRAVERSION = %s" % __getExtraVersion(abiVersion))
+
+    # Create .suffix file which will contain __getSuffix()'s return value
+    suffix = "%s-%s" % (get.srcVERSION(), abiVersion)
+    if __getFlavour():
+        suffix += "-%s" % __getFlavour()
+    open(".suffix", "w").write(suffix)
 
-    # Configure the kernel
+    # Configure the kernel interactively if
+    # configuration contains new options
     autotools.make("ARCH=%s oldconfig" % __getKernelARCH())
 
+    # Check configuration with nonint_oldconfig
+    autotools.make("ARCH=%s nonint_oldconfig" % __getKernelARCH())
 
 def updateKConfig():
     # Call this to set newly added symbols to their defaults after sedding some KConfig
@@ -164,34 +166,44 @@ def build(debugSymbols=False):
     autotools.make("ARCH=%s %s" % (__getKernelARCH(), " ".join(extra_config)))
 
 
-def install(installFirmwares=True):
+def install():
     suffix = __getSuffix()
 
+    # Dump kernel version under /etc/kernel
+    dumpVersion()
+
     # Install kernel image
     pisitools.insinto("/boot/", "arch/x86/boot/bzImage", "kernel-%s" % suffix)
 
-    # Check if loadable module support is available or not before doing module specific tasks
-    if re.search("CONFIG_MODULES=y", open(".config", "r").read().strip()):
-
-        # Install the modules and the firmwares into /lib/{modules,firmware}
-        autotools.rawInstall("INSTALL_MOD_PATH=%s/" % get.installDIR(),
-                             "modules_install")
-
-        # Install Module.symvers and System.map
-        pisitools.insinto("/lib/modules/%s/" % suffix, "System.map")
-        pisitools.insinto("/lib/modules/%s/" % suffix, "Module.symvers")
+    # Install the modules
+    # mod-fw= avoids firmwares from installing
+    # Override DEPMOD= to not call depmod as it will be called
+    # during module-init-tools' package handler
+    autotools.rawInstall("INSTALL_MOD_PATH=%s/" % get.installDIR(),
+                         "DEPMOD=/bin/true modules_install mod-fw=")
+
+    # Remove symlinks first
+    pisitools.remove("/lib/modules/%s/source" % suffix)
+    pisitools.remove("/lib/modules/%s/build" % suffix)
+
+    # Install Module.symvers and System.map here too
+    shutil.copy("Module.symvers", "%s/lib/modules/%s/" % (get.installDIR(), suffix))
+    shutil.copy("System.map", "%s/lib/modules/%s/" % (get.installDIR(), suffix))
+
+    # Create extra/ and updates/ subdirectories
+    for _dir in ("extra", "updates"):
+        pisitools.dodir("/lib/modules/%s/%s" % (suffix, _dir))
 
-        # Remove wrong symlinks
-        pisitools.remove("/lib/modules/%s/source" % suffix)
-        pisitools.remove("/lib/modules/%s/build" % suffix)
 
-        if not installFirmwares:
-            # For use with PAE e.g.
-            shelltools.system("rm -rf %s/lib/firmware" % get.installDIR())
+def installHeaders(extraHeaders=None):
+    """ Install the files needed to build out-of-tree kernel modules. """
 
+    extras = ["drivers/media/dvb/dvb-core",
+              "drivers/media/dvb/frontends",
+              "drivers/media/video"]
 
-def installHeaders(extra=[]):
-    """ Install the files needed to build out-of-tree kernel modules. """
+    if extraHeaders:
+        extras.extend(extraHeaders)
 
     pruned = ["include", "scripts"]
     wanted = ["Makefile*", "Kconfig*", "Kbuild*", "*.sh", "*.pl", "*.lds"]
@@ -212,32 +224,38 @@ def installHeaders(extra=[]):
 
     shelltools.system(find_cmd)
 
-    # Install additional headers passed by actions.py
-    for d in extra:
-        shelltools.system("cp -a %s/*.h %s/%s" % (d, destination, d))
+    # Install additional headers
+    for headers in extras:
+        shelltools.system("cp -a %s/*.h %s/%s" % (headers, destination, headers))
 
     # Install remaining headers
     shelltools.system("cp -a scripts include %s" % destination)
 
+    # Cleanup scripts directory
+    shelltools.system("rm -rf %s/scripts/*.o" % destination)
+    shelltools.system("rm -rf %s/scripts/*/*.o" % destination)
+
     # Finally copy the include directories found in arch/
     shelltools.system("(find arch -name include -type d -print | \
                         xargs -n1 -i: find : -type f) | \
                         cpio -pd --preserve-modification-time %s" % destination)
 
-    # Copy Modules.symvers
+    # Copy Modules.symvers and System.map
     shutil.copy("Module.symvers", "%s/" % destination)
+    shutil.copy("System.map", "%s/" % destination)
 
     # Copy .config file which will be needed by some external modules
     shutil.copy(".config", "%s/" % destination)
 
     # Unset CONFIG_DEBUG_INFO if it's set in the kernel configuration
-    pisitools.dosed(".config", ".*CONFIG_DEBUG_INFO=.*", "# CONFIG_DEBUG_INFO is not set")
+    # pisitools.dosed(".config", ".*CONFIG_DEBUG_INFO=.*", "# CONFIG_DEBUG_INFO is not set")
 
     # Settle the correct build symlink to this headers
     pisitools.dosym("/%s" % headersDirectoryName, "/lib/modules/%s/build" % suffix)
+    pisitools.dosym("build", "/lib/modules/%s/source" % suffix)
 
 
-def installLibcHeaders(excludes=[]):
+def installLibcHeaders(excludes=None):
     headers_tmp = os.path.join(get.installDIR(), 'tmp-headers')
     headers_dir = os.path.join(get.installDIR(), 'usr/include')
 
@@ -271,30 +289,3 @@ def installLibcHeaders(excludes=[]):
 
     # Remove tmp directory
     shelltools.system("rm -rf %s" % headers_tmp)
-
-
-def installSource(onlySymlink=False):
-    destination = "usr/src/linux-source-%s" %  __getSuffix()
-
-    # Create the symlink
-    pisitools.dosym("/%s" % destination, "/lib/modules/%s/source" % __getSuffix())
-
-    if not onlySymlink:
-        # Copy the whole source directory
-        pisitools.dodir("/usr/src")
-        shelltools.copytree("../%s/" % os.path.basename(get.curDIR()), os.path.join(get.installDIR(), destination))
-
-        # Cleanup the installed source
-        shelltools.cd(os.path.join(get.installDIR(), destination))
-        autotools.make("clean")
-        autotools.make("modules_prepare")
-        shelltools.system("find . -path './.*' | xargs rm -rf")
-
-
-def cleanModuleFiles():
-    """ Cleans module.* files generated by depmod """
-    # Remove modules.* files, they will be autogenerated during pakhandler.
-    # Don't remove modules.order generated by kbuild for ordering the modules
-    # according to the link order.
-    shelltools.system("find %s/lib/modules/%s -name 'modules.*' \
-                       -not -name 'modules.order' -exec rm -f '{}' \;" % (get.installDIR(), __getSuffix()))
