#!/bin/sh
#
# Simple init script that should handle both
# livecd/livedisk, thinclient and hdd boot
#

PATH=/usr/sbin:/usr/bin:/sbin:/bin
INITRAMFSCONF="/etc/initramfs.conf"

ROOT_LINKS="bin sbin lib boot usr opt"
ROOT_TREES="etc root home var"
TMPFS_DIRS="dev mnt mnt/cdrom mnt/livecd mnt/thin tmp sys proc media"
LOOPBACKFILE="pardus.img"

NORESUME=0
LIVE=0
NFSROOT=0
QUIET=0
RAID=0
LVM=0
VIRTIO=0
COPYTORAM=0

HOTPLUG="/sbin/hotplug"

MNTDIR=""
FS_TYPE=""
INITRAMFS=""
ROOT_FLAGS=""
ROOT_DEVICE=""
ROOT_TARGET=""
RESUME_DEVICE=""

HAS_MASS_STORAGE=0

###########################
# Miscellaneous functions #
###########################

info() {
    echo "<6>initramfs: $1" > /dev/kmsg
}

fall2sh() {
    echo "--> $*"

    # Use a login shell for sourcing /etc/profile
    /bin/sh -l
}

run_dhcpc() {
    udhcpc -C -i eth0 -s /etc/udhcpc.script
}

resume_from_hibernate() {
    if [ -f "/sys/power/resume" ]
    then
        if [ -f "/bin/resume" ]
        then
            info "Resuming from hibernation"
            # char device needed by static resume binary
            /bin/mknod /dev/snapshot c 10 231
            /bin/resume
        fi
    fi
}

##################
# Device probers #
##################

probe_devices() {
    # Set hotplug helper for firmware loading
    echo $HOTPLUG > /proc/sys/kernel/hotplug

    [ "x$1" = "x--with-kms" ] && probe_kms

    test -x /bin/plymouth && /bin/plymouth --show-splash

    probe_pci_devices
    probe_usb_devices

    if [ x"$HAS_MASS_STORAGE" == "x1" ]; then
        # FIXME: Should we wait here?
        info "Found USB storage devices"
    fi

    # Unset hotplug helper
    echo > /proc/sys/kernel/hotplug
}

probe_kms() {
    for device in /sys/bus/pci/devices/*/boot_vga; do
        [ -f $device ] || continue
        info "Loading KMS driver"
        grep -q 1 $device && modprobe -bq `cat ${device%boot_vga}modalias`
    done
}

probe_pci_devices() {
    info "Probing PCI devices"
    local MODULES=""
    for module in /sys/bus/pci/devices/*/modalias; do
        [ -f $module ] || continue
        MODULES="$MODULES $(cat $module)"
    done
    modprobe -bqa $MODULES
}

probe_usb_devices() {
    info "Probing USB devices"
    local MODULES=""
    for module in /sys/bus/usb/devices/*/modalias; do
        [ -f $module ] || continue
        MODULES="$MODULES $(cat $module)"
        grep -qw 08 ${module%modalias}bInterfaceClass && HAS_MASS_STORAGE=1
    done
    modprobe -bqa $MODULES
}

probe_raid() {
    info "Probing RAID devices"
    modprobe -bqa dm-mod raid0 raid1 raid10 raid456
    if [ -x /sbin/mdadm ]
    then
        /sbin/mdadm --examine --scan > /etc/mdadm.conf
        /sbin/mdadm -As
    fi
}

probe_lvm() {
    info "Probing LVM devices"
    modprobe -qa dm-mod
    if [ -x /sbin/lvm ]
    then
        /sbin/lvm vgscan --ignorelockingfailure
        /sbin/lvm vgchange -ay --ignorelockingfailure
    fi
}
probe_virtio() {
    info "Probing Virtio devices"
    modprobe -bqa virtio_pci virtio_balloon virtio_blk virtio_net
}

#################################
# Filesystem specific functions #
#################################

mount_rootfs() {
    FS_TYPE=`disktype $ROOT_DEVICE | grep KERNELMODULE | awk '{print $2}'`
    info "Mounting rootfs: $ROOT_DEVICE ($FS_TYPE)"
    mount -r -t $FS_TYPE -n ${ROOT_FLAGS} ${ROOT_DEVICE} /newroot
}

find_live_mount() {
    if [ "$#" -gt "0" ]
    then
        for x in $*
        do
            # this is used for non Linux fs detection
            FS_TYPE=`disktype $1 | grep KERNELMODULE | awk '{print $2}'`
            if [ -n "$FS_TYPE" -a -f /lib/modules/*/$FS_TYPE.ko ]
            then
                modprobe $FS_TYPE 1> /dev/null 2>&1
            fi

            mount -r ${x} /newroot/mnt/cdrom > /dev/null 2>&1

            if [ "$?" = "0" ]
            then
                # Check for cdroot image
                if [ -e /newroot/mnt/cdrom/${LOOPBACKFILE} ]
                then
                    ROOT_DEVICE="/newroot${x}"
                    if [ "$COPYTORAM" == "1" ]
                    then
                        info "Copying Live Media files to RAM"
                        mkdir /newroot/mnt/cdromtemp
                        cp -af /newroot/mnt/cdrom/* /newroot/mnt/cdromtemp/
                        umount /newroot/mnt/cdrom
                        rmdir /newroot/mnt/cdrom
                        mv /newroot/mnt/cdromtemp /newroot/mnt/cdrom
                    fi
                    break
                else
                    umount /newroot/mnt/cdrom
                fi
            fi
        done
    fi
}

manage_tmpfs() {
    mount -t tmpfs tmpfs /newroot

    for d in ${TMPFS_DIRS}; do
        mkdir -p "/newroot/${d}"
    done
}

mount_nfs() {
    FS_LOCATION='mnt/thin'

    # Change directory to /newroot
    cd /newroot

    # FIXME: busybox mount does not load automatically
    modprobe -q nfs

    # mount nfs
    if [ -z "/etc/udhcpc.info" ]
    then
        fall2sh "/etc/udhcpc.info not found"
    fi

    . /etc/udhcpc.info

    if [ -z "${ROOTPATH}" ]
    then
        fall2sh "NFS rootpath not found"
    fi

    echo "Mounting NFS from $ROOTPATH"
    mount -o tcp,nolock,ro $ROOTPATH /newroot/mnt/thin

    if [ "$?" != '0' ]
    then
        fall2sh "Could not nfs root"
    fi

    # Create necessary links
    for x in ${ROOT_LINKS}; do
        ln -s "${FS_LOCATION}/${x}" "${x}"
    done

    # We need this for x86_64
    ln -s "${FS_LOCATION}/lib" "lib64"

    chmod 1777 tmp
    (cd /newroot/${FS_LOCATION}; cp -a ${ROOT_TREES} /newroot)

    # Needed for ltspfs mechanism
    echo "$IP    $HOSTNAME" >> /newroot/etc/hosts
}

mount_cdroot() {
    FS_LOCATION="mnt/livecd"

    # Change directory to /newroot
    cd /newroot

    # These are not loaded automatically
    modprobe -q squashfs

    # Loop type squashfs
    mount -t squashfs -o loop,ro /newroot/mnt/cdrom/${LOOPBACKFILE} /newroot/mnt/livecd

    if [ "$?" != "0" ]
    then
        fall2sh "Could not mount root image"
    fi

    # Create necessary links
    for x in ${ROOT_LINKS}; do
        ln -s "${FS_LOCATION}/${x}" "${x}"
    done

    # We need this for x86_64
    ln -s "${FS_LOCATION}/lib" "lib64"

    chmod 1777 tmp
    (cd /newroot/${FS_LOCATION}; cp -a ${ROOT_TREES} /newroot)

    # FIXME: the device list is taken from udev, we can't rely on sys entries since pluggable means different
    #        in kernel world. Suggestions that do not include this kind of regexp mania are welcome

    # for userspace applications
    REAL_ROOT_TYPE=`echo "${ROOT_DEVICE}" | sed -e 's/^\/newroot\/dev\///' | grep -qE '^sr[0-9]*|^hd[a-z]|^pcd[0-9]|^xvd*' && echo "optical" || echo "harddisk"`
    echo "${REAL_ROOT_TYPE}" > /newroot/var/run/pardus/livemedia

    # this is needed for yali
    MNTDIR=`grep \/mnt\/cdrom\  /proc/mounts|sed 's/\/newroot//g'`
    echo "$MNTDIR" >> /newroot/etc/fstab
}

##############################
# Config and cmdline parsers #
##############################

# FIXME: maybe we should just source the file instead of parsing
#        also consider merging conf parser and cmdline parser
parse_config() {
    while read inputline;
    do
        case "${inputline}" in
            raid=*)
                RAID=$(echo $inputline|cut -f2- -d=)
            ;;
            lvm=*)
                LVM=$(echo $inputline|cut -f2- -d=)
            ;;
            thin=*)
                NFSROOT=$(echo $inputline|cut -f2- -d=)
            ;;
            virtio=*)
                VIRTIO=$(echo $inputline|cut -f2- -d=)
            ;;
            root=*)
                ROOT_TARGET=$(echo $inputline|cut -f2- -d=)
            ;;
            rootflags=*)
                ROOT_FLAGS=$(echo $inputline|cut -f2- -d=)
            ;;
            liveroot=*)
                LIVE=1
                LIVEROOT=$(echo $inputline|cut -f2- -d=)
            ;;
            resume=*)
                RESUME_DEVICE="${inputline#resume=}"
            ;;
            noresume=*)
                NORESUME=$(echo $inputline|cut -f2- -d=)
            ;;
            copytoram)
                COPYTORAM=1
            ;;
            init=*)
                INIT="${inputline#INIT=}"
            ;;
        esac
    done < $INITRAMFSCONF
}

parse_cmdline() {
    for x in `cat /proc/cmdline`; do
        case "${x}" in
            [0123456Ss])
                LEVEL=${x}
            ;;
            mudur=*)
                for m in `echo ${x}|cut -f2 -d=|sed 's/,/ /g'`; do
                    case "${m}" in
                        livecd)
                            LIVE=1
                        ;;
                        livedisk)
                            LIVE=1
                        ;;
                        raid)
                            RAID=1
                        ;;
                        lvm)
                            LVM=1
                        ;;
                        thin)
                            NFSROOT=1
                        ;;
                        virtio)
                            VIRTIO=1
                        ;;
                    esac
                done
            ;;
            initramfs=*)
                INITRAMFS=`echo ${x}|cut -f2- -d=`
            ;;
            root=*)
                ROOT_TARGET=`echo ${x}|cut -f2- -d=`
            ;;
            rootflags=*)
                ROOT_FLAGS="-o ${x#rootflags=}"
            ;;
            liveroot=*)
                LIVE=1
                LIVEROOT=$(echo ${x}|cut -f2- -d=)
            ;;
            resume=*)
                RESUME_DEVICE="${x#resume=}"
            ;;
            noresume)
                NORESUME=1
            ;;
            init=*)
                INIT="${x#init=}"
            ;;
            copytoram)
                COPYTORAM=1
            ;;
            quiet)
                QUIET=1
            ;;
            blacklist=*)
                modules=${x#blacklist=}
                for module in ${modules//,/ }; do
                    echo "blacklist $module" >> /etc/modprobe.d/cmdline.conf
                done
            ;;
        esac
    done

    if [ -f /etc/modprobe.d/cmdline.conf ]; then
        cp /etc/modprobe.d/cmdline.conf /dev/.modprobe.initramfs.conf
    fi
}


####################
# init starts here #
####################

info "Starting init on initramfs"

# Mount needed filesystems
mount -n -t proc proc /proc
mount -n -t sysfs sysfs /sys

# Prepare /dev (Needs kernel >= 2.6.32)
mount -t devtmpfs devtmpfs /dev
mkdir -m 0755 /dev/pts
mount -t devpts -o gid=5,mode=620 devpts /dev/pts

# Initialize plymouth daemon if found
test -x /sbin/plymouthd && /sbin/plymouthd --attach-to-session

# First parse config file, then cmdline to allow overwriting internal config
if [ -f "$INITRAMFSCONF" ]
then
    #. $INITRAMFSCONF
    parse_config
fi

# Parse command line parameters
parse_cmdline

# Handle initramfs= parameter
if [ "${INITRAMFS}" == "shellnoprobe" ]
then
    fall2sh "Starting up a shell without probing"
elif [ "${INITRAMFS}" == "shell" ]
then
    probe_devices --with-kms
    fall2sh "Starting up a shell"
fi

# Minimizing kernel noise
if [ "$QUIET" -eq "1" ]
then
    echo "1" > /proc/sys/kernel/printk
fi

# Probe devices
probe_devices --with-kms

[ "${VIRTIO}" -eq "1" ] && probe_virtio
[ "${RAID}" -eq "1" ] && probe_raid
[ "${LVM}" -eq "1" ] && probe_lvm

if [ "${RESUME_DEVICE}" != "" ]
then
    # Write resume device to /sys/power/resume for SATA disks
    /bin/stat -c%t:%T $RESUME_DEVICE > /sys/power/resume

    # If we suspend2disk resume it from here
    resume_from_hibernate
fi

echo 0x0100 > /proc/sys/kernel/real-root-dev

if [ "${LIVE}" -eq "1" ]
then
    ROOT_DEVICE=""
    manage_tmpfs

    # modprobe filesystems that are not in kernel, for live disks
    modprobe -qa nls_cp857 nls_utf8 vfat

    for i in `seq 50`
    do
        t=`findfs ${LIVEROOT} 2>/dev/null`
        find_live_mount "$t"

        if [ "${ROOT_DEVICE}" != "" ]
        then
            break
        else
            probe_devices
            usleep 200000
        fi
    done

    if [ "${ROOT_DEVICE}" == "" ]
    then
        fall2sh "Could not find mount media"
    fi

    mount_cdroot

elif [ "${NFSROOT}" -eq "1" ]
then
    run_dhcpc
    manage_tmpfs
    mount_nfs

    # set hostname for mudur
    hostname $HOSTNAME

else
    # Wait until ROOT_DEVICE appears
    for i in `seq 50`
    do
        # let findfs handle all conversion
        ROOT_DEVICE=`findfs ${ROOT_TARGET} 2>/dev/null`

        if [ ! -b "${ROOT_DEVICE}" ]
        then
            probe_devices
            usleep 200000
        else
            break
        fi
    done
    if [ ! -b "${ROOT_DEVICE}" ]
    then
        fall2sh "Could not find boot device"
    else
        mount_rootfs
    fi
fi

[ "${INIT}" == "" ] && INIT="/sbin/init";

# FIXME: Test these on livemedia bootings
# Move mounts instead of umount/mount
mount --move /dev /newroot/dev
mount --move /proc /newroot/proc
mount --move /sys /newroot/sys

# And we start
info "Switching to the real root"
test -x /bin/plymouth && /bin/plymouth --newroot=/newroot
exec /bin/switch_root -c /dev/console /newroot ${INIT} ${LEVEL}
