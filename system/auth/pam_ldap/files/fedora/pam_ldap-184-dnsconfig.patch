Index: pam_ldap-185/Makefile.am
===================================================================
--- pam_ldap-185.orig/Makefile.am
+++ pam_ldap-185/Makefile.am
@@ -2,7 +2,7 @@ noinst_PROGRAMS = pam_ldap.so
 EXTRA_DIST = COPYING.LIB CVSVersionInfo.txt ChangeLog README \
 	     ldap.conf pam.conf pam_ldap.spec pam.d
 
-pam_ldap_so_SOURCES = pam_ldap.c pam_ldap.h md5.c md5.h vers.c
+pam_ldap_so_SOURCES = pam_ldap.c pam_ldap.h md5.c md5.h vers.c resolve.c resolve.h dnsconfig.c dnsconfig.h snprintf.c snprintf.h
 pam_ldap_so_LDFLAGS = @pam_ldap_so_LDFLAGS@
 
 man_MANS = pam_ldap.5
Index: pam_ldap-185/configure.in
===================================================================
--- pam_ldap-185.orig/configure.in
+++ pam_ldap-185/configure.in
@@ -133,6 +133,38 @@ fi
 AC_CHECK_FUNCS(ldap_initialize)
 AC_CHECK_FUNCS(ldap_sasl_bind ldap_sasl_interactive_bind_s)
 AC_CHECK_FUNCS(gethostbyname_r)
+AC_CHECK_FUNCS(snprintf strtok_r)
+AC_CHECK_LIB(resolv, main)
+AC_CHECK_HEADERS(resolv.h)
+AC_CHECK_FUNCS(res_search dn_expand)
+if test x$ac_cv_func_res_search = xno ; then
+	AC_MSG_CHECKING([for res_search again])
+	AC_TRY_LINK([#ifdef HAVE_RESOLV_H
+		     #include <resolv.h>
+		     #endif
+		     #ifdef HAVE_STDLIB_H
+		     #include <stdlib.h>
+		     #endif],
+		    [res_search(NULL,0,0,NULL,0);],
+		    AC_DEFINE(HAVE_RES_SEARCH,1,
+		    	      [Define if you have res_search().])
+		    ac_cv_func_res_search=yes)
+	AC_CHECK_FUNCS(res_search)
+fi
+if test x$ac_cv_func_dn_expand = xno ; then
+	AC_MSG_CHECKING([for dn_expand again])
+	AC_TRY_LINK([#ifdef HAVE_RESOLV_H
+		     #include <resolv.h>
+		     #endif
+		     #ifdef HAVE_STDLIB_H
+		     #include <stdlib.h>
+		     #endif],
+		    [dn_expand(NULL,NULL,NULL,NULL,0);],
+		    AC_DEFINE(HAVE_DN_EXPAND,1,
+		    	      [Define if you have dn_expand().])
+		    ac_cv_func_dn_expand=yes)
+	AC_CHECK_FUNCS(dn_expand)
+fi
 
 if test "$ac_cv_func_gethostbyname_r" = "yes"; then
 AC_CACHE_CHECK(whether gethostbyname_r takes 6 arguments, xad_cv_gethostbyname_r_args, [
Index: pam_ldap-185/dnsconfig.c
===================================================================
--- /dev/null
+++ pam_ldap-185/dnsconfig.c
@@ -0,0 +1,214 @@
+
+/* Copyright (C) 1997-2001 Luke Howard.
+   This file started off as part of the nss_ldap library.
+   Contributed by Luke Howard, <lukeh@padl.com>, 1997.
+   (The author maintains a non-exclusive licence to distribute this file
+   under their own conditions.)
+
+   The nss_ldap library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Library General Public License as
+   published by the Free Software Foundation; either version 2 of the
+   License, or (at your option) any later version.
+
+   The nss_ldap library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+
+   You should have received a copy of the GNU Library General Public
+   License along with the nss_ldap library; see the file COPYING.LIB.  If not,
+   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.
+ */
+
+/*
+ * Support DNS SRV records. I look up the SRV record for
+ * _ldap._tcp.gnu.org.
+ * and build the DN DC=gnu,DC=org.
+ * Thanks to Assar & co for resolve.[ch].
+ */
+
+static char rcsId[] = "$Id: dnsconfig.c,v 2.24 2001/02/27 14:44:31 lukeh Exp $";
+
+#include "config.h"
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <sys/param.h>
+#include <netdb.h>
+#include <syslog.h>
+#include <netinet/in.h>
+#include <arpa/nameser.h>
+#include <resolv.h>
+#include <string.h>
+
+#ifdef HAVE_LBER_H
+#include <lber.h>
+#endif
+#ifdef HAVE_LDAP_H
+#include <ldap.h>
+#endif
+
+#ifndef HAVE_SNPRINTF
+#include "snprintf.h"
+#endif
+
+#include "pam_ldap.h"
+#include "resolve.h"
+#include "dnsconfig.h"
+
+#define DC_ATTR "DC"
+#define DC_ATTR_AVA DC_ATTR "="
+#define DC_ATTR_AVA_LEN (sizeof(DC_ATTR_AVA) - 1)
+
+/* map gnu.org into DC=gnu,DC=org */
+int
+_pam_ldap_getdnsdn (char *src_domain, char **rval)
+{
+  char *p;
+  int len = 0;
+#ifdef HAVE_STRTOK_R
+  char *st = NULL;
+#endif
+  char *domain;
+  char domain_copy[BUFSIZ], buffer[BUFSIZ];
+
+  /* we need to take a copy of domain, because strtok() modifies
+   * it in place. Bad.
+   */
+  if (strlen (src_domain) >= sizeof (domain_copy))
+    {
+      return PAM_SYSTEM_ERR;
+    }
+  memset (domain_copy, '\0', sizeof (domain_copy));
+  memset (buffer, '\0', sizeof (buffer));
+  strcpy (domain_copy, src_domain);
+
+  domain = domain_copy;
+
+#ifndef HAVE_STRTOK_R
+  while ((p = strtok (domain, ".")))
+#else
+  while ((p = strtok_r (domain, ".", &st)))
+#endif
+    {
+      len = strlen (p);
+
+      if (strlen (buffer) + DC_ATTR_AVA_LEN + len + 1 >= sizeof (buffer))
+	{
+	  return PAM_SYSTEM_ERR;
+	}
+
+      if (domain == NULL)
+	{
+	  strcat (buffer, ",");
+	}
+      else
+	{
+	  domain = NULL;
+	}
+
+      strcat (buffer, DC_ATTR_AVA);
+      strcat (buffer, p);
+    }
+
+  if (rval != NULL)
+    {
+      *rval = strdup (buffer);
+    }
+
+  return PAM_SUCCESS;
+}
+
+
+int
+_pam_ldap_readconfigfromdns (pam_ldap_config_t * result)
+{
+  int stat = PAM_SUCCESS;
+  struct dns_reply *r;
+  struct resource_record *rr;
+  char domain[MAXHOSTNAMELEN + 1];
+
+  /* only reinitialize variables we'll change here */
+  result->host = NULL;
+  result->base = NULL;
+  result->port = LDAP_PORT;
+#ifdef LDAP_VERSION3
+  result->version = LDAP_VERSION3;
+#else
+  result->version = LDAP_VERSION2;
+#endif /* LDAP_VERSION3 */
+
+  if ((_res.options & RES_INIT) == 0 && res_init () == -1)
+    {
+      return PAM_SYSTEM_ERR;
+    }
+
+  snprintf (domain, sizeof (domain), "_ldap._tcp.%s.", _res.defdname);
+
+  r = dns_lookup (domain, "srv");
+  if (r == NULL)
+    {
+      return PAM_SYSTEM_ERR;
+    }
+
+  /* XXX need to sort by priority and reorder using weights */
+  for (rr = r->head; rr != NULL; rr = rr->next)
+    {
+      if (rr->type == T_SRV)
+	{
+	  if (result->host != NULL)
+	    {
+	      /* need more space */
+	      int length;
+	      char *tmp;
+	      length = strlen (result->host) + 1 +
+	               strlen (rr->u.srv->target) + 1 + 5 + 1;
+	      tmp = malloc (length);
+	      if (tmp == NULL)
+	        {
+	          dns_free_data (r);
+		  return PAM_BUF_ERR;
+	        }
+	      sprintf (tmp, "%s %s:%d", result->host, rr->u.srv->target,
+	               rr->u.srv->port);
+	      free (result->host);
+	      result->host = tmp;
+	    }
+	  else
+	    {
+	      /* Server Host */
+	      result->host = strdup (rr->u.srv->target);
+	      if (result->host == NULL)
+	        {
+	          dns_free_data (r);
+		  return PAM_BUF_ERR;
+	        }
+	      /* Port */
+	      result->port = rr->u.srv->port;
+	    }
+
+#ifdef LDAPS_PORT
+	  /* Hack: if the port is the registered SSL port, enable SSL. */
+	  if (result->port == LDAPS_PORT)
+	    {
+	      result->ssl_on = SSL_LDAPS;
+	    }
+#endif /* SSL */
+
+	  /* DN */
+	  stat = _pam_ldap_getdnsdn (_res.defdname, &result->base);
+	  if (stat != PAM_SUCCESS)
+	    {
+	      dns_free_data (r);
+	      return stat;
+	    }
+	}
+    }
+
+  dns_free_data (r);
+  stat = PAM_SUCCESS;
+
+  return stat;
+}
Index: pam_ldap-185/dnsconfig.h
===================================================================
--- /dev/null
+++ pam_ldap-185/dnsconfig.h
@@ -0,0 +1,35 @@
+/* Copyright (C) 1997-2001 Luke Howard.
+   This file started off as part of the nss_ldap library.
+   Contributed by Luke Howard, <lukeh@padl.com>, 1997.
+   (The author maintains a non-exclusive licence to distribute this file
+   under their own conditions.)
+
+   The nss_ldap library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Library General Public License as
+   published by the Free Software Foundation; either version 2 of the
+   License, or (at your option) any later version.
+
+   The nss_ldap library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+
+   You should have received a copy of the GNU Library General Public
+   License along with the nss_ldap library; see the file COPYING.LIB.  If not,
+   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _LDAP_PAM_LDAP_DNSCONFIG_H
+#define _LDAP_PAM_LDAP_DNSCONFIG_H
+
+/* utility routines.  */
+
+int _pam_ldap_getdnsdn (
+			char *domain,
+			char **rval);
+
+int _pam_ldap_readconfigfromdns (
+				 pam_ldap_config_t *result);
+
+#endif /* _LDAP_PAM_LDAP_DNSCONFIG_H */
Index: pam_ldap-185/pam_ldap.c
===================================================================
--- pam_ldap-185.orig/pam_ldap.c
+++ pam_ldap-185/pam_ldap.c
@@ -130,6 +130,7 @@
 
 #include "pam_ldap.h"
 #include "md5.h"
+#include "dnsconfig.h"
 
 #if defined(HAVE_SECURITY_PAM_MISC_H) || defined(HAVE_PAM_PAM_MISC_H)
  /* FIXME: is there something better to check? */
@@ -1109,11 +1110,15 @@ _read_config (const char *configFile, pa
     {
       /* 
        * According to PAM Documentation, such an error in a config file
-       * SHOULD be logged at LOG_ALERT level
+       * SHOULD be logged at LOG_ALERT level, but we suppress it if DNS
+       * can provide us with the needed information
        */
-      syslog (LOG_ALERT, "pam_ldap: missing \"host\" in file \"%s\"",
-	      configFile);
-      return PAM_SERVICE_ERR;
+      if (_pam_ldap_readconfigfromdns (result) != PAM_SUCCESS)
+        {
+          syslog (LOG_ALERT, "pam_ldap: missing \"host\" in file \"%s\"",
+	          configFile);
+          return PAM_SERVICE_ERR;
+        }
     }
 
 #if !(defined(HAVE_SASL_SASL_H) || defined(HAVE_SASL_H)) && !defined(HAVE_LDAP_SASL_INTERACTIVE_BIND_S)
--- /dev/null	2010-03-23 15:19:09.100374019 +0200
+++ nss_ldap-265/resolve.c	2009-11-06 12:28:08.000000000 +0200
@@ -0,0 +1,372 @@
+/*
+ * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Hvgskolan
+ * (Royal Institute of Technology, Stockholm, Sweden).
+ * All rights reserved.
+ * 
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 
+ * 3. All advertising materials mentioning features or use of this software
+ *    must display the following acknowledgement:
+ *      This product includes software developed by the Kungliga Tekniska
+ *      Hvgskolan and its contributors.
+ * 
+ * 4. Neither the name of the Institute nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <netinet/in.h>
+#include <arpa/nameser.h>
+#ifdef HAVE_ARPA_NAMESER_COMPAT_H
+#include <arpa/nameser_compat.h>
+#endif
+#include <string.h>
+#ifdef HAVE_STRINGS_H
+#include <strings.h>
+#endif
+
+#include <resolv.h>
+
+#include "resolve.h"
+
+static char rcsId[] = "$Id: resolve.c,v 2.11 2009/05/26 07:25:12 lukeh Exp $";
+
+#if defined(HAVE_RES_SEARCH) && defined(HAVE_DN_EXPAND)
+
+#define DECL(X) {#X, T_##X}
+
+static struct stot
+{
+  char *name;
+  int type;
+}
+stot[] =
+{
+  DECL (A),
+    DECL (NS),
+    DECL (CNAME), DECL (PTR), DECL (MX), DECL (TXT), DECL (AFSDB), DECL (SRV),
+  {
+  NULL, 0}
+};
+
+static int
+string_to_type (const char *name)
+{
+  struct stot *p = stot;
+  for (p = stot; p->name; p++)
+    if (strcasecmp (name, p->name) == 0)
+      return p->type;
+  return -1;
+}
+
+#if 0
+static char *
+type_to_string (int type)
+{
+  struct stot *p = stot;
+  for (p = stot; p->name; p++)
+    if (type == p->type)
+      return p->name;
+  return NULL;
+}
+#endif
+
+void
+dns_free_data (struct dns_reply *r)
+{
+  struct resource_record *rr;
+  if (r->q.domain)
+    free (r->q.domain);
+  for (rr = r->head; rr;)
+    {
+      struct resource_record *tmp = rr;
+      if (rr->domain)
+	free (rr->domain);
+      if (rr->u.data)
+	free (rr->u.data);
+      rr = rr->next;
+      free (tmp);
+    }
+  free (r);
+}
+
+static struct dns_reply *
+parse_reply (unsigned char *data, int len)
+{
+  unsigned char *p;
+  char host[128];
+  int status;
+  int query, response;
+
+  struct dns_reply *r;
+  struct resource_record **rr;
+
+  r = (struct dns_reply *) malloc (sizeof (struct dns_reply));
+  memset (r, 0, sizeof (struct dns_reply));
+  r->q.domain = NULL;
+
+  p = data;
+  memcpy (&r->h, p, sizeof (HEADER));
+  p += sizeof (HEADER);
+  for (query = 0; query < ntohs(r->h.qdcount); query++)
+    {
+      status = dn_expand (data, data + len, p, host, sizeof (host));
+      if (status < 0)
+        {
+          dns_free_data (r);
+          return NULL;
+        }
+      p += status;
+      if (p + 4 > data + len)
+        {
+          dns_free_data (r);
+          return NULL;
+        }
+      if (r->q.domain == NULL)
+        {
+          r->q.domain = strdup (host);
+          r->q.type = (p[0] << 8 | p[1]);
+          r->q.class = (p[2] << 8 | p[3]);
+        }
+      p += 4;
+    }
+  rr = &r->head;
+  for (response = 0; (response < ntohs(r->h.ancount)) && (p < data + len); response++)
+    {
+      unsigned int type, class, ttl, size;
+      status = dn_expand (data, data + len, p, host, sizeof (host));
+      if (status < 0)
+	{
+	  dns_free_data (r);
+	  return NULL;
+	}
+      p += status;
+      if (p + 10 > data + len)
+        {
+          dns_free_data (r);
+          return NULL;
+        }
+      type = (p[0] << 8) | p[1];
+      p += 2;
+      class = (p[0] << 8) | p[1];
+      p += 2;
+      ttl = (p[0] << 24) | (p[1] << 16) | (p[2] << 8) | p[3];
+      p += 4;
+      size = (p[0] << 8) | p[1];
+      p += 2;
+      if (p + size > data + len)
+        {
+          dns_free_data (r);
+          return NULL;
+        }
+      *rr = (struct resource_record *) calloc (1,
+					       sizeof (struct
+						       resource_record));
+      (*rr)->domain = strdup (host);
+      (*rr)->type = type;
+      (*rr)->class = class;
+      (*rr)->ttl = ttl;
+      (*rr)->size = size;
+      switch (type)
+	{
+	case T_NS:
+	case T_CNAME:
+	case T_PTR:
+	  status = dn_expand (data, data + len, p, host, sizeof (host));
+	  if (status < 0)
+	    {
+	      dns_free_data (r);
+	      return NULL;
+	    }
+	  (*rr)->u.txt = strdup (host);
+	  break;
+	case T_MX:
+	case T_AFSDB:
+	  {
+            if (p + 2 > data + len)
+              {
+                dns_free_data (r);
+                return NULL;
+              }
+	    status = dn_expand (data, data + len, p + 2, host, sizeof (host));
+	    if (status < 0)
+	      {
+		dns_free_data (r);
+		return NULL;
+	      }
+
+	    (*rr)->u.mx =
+	      (struct mx_record *) malloc (sizeof (struct mx_record) +
+					   strlen (host));
+	    (*rr)->u.mx->preference = (p[0] << 8) | p[1];
+	    strcpy ((*rr)->u.mx->domain, host);
+	    break;
+	  }
+	case T_SRV:
+	  {
+            if (p + 6 > data + len)
+              {
+                dns_free_data (r);
+                return NULL;
+              }
+	    status = dn_expand (data, data + len, p + 6, host, sizeof (host));
+	    if (status < 0)
+	      {
+		dns_free_data (r);
+		return NULL;
+	      }
+	    (*rr)->u.srv =
+	      (struct srv_record *) malloc (sizeof (struct srv_record) +
+					    strlen (host));
+	    (*rr)->u.srv->priority = (p[0] << 8) | p[1];
+	    (*rr)->u.srv->weight = (p[2] << 8) | p[3];
+	    (*rr)->u.srv->port = (p[4] << 8) | p[5];
+	    strcpy ((*rr)->u.srv->target, host);
+	    break;
+	  }
+	case T_TXT:
+	  {
+            if (p + *p > data + len)
+              {
+                dns_free_data (r);
+                return NULL;
+              }
+	    (*rr)->u.txt = (char *) malloc (size + 1);
+	    strncpy ((*rr)->u.txt, (char *) p + 1, *p);
+	    (*rr)->u.txt[*p] = 0;
+	    break;
+	  }
+
+	default:
+	  (*rr)->u.data = (unsigned char *) malloc (size);
+	  memcpy ((*rr)->u.data, p, size);
+	}
+      p += size;
+      rr = &(*rr)->next;
+    }
+  *rr = NULL;
+  return r;
+}
+
+
+
+struct dns_reply *
+dns_lookup (const char *domain, const char *type_name)
+{
+  unsigned char *reply = NULL;
+  int len, rlen;
+  int type;
+  struct dns_reply *r = NULL;
+
+  type = string_to_type (type_name);
+  rlen = 1024;
+  reply = malloc(rlen);
+  do
+    {
+      len = res_search (domain, C_IN, type, reply, rlen);
+      if ((len == -1) || (len < rlen))
+        {
+          break;
+        }
+      reply = realloc (reply, len + 1024);
+      rlen = len + 1024;
+    }
+  while (1);
+  if (len >= 0)
+    r = parse_reply (reply, len);
+  free(reply);
+  return r;
+}
+
+#else /* defined(HAVE_RES_SEARCH) && defined(HAVE_DN_EXPAND) */
+
+struct dns_reply *
+dns_lookup (const char *domain, const char *type_name)
+{
+  return NULL;
+}
+
+void
+dns_free_data (struct dns_reply *r)
+{
+}
+
+#endif
+
+#ifdef TEST
+
+int
+main (int argc, char **argv)
+{
+  struct dns_reply *r;
+  struct resource_record *rr;
+  r = dns_lookup (argv[1], argv[2]);
+  if (r == NULL)
+    {
+      printf ("No reply.\n");
+      return 1;
+    }
+  for (rr = r->head; rr; rr = rr->next)
+    {
+      printf ("%s %s %d ", rr->domain, type_to_string (rr->type), rr->ttl);
+      switch (rr->type)
+	{
+	case T_NS:
+	  printf ("%s\n", (char *) rr->data);
+	  break;
+	case T_A:
+	  printf ("%d.%d.%d.%d\n",
+		  ((unsigned char *) rr->data)[0],
+		  ((unsigned char *) rr->data)[1],
+		  ((unsigned char *) rr->data)[2],
+		  ((unsigned char *) rr->data)[3]);
+	  break;
+	case T_MX:
+	case T_AFSDB:
+	  {
+	    struct mx_record *mx = (struct mx_record *) rr->data;
+	    printf ("%d %s\n", mx->preference, mx->domain);
+	    break;
+	  }
+	case T_SRV:
+	  {
+	    struct srv_record *srv = (struct srv_record *) rr->data;
+	    printf ("%d %d %d %s\n", srv->priority, srv->weight,
+		    srv->port, srv->target);
+	    break;
+	  }
+	default:
+	  printf ("\n");
+	  break;
+	}
+    }
+
+  return 0;
+}
+#endif
--- /dev/null	2010-03-23 15:19:09.100374019 +0200
+++ nss_ldap-265/resolve.h	2009-11-06 12:28:08.000000000 +0200
@@ -0,0 +1,121 @@
+/*
+ * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Hvgskolan
+ * (Royal Institute of Technology, Stockholm, Sweden).
+ * All rights reserved.
+ * 
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 
+ * 3. All advertising materials mentioning features or use of this software
+ *    must display the following acknowledgement:
+ *      This product includes software developed by the Kungliga Tekniska
+ *      Hvgskolan and its contributors.
+ * 
+ * 4. Neither the name of the Institute nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/* $Id: resolve.h,v 2.6 2009/05/26 07:25:12 lukeh Exp $ */
+
+/* THIS IS NOT (yet) A PUBLIC INTERFACE */
+
+#ifndef __RESOLVE_H__
+#define __RESOLVE_H__
+
+/* when would this *not* be defined? */
+#include "config.h"
+
+#include <arpa/nameser.h>
+#ifdef HAVE_ARPA_NAMESER_COMPAT_H
+#include <arpa/nameser_compat.h>
+#endif
+
+/* We use these, but they are not always present in <arpa/nameser.h> */
+
+#ifndef T_TXT
+#define T_TXT		16
+#endif
+#ifndef T_AFSDB
+#define T_AFSDB		18
+#endif
+#ifndef T_SRV
+#define T_SRV		 33
+#endif
+
+struct dns_query
+{
+  char *domain;
+  unsigned type;
+  unsigned class;
+};
+
+struct mx_record
+{
+  unsigned preference;
+  char domain[1];
+};
+
+struct srv_record
+{
+  unsigned priority;
+  unsigned weight;
+  unsigned port;
+  char target[1];
+};
+
+struct resource_record
+{
+  char *domain;
+  unsigned type;
+  unsigned class;
+  unsigned ttl;
+  unsigned size;
+  union
+  {
+    void *data;
+    struct mx_record *mx;
+    struct mx_record *afsdb;	/* mx and afsdb are identical */
+    struct srv_record *srv;
+    struct in_addr *a;
+    char *txt;
+  }
+  u;
+  struct resource_record *next;
+};
+
+struct dns_reply
+{
+  HEADER h;
+  struct dns_query q;
+  struct resource_record *head;
+};
+
+#define dns_lookup	_nss_ldap_dns_lookup
+#define dns_free_data	_nss_ldap_dns_free_data
+
+struct dns_reply *dns_lookup (const char *, const char *);
+
+void dns_free_data (struct dns_reply *r);
+
+#endif /* __RESOLVE_H__ */
--- /dev/null	2010-03-23 15:19:09.100374019 +0200
+++ nss_ldap-265/snprintf.c	2009-11-06 12:28:08.000000000 +0200
@@ -0,0 +1,374 @@
+static char rcsId[] = "$Id: snprintf.c,v 2.9 2001/08/17 05:30:14 lukeh Exp $";
+
+#include "config.h"
+
+#ifndef HAVE_SNPRINTF
+
+/**************************************************************
+ * Original:
+ * Patrick Powell Tue Apr 11 09:48:21 PDT 1995
+ * A bombproof version of doprnt (dopr) included.
+ * Sigh. This sort of thing is always nasty do deal with. Note that
+ * the version here does not include floating point...
+ *
+ * snprintf() is used instead of sprintf() as it does limit checks
+ * for string length. This covers a nasty loophole.
+ *
+ * The other functions are there to prevent NULL pointers from
+ * causing nast effects.
+ **************************************************************/
+
+static void dopr ();
+static char *end;
+
+#include "snprintf.h"
+#include <string.h>
+
+#ifdef HAVE_CTYPE_H
+#include <ctype.h>
+#endif
+
+/* varargs declarations: */
+
+#if defined(HAVE_STDARG_H)
+#include <stdarg.h>
+#define HAVE_STDARGS		/* let's hope that works everywhere (mj) */
+#define VA_LOCAL_DECL va_list ap;
+#define VA_START(f) va_start(ap, f)
+#define VA_SHIFT(v,t) ;		/* no-op for ANSI */
+#define VA_END va_end(ap)
+#else
+#if defined(HAVE_VARARGS_H)
+#include <varargs.h>
+#undef HAVE_STDARGS
+#define VA_LOCAL_DECL va_list ap;
+#define VA_START(f) va_start(ap)	/* f is ignored! */
+#define VA_SHIFT(v,t) v = va_arg(ap,t)
+#define VA_END va_end(ap)
+#else
+XX **NO VARARGS ** XX
+#endif
+#endif
+#ifdef HAVE_STDARGS
+int snprintf (char *str, size_t count, const char *fmt, ...);
+int vsnprintf (char *str, size_t count, const char *fmt, va_list arg);
+#else
+int snprintf ();
+int vsnprintf ();
+#endif
+
+int
+vsnprintf (str, count, fmt, args)
+     char *str;
+     size_t count;
+     const char *fmt;
+     va_list args;
+{
+  str[0] = 0;
+  end = str + count - 1;
+  dopr (str, fmt, args);
+  if (count > 0)
+    {
+      end[0] = 0;
+    }
+  return (strlen (str));
+}
+
+/* VARARGS3 */
+#ifdef HAVE_STDARGS
+int
+snprintf (char *str, size_t count, const char *fmt, ...)
+#else
+int
+snprintf (va_alist)
+     va_dcl
+#endif
+{
+#ifndef HAVE_STDARGS
+  char *str;
+  size_t count;
+  char *fmt;
+#endif
+  VA_LOCAL_DECL VA_START (fmt);
+  VA_SHIFT (str, char *);
+  VA_SHIFT (count, size_t);
+  VA_SHIFT (fmt, char *);
+  (void) vsnprintf (str, count, fmt, ap);
+  VA_END;
+  return (strlen (str));
+}
+
+/*
+ * dopr(): poor man's version of doprintf
+ */
+
+static void fmtstr (char *value, int ljust, int len, int zpad);
+static void fmtnum (long value, int base, int dosign,
+		    int ljust, int len, int zpad);
+static void dostr (char *);
+static char *output;
+static void dopr_outch (int c);
+
+static void
+dopr (buffer, format, args)
+     char *buffer;
+     char *format;
+     va_list args;
+{
+  int ch;
+  long value;
+  int longflag = 0;
+  char *strvalue;
+  int ljust;
+  int len;
+  int zpad;
+
+  output = buffer;
+  while ((ch = *format++))
+    {
+      switch (ch)
+	{
+	case '%':
+	  ljust = len = zpad = 0;
+	nextch:
+	  ch = *format++;
+	  switch (ch)
+	    {
+	    case 0:
+	      dostr ("**end of format**");
+	      return;
+	    case '-':
+	      ljust = 1;
+	      goto nextch;
+	    case '0':		/* set zero padding if len not set */
+	      if (len == 0)
+		zpad = '0';
+	    case '1':
+	    case '2':
+	    case '3':
+	    case '4':
+	    case '5':
+	    case '6':
+	    case '7':
+	    case '8':
+	    case '9':
+	      len = len * 10 + ch - '0';
+	      goto nextch;
+	    case 'l':
+	      longflag = 1;
+	      goto nextch;
+	    case 'u':
+	    case 'U':
+	      /*fmtnum(value,base,dosign,ljust,len,zpad) */
+	      if (longflag)
+		{
+		  value = va_arg (args, long);
+		}
+	      else
+		{
+		  value = va_arg (args, int);
+		}
+	      fmtnum (value, 10, 0, ljust, len, zpad);
+	      break;
+	    case 'o':
+	    case 'O':
+	      /*fmtnum(value,base,dosign,ljust,len,zpad) */
+	      if (longflag)
+		{
+		  value = va_arg (args, long);
+		}
+	      else
+		{
+		  value = va_arg (args, int);
+		}
+	      fmtnum (value, 8, 0, ljust, len, zpad);
+	      break;
+	    case 'd':
+	    case 'D':
+	      if (longflag)
+		{
+		  value = va_arg (args, long);
+		}
+	      else
+		{
+		  value = va_arg (args, int);
+		}
+	      fmtnum (value, 10, 1, ljust, len, zpad);
+	      break;
+	    case 'x':
+	      if (longflag)
+		{
+		  value = va_arg (args, long);
+		}
+	      else
+		{
+		  value = va_arg (args, int);
+		}
+	      fmtnum (value, 16, 0, ljust, len, zpad);
+	      break;
+	    case 'X':
+	      if (longflag)
+		{
+		  value = va_arg (args, long);
+		}
+	      else
+		{
+		  value = va_arg (args, int);
+		}
+	      fmtnum (value, -16, 0, ljust, len, zpad);
+	      break;
+	    case 's':
+	      strvalue = va_arg (args, char *);
+	      fmtstr (strvalue, ljust, len, zpad);
+	      break;
+	    case 'c':
+	      ch = va_arg (args, int);
+	      dopr_outch (ch);
+	      break;
+	    case '%':
+	      dopr_outch (ch);
+	      continue;
+	    default:
+	      dostr ("???????");
+	    }
+	  longflag = 0;
+	  break;
+	default:
+	  dopr_outch (ch);
+	  break;
+	}
+    }
+  *output = 0;
+}
+
+static void
+fmtstr (value, ljust, len, zpad)
+     char *value;
+     int ljust, len, zpad;
+{
+  int padlen, strlen;		/* amount to pad */
+
+  if (value == 0)
+    {
+      value = "<NULL>";
+    }
+  for (strlen = 0; value[strlen]; ++strlen);	/* strlen */
+  padlen = len - strlen;
+  if (padlen < 0)
+    padlen = 0;
+  if (ljust)
+    padlen = -padlen;
+  while (padlen > 0)
+    {
+      dopr_outch (' ');
+      --padlen;
+    }
+  dostr (value);
+  while (padlen < 0)
+    {
+      dopr_outch (' ');
+      ++padlen;
+    }
+}
+
+static void
+fmtnum (value, base, dosign, ljust, len, zpad)
+     long value;
+     int base, dosign, ljust, len, zpad;
+{
+  int signvalue = 0;
+  unsigned long uvalue;
+  char convert[20];
+  int place = 0;
+  int padlen = 0;		/* amount to pad */
+  int caps = 0;
+
+  /* DEBUGP(("value 0x%x, base %d, dosign %d, ljust %d, len %d, zpad %d\n",
+     value, base, dosign, ljust, len, zpad )); */
+  uvalue = value;
+  if (dosign)
+    {
+      if (value < 0)
+	{
+	  signvalue = '-';
+	  uvalue = -value;
+	}
+    }
+  if (base < 0)
+    {
+      caps = 1;
+      base = -base;
+    }
+  do
+    {
+      convert[place++] =
+	(caps ? "0123456789ABCDEF" : "0123456789abcdef")
+	[uvalue % (unsigned) base];
+      uvalue = (uvalue / (unsigned) base);
+    }
+  while (uvalue);
+  convert[place] = 0;
+  padlen = len - place;
+  if (padlen < 0)
+    padlen = 0;
+  if (ljust)
+    padlen = -padlen;
+  /* DEBUGP(( "str '%s', place %d, sign %c, padlen %d\n",
+     convert,place,signvalue,padlen)); */
+  if (zpad && padlen > 0)
+    {
+      if (signvalue)
+	{
+	  dopr_outch (signvalue);
+	  --padlen;
+	  signvalue = 0;
+	}
+      while (padlen > 0)
+	{
+	  dopr_outch (zpad);
+	  --padlen;
+	}
+    }
+  while (padlen > 0)
+    {
+      dopr_outch (' ');
+      --padlen;
+    }
+  if (signvalue)
+    dopr_outch (signvalue);
+  while (place > 0)
+    dopr_outch (convert[--place]);
+  while (padlen < 0)
+    {
+      dopr_outch (' ');
+      ++padlen;
+    }
+}
+
+static void
+dostr (str)
+     char *str;
+{
+  while (*str)
+    dopr_outch (*str++);
+}
+
+static void
+dopr_outch (c)
+     int c;
+{
+  if (iscntrl (c) && c != '\n' && c != '\t')
+    {
+      c = '@' + (c & 0x1F);
+      if (end == 0 || output < end)
+	{
+	  *output++ = '^';
+	}
+    }
+  if (end == 0 || output < end)
+    {
+      *output++ = c;
+    }
+}
+
+#endif /* !HAVE_SNPRINTF */
--- /dev/null	2010-03-23 15:19:09.100374019 +0200
+++ nss_ldap-265/snprintf.h	2009-11-06 12:28:08.000000000 +0200
@@ -0,0 +1,52 @@
+/**************************************************************
+ * Original:
+ * Patrick Powell Tue Apr 11 09:48:21 PDT 1995
+ * A bombproof version of doprnt (dopr) included.
+ * Sigh. This sort of thing is always nasty do deal with. Note that
+ * the version here does not include floating point...
+ *
+ * snprintf() is used instead of sprintf() as it does limit checks
+ * for string length. This covers a nasty loophole.
+ *
+ * The other functions are there to prevent NULL pointers from
+ * causing nast effects.
+ **************************************************************/
+
+/* keep namespace tidy */
+#define vsnprintf	_nss_ldap_vsnprintf
+#define snprintf	_nss_ldap_snprintf
+
+#define HAVE_STDARG_H
+#include <sys/types.h>
+/* varargs declarations: */
+/* you might have to hand force this by doing #define HAVE_STDARG_H */
+
+#if defined(HAVE_STDARG_H)
+#include <stdarg.h>
+#define HAVE_STDARGS		/* let's hope that works everywhere (mj) */
+#define VA_LOCAL_DECL va_list ap;
+#define VA_START(f) va_start(ap, f)
+#define VA_SHIFT(v,t) ;		/* no-op for ANSI */
+#define VA_END va_end(ap)
+#else
+#if defined(HAVE_VARARGS_H)
+#include <varargs.h>
+#undef HAVE_STDARGS
+#define VA_LOCAL_DECL va_list ap;
+#define VA_START(f) va_start(ap)	/* f is ignored! */
+#define VA_SHIFT(v,t) v = va_arg(ap,t)
+#define VA_END va_end(ap)
+#else
+XX **NO VARARGS ** XX
+#endif
+#endif
+/* you can have ANSI C definitions */
+#ifdef HAVE_STDARGS
+int snprintf (char *str, size_t count, const char *fmt, ...);
+int vsnprintf (char *str, size_t count, const char *fmt, va_list arg);
+void setproctitle (char *fmt, ...);
+#else
+int snprintf ();
+int vsnprintf ();
+void setproctitle ();
+#endif
