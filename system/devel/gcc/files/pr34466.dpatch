#! /bin/sh -e

# DP: PR ada/34466: s-tasinf.ads:81:42: "cpu_set_t" not declared in "OS_Interface"

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p1 < $0
        #cd ${dir}gcc && autoconf
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p1 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

PR ada/34466

From: danglin <danglin@138bc75d-0d04-0410-961f-82ee72b054a4>

* s-osinte-linux-hppa.ads (SC_NPROCESSORS_ONLN): New constant for
	sysconf call.
	(bit_field): New packed boolean type used by cpu_set_t.
	(cpu_set_t): New type corresponding to the C type with
	the same name. Note that on the Ada side we use a bit
	field array for the affinity mask. There is not need
	for the C macro for setting individual bit.
	(pthread_setaffinity_np): New imported routine.

git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/trunk@131457 138bc75d-0d04-0410-961f-82ee72b054a4
---

 gcc/ada/sem_ch13.adb                    |    6 +++++-
 gcc/testsuite/gnat.dg/specs/pr34799.ads |   19 +++++++++++++++++++
 2 files changed, 24 insertions(+), 1 deletions(-)
 create mode 100644 gcc/testsuite/gnat.dg/specs/pr34799.ads


diff --git a/gcc/ada/sem_ch13.adb b/gcc/ada/sem_ch13.adb
index 33a55a8..2b58c12 100644
--- a/gcc/ada/sem_ch13.adb
+++ b/gcc/ada/sem_ch13.adb
@@ -2747,7 +2747,10 @@ package body Sem_Ch13 is
             --  We are only interested in the case where there is at least one
             --  unrepped component, and at least half the components have rep
             --  clauses. We figure that if less than half have them, then the
-            --  partial rep clause is really intentional.
+            --  partial rep clause is really intentional. If the component
+            --  type has no underlying type set at this point (as for a generic
+            --  formal type), we don't know enough to give a warning on the
+            --  component.
 
             if Num_Unrepped_Components > 0
               and then Num_Unrepped_Components < Num_Repped_Components
@@ -2756,6 +2759,7 @@ package body Sem_Ch13 is
                while Present (Comp) loop
                   if No (Component_Clause (Comp))
                     and then Comes_From_Source (Comp)
+                    and then Present (Underlying_Type (Etype (Comp)))
                     and then (Is_Scalar_Type (Underlying_Type (Etype (Comp)))
                                 or else Size_Known_At_Compile_Time
                                              (Underlying_Type (Etype (Comp))))
diff --git a/gcc/testsuite/gnat.dg/specs/pr34799.ads b/gcc/testsuite/gnat.dg/specs/pr34799.ads
new file mode 100644
index 0000000..7d06049
--- /dev/null
+++ b/gcc/testsuite/gnat.dg/specs/pr34799.ads
@@ -0,0 +1,19 @@
+-- { dg-do compile }
+-- { dg-options "-gnatwa" }
+
+package PR34799 is
+   generic
+      type Custom_T is private;
+   package Handler is
+      type Storage_T is record
+         A : Boolean;
+         B : Boolean;
+         C : Custom_T;
+      end record;
+
+      for Storage_T use record
+         A at 0 range 0..0;
+         B at 1 range 0..0;
+      end record;
+   end Handler;
+end PR34799;
