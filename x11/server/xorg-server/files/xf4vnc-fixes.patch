Index: xorg-server-1.7.3.901/hw/vnc/cursor.c
===================================================================
--- xorg-server-1.7.3.901.orig/hw/vnc/cursor.c
+++ xorg-server-1.7.3.901/hw/vnc/cursor.c
@@ -32,6 +32,7 @@
 #include "mipointer.h"
 #include "sprite.h"
 #include "cursorstr.h"
+#include "inputstr.h"
 #include "servermd.h"
 
 
Index: xorg-server-1.7.3.901/hw/vnc/kbdptr.c
===================================================================
--- xorg-server-1.7.3.901.orig/hw/vnc/kbdptr.c
+++ xorg-server-1.7.3.901/hw/vnc/kbdptr.c
@@ -39,6 +39,7 @@
 #include "mi.h"
 #include "mipointer.h"
 #include "keyboard.h"
+#include "xkbsrv.h"
 
 #ifdef DMXVNC
 #include "dmxinput.h"
@@ -75,15 +76,10 @@ static void
 EnqueueMotion(DeviceIntPtr ptrDev, int x, int y)
 {
    int maxEventsNum = GetMaximumEventsNum();
-   xEvent *events = (xEvent*) calloc(sizeof(xEvent), maxEventsNum);
-   EventListPtr evls= calloc(sizeof(EventList), maxEventsNum);
+   EventListPtr evls = InitEventList(maxEventsNum);
    int detail = 0, valuators[2], nevents, i;
    valuators[0] = x;
    valuators[1] = y;
-   for (i = 0; i < maxEventsNum; i++) {
-      evls[i].event = &events[i];
-      evls[i].evlen = sizeof(xEvent);
-   }
    if (!ptrDev) {
       ErrorF("VNC: In EnqueueMotion() ptrDev=NULL\n");
       return;
@@ -91,8 +87,7 @@ EnqueueMotion(DeviceIntPtr ptrDev, int x
    nevents = GetPointerEvents(evls, ptrDev, MotionNotify, detail,
                               POINTER_ABSOLUTE, 0, 2, valuators);
    for (i = 0; i < nevents; i++)
-      mieqEnqueue(ptrDev, events + i);
-   free(events);
+      mieqEnqueue(ptrDev, (InternalEvent*)(evls + i)->event);
    free(evls);
 }
 #endif
@@ -102,13 +97,8 @@ static void
 EnqueueButton(DeviceIntPtr ptrDev, int type, int detail)
 {
    int maxEventsNum = GetMaximumEventsNum();
-   xEvent *events = (xEvent*) calloc(sizeof(xEvent), maxEventsNum);
-   EventListPtr evls= calloc(sizeof(EventList), maxEventsNum);
+   EventListPtr evls = InitEventList(maxEventsNum);
    int nevents, i;
-   for (i = 0; i < maxEventsNum; i++) {
-      evls[i].event = &events[i];
-      evls[i].evlen = sizeof(xEvent);
-   }
    if (!ptrDev) {
       ErrorF("VNC: In EnqueueButton() ptrDev=NULL\n");
       return;
@@ -116,8 +106,7 @@ EnqueueButton(DeviceIntPtr ptrDev, int t
    nevents = GetPointerEvents(evls, ptrDev, type, detail,
                               POINTER_ABSOLUTE, 0, 0, NULL/*valuators*/);
    for (i = 0; i < nevents; i++)
-      mieqEnqueue(ptrDev, events + i);
-   free(events);
+      mieqEnqueue(ptrDev, (InternalEvent*)(evls + i)->event);
    free(evls);
 }
 
@@ -126,21 +115,15 @@ static void
 EnqueueKey(DeviceIntPtr kbdDev, int type, int detail)
 {
    int maxEventsNum = GetMaximumEventsNum();
-   xEvent *events = (xEvent*) calloc(sizeof(xEvent), maxEventsNum);
-   EventListPtr evls= calloc(sizeof(EventList), maxEventsNum);
+   EventListPtr evls = InitEventList(maxEventsNum);
    int nevents, i;
-   for (i = 0; i < maxEventsNum; i++) {
-      evls[i].event = &events[i];
-      evls[i].evlen = sizeof(xEvent);
-   }
    if (!kbdDev) {
       ErrorF("VNC: In EnqueueKey() kbdDev=NULL\n");
       return;
    }
    nevents = GetKeyboardEvents(evls, kbdDev, type, detail);
    for (i = 0; i < nevents; i++)
-      mieqEnqueue(kbdDev, events + i);
-   free(events);
+      mieqEnqueue(kbdDev, (InternalEvent*)(evls + i)->event);
    free(evls);
 }
 
@@ -166,7 +149,7 @@ KbdAddEvent(Bool down, KeySym keySym, rf
     if (!kbdDevice)
         return;
 
-    keySyms = &kbdDevice->key->curKeySyms;
+    keySyms = XkbGetCoreMap(kbdDevice);
 
 #ifdef CORBA
     if (cl) {
@@ -277,18 +260,18 @@ KbdAddEvent(Bool down, KeySym keySym, rf
 		shiftMustBePressed = TRUE;
 	}
 
-	SendMappingNotify(kbdDevice, MappingKeyboard, keyCode, 1, serverClient);
+	XkbApplyMappingChange(kbdDevice, keySyms, keyCode, 1, NULL, serverClient);
 
 	ErrorF("KbdAddEvent: unknown KeySym 0x%x - allocating KeyCode %d\n",
 	       (int)keySym, keyCode);
     }
 
     if (down) {
-	if (shiftMustBePressed && !(kbdDevice->key->state & ShiftMask)) {
+	if (shiftMustBePressed && !(XkbStateFieldFromRec(&kbdDevice->key->xkbInfo->state) & ShiftMask)) {
 	    fakeShiftPress = TRUE;
             EnqueueKey(kbdDevice, KeyPress, SHIFT_L_KEY_CODE);
 	}
-	if (shiftMustBeReleased && (kbdDevice->key->state & ShiftMask)) {
+	if (shiftMustBeReleased && (XkbStateFieldFromRec(&kbdDevice->key->xkbInfo->state) & ShiftMask)) {
 	    if (KEY_IS_PRESSED(SHIFT_L_KEY_CODE)) {
 		fakeShiftLRelease = TRUE;
                 EnqueueKey(kbdDevice, KeyRelease, SHIFT_L_KEY_CODE);
Index: xorg-server-1.7.3.901/hw/vnc/rfb.h
===================================================================
--- xorg-server-1.7.3.901.orig/hw/vnc/rfb.h
+++ xorg-server-1.7.3.901/hw/vnc/rfb.h
@@ -744,8 +744,7 @@ extern void rfbPrintStats(rfbClientPtr c
 /* dpms.c */
 
 extern Bool DPMSSupported(void);
-extern int DPSMGet(int *level);
-extern void DPMSSet(int level);
+extern int DPMSSet(ClientPtr client, int level);
 
 
 #endif /* RFB_H_INCLUDED */
Index: xorg-server-1.7.3.901/hw/vnc/rfbkeyb.c
===================================================================
--- xorg-server-1.7.3.901.orig/hw/vnc/rfbkeyb.c
+++ xorg-server-1.7.3.901/hw/vnc/rfbkeyb.c
@@ -147,7 +147,7 @@ xf86rfbKeybControlProc(DeviceIntPtr devi
 #ifdef XKB
 	if (noXkbExtension) {
 #endif
-	    InitKeyboardDeviceStruct(pDev, &keySyms, modMap,
+	    InitKeyboardDeviceStruct(pDev, NULL,
 				 (BellProcPtr)rfbSendBell,
 				 (KbdCtrlProcPtr)NoopDDA);
 #ifdef XKB
Index: xorg-server-1.7.3.901/hw/vnc/rfbmouse.c
===================================================================
--- xorg-server-1.7.3.901.orig/hw/vnc/rfbmouse.c
+++ xorg-server-1.7.3.901/hw/vnc/rfbmouse.c
@@ -36,6 +36,7 @@
 #include <xisb.h>
 #endif
 #include <xf86Xinput.h>
+#include "xserver-properties.h"
 #include <exevents.h>		/* Needed for InitValuator/Proximity stuff */
 #include <mipointer.h>
 
@@ -93,8 +94,13 @@ PtrDeviceControl(DeviceIntPtr dev, PtrCt
 static int
 xf86rfbMouseControlProc(DeviceIntPtr device, int onoff)
 {
-    BYTE map[6];
+#define NBUTTONS 5
+#define NAXES 2
+
+    BYTE map[NBUTTONS + 1];
     DevicePtr pDev = (DevicePtr)device;
+    Atom btn_labels[NBUTTONS] = {0};
+    Atom axes_labels[NAXES] = {0};
     void *func1;
     int (*func2)(void);
 
@@ -121,12 +127,29 @@ xf86rfbMouseControlProc(DeviceIntPtr dev
 	map[3] = 3;
 	map[4] = 4;
 	map[5] = 5;
+	btn_labels[0] = XIGetKnownProperty(BTN_LABEL_PROP_BTN_LEFT);
+	btn_labels[1] = XIGetKnownProperty(BTN_LABEL_PROP_BTN_MIDDLE);
+	btn_labels[2] = XIGetKnownProperty(BTN_LABEL_PROP_BTN_RIGHT);
+	btn_labels[3] = XIGetKnownProperty(BTN_LABEL_PROP_BTN_WHEEL_UP);
+	btn_labels[4] = XIGetKnownProperty(BTN_LABEL_PROP_BTN_WHEEL_DOWN);
+
+	axes_labels[0] = XIGetKnownProperty(AXIS_LABEL_PROP_REL_X);
+	axes_labels[1] = XIGetKnownProperty(AXIS_LABEL_PROP_REL_Y);
+
 	InitPointerDeviceStruct(pDev, map, 5, 
+#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) > 6
+				btn_labels,
+#endif
 #if GET_ABI_MAJOR(ABI_XINPUT_VERSION) < 3
                                 func1,
 #endif
 				PtrDeviceControl,
-                                (*func2)(), 2);
+                                (*func2)(),
+#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) > 6
+				2, axes_labels);
+#else
+				2);
+#endif
 	break;
 
     case DEVICE_ON:
@@ -146,6 +169,8 @@ xf86rfbMouseControlProc(DeviceIntPtr dev
 	break;
     }
     return Success;
+#undef NBUTTONS
+#undef NAXES
 }
 
 static void
Index: xorg-server-1.7.3.901/hw/vnc/rfbserver.c
===================================================================
--- xorg-server-1.7.3.901.orig/hw/vnc/rfbserver.c
+++ xorg-server-1.7.3.901/hw/vnc/rfbserver.c
@@ -48,6 +48,7 @@
 #include "mivalidate.h"
 #endif
 #include "rfb.h"
+#include "inputstr.h"
 #include "windowstr.h"
 #include "sprite.h"
 #include "propertyst.h"
Index: xorg-server-1.7.3.901/hw/vnc/init.c
===================================================================
--- xorg-server-1.7.3.901.orig/hw/vnc/init.c
+++ xorg-server-1.7.3.901/hw/vnc/init.c
@@ -90,6 +90,7 @@ from the X Consortium.
 #include "dix.h"
 #include "micmap.h"
 #include "rfb.h"
+#include "xserver-properties.h"
 
 #ifdef CORBA
 #include <vncserverctrl.h>
@@ -804,7 +805,7 @@ rfbKeybdProc(pDevice, onoff)
     case DEVICE_INIT: 
         vncSetKeyboardDevice(pDevice);
 	KbdDeviceInit(pDevice, &keySyms, modMap);
-	InitKeyboardDeviceStruct(pDev, &keySyms, modMap,
+	InitKeyboardDeviceStruct(pDev, NULL,
 				 (BellProcPtr)rfbSendBell,
 				 (KbdCtrlProcPtr)NoopDDA);
         break;
@@ -830,8 +831,13 @@ rfbMouseProc(pDevice, onoff)
     DeviceIntPtr pDevice;
     int onoff;
 {
-    BYTE map[6];
+#define NBUTTONS 5
+#define NAXES 2
+
+    BYTE map[NBUTTONS + 1];
     DevicePtr pDev = (DevicePtr)pDevice;
+    Atom btn_labels[NBUTTONS] = {0};
+    Atom axes_labels[NAXES] = {0};
 
     switch (onoff)
     {
@@ -842,9 +848,20 @@ rfbMouseProc(pDevice, onoff)
 	map[3] = 3;
 	map[4] = 4;
 	map[5] = 5;
+	btn_labels[0] = XIGetKnownProperty(BTN_LABEL_PROP_BTN_LEFT);
+	btn_labels[1] = XIGetKnownProperty(BTN_LABEL_PROP_BTN_MIDDLE);
+	btn_labels[2] = XIGetKnownProperty(BTN_LABEL_PROP_BTN_RIGHT);
+	btn_labels[3] = XIGetKnownProperty(BTN_LABEL_PROP_BTN_WHEEL_UP);
+	btn_labels[4] = XIGetKnownProperty(BTN_LABEL_PROP_BTN_WHEEL_DOWN);
+
+	axes_labels[0] = XIGetKnownProperty(AXIS_LABEL_PROP_REL_X);
+	axes_labels[1] = XIGetKnownProperty(AXIS_LABEL_PROP_REL_Y);
+
 	InitPointerDeviceStruct(pDev, map, 5,
+				btn_labels,
 				PtrDeviceControl,
-                                GetMaximumEventsNum(), 2 /* numAxes */);
+                                GetMaximumEventsNum(), 2 /* numAxes */,
+				axes_labels);
         vncSetPointerDevice(pDevice);
 	break;
 
@@ -865,6 +882,8 @@ rfbMouseProc(pDevice, onoff)
 	break;
     }
     return Success;
+#undef NBUTTONS
+#undef NAXES
 }
 
 
Index: xorg-server-1.7.3.901/hw/xfree86/vnc/vncInit.c
===================================================================
--- xorg-server-1.7.3.901.orig/hw/xfree86/vnc/vncInit.c
+++ xorg-server-1.7.3.901/hw/xfree86/vnc/vncInit.c
@@ -34,7 +34,6 @@
 
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
 #include "xorgVersion.h"
 
 int vncScreenPrivateIndex = -1;
@@ -53,7 +52,6 @@ Bool VNCInit(ScreenPtr pScreen, unsigned
 #ifndef XFree86LOADER
 static unsigned long VNCGeneration = 0;
 #endif
-static const OptionInfoRec *VNCAvailableOptions(void *unused);
 static void rfbWakeupHandler (int i, pointer blockData, unsigned long err, pointer pReadmask);
 
 static Bool vncCursorRealizeCursor(DeviceIntPtr, ScreenPtr, CursorPtr);
@@ -106,13 +104,6 @@ static const OptionInfoRec VNCOptions[] 
     { -1,			NULL,		OPTV_NONE, 	{0}, FALSE }
 };
 
-/*ARGSUSED*/
-static const OptionInfoRec *
-VNCAvailableOptions(void *unused)
-{
-    return (VNCOptions);
-}
-
 /*
  * rfbLog prints a time-stamped message to the log file (stderr).
  */
@@ -584,14 +575,6 @@ XF86ModuleData vncModuleData = {
     NULL                   /* ModuleTearDownProc */
 };
 
-ModuleInfoRec VNC = {
-    1,                     /* moduleVersion */
-    "VNC",                 /* moduleName */
-    NULL,                  /* module pointer */
-    0,                     /* refCount */
-    VNCAvailableOptions,   /* function returning array of OptionsInfoRec */
-};
-
 ExtensionModule vncExtensionModule = {
         VncExtensionInit,  /* initFunc */
         "VNC",             /* name */
Index: xorg-server-1.7.3.901/hw/vnc/Makefile.am
===================================================================
--- xorg-server-1.7.3.901.orig/hw/vnc/Makefile.am
+++ xorg-server-1.7.3.901/hw/vnc/Makefile.am
@@ -3,8 +3,11 @@
 bin_PROGRAMS = Xvnc
 
 Xvnc_SOURCES = \
+	$(top_srcdir)/dix/main.c \
+	$(top_srcdir)/dix/pixmap.c \
 	$(top_srcdir)/fb/fbcmap_mi.c \
 	$(top_srcdir)/mi/miinitext.c	\
+	$(top_srcdir)/xfixes/xfixes.c	\
 	auth.c \
 	cmap.c \
 	corre.c \
Index: xorg-server-1.7.3.901/hw/vnc/dpmsstubs.c
===================================================================
--- xorg-server-1.7.3.901.orig/hw/vnc/dpmsstubs.c
+++ xorg-server-1.7.3.901/hw/vnc/dpmsstubs.c
@@ -41,12 +41,7 @@ Bool DPMSSupported(void)
     return FALSE;
 }
 
-int DPSMGet(int *level)
+int DPMSSet(ClientPtr client, int level)
 {
-    return -1;
-}
-
-void DPMSSet(int level)
-{
-
+    return Success;
 }
